/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.sun.mdm.multidomain.relationship.ops.dao;

import com.sun.mdm.multidomain.relationship.ops.dto.RelationshipEaDto;
import com.sun.mdm.multidomain.relationship.ops.exceptions.*;

public interface RelationshipEaDao
{
	/** 
	 * Inserts a new row in the relationship_ea table.
	 */
	public long insert(RelationshipEaDto dto) throws RelationshipEaDaoException;

	/** 
	 * Updates a single row in the relationship_ea table.
	 */
	public void update(long pk, RelationshipEaDto dto) throws RelationshipEaDaoException;

	/** 
	 * Deletes a single row in the relationship_ea table.
	 */
	public void delete(long pk) throws RelationshipEaDaoException;

	/** 
	 * Returns the rows from the relationship_ea table that matches the specified primary-key value.
	 */
	public RelationshipEaDto findByPrimaryKey(long pk) throws RelationshipEaDaoException;

	/** 
	 * Returns all rows from the relationship_ea table that match the criteria 'EA_ID = :eaId'.
	 */
	public RelationshipEaDto findByPrimaryKey(int eaId) throws RelationshipEaDaoException;

	/** 
	 * Returns all rows from the relationship_ea table that match the criteria ''.
	 */
	public RelationshipEaDto[] findAll() throws RelationshipEaDaoException;

	/** 
	 * Returns all rows from the relationship_ea table that match the criteria 'RELATIONSHIP_DEF_ID = :relationshipDefId'.
	 */
	public RelationshipEaDto[] findByRelationshipDef(int relationshipDefId) throws RelationshipEaDaoException;

	/** 
	 * Returns all rows from the relationship_ea table that match the criteria 'EA_ID = :eaId'.
	 */
	public RelationshipEaDto[] findWhereEaIdEquals(int eaId) throws RelationshipEaDaoException;

	/** 
	 * Returns all rows from the relationship_ea table that match the criteria 'RELATIONSHIP_DEF_ID = :relationshipDefId'.
	 */
	public RelationshipEaDto[] findWhereRelationshipDefIdEquals(int relationshipDefId) throws RelationshipEaDaoException;

	/** 
	 * Returns all rows from the relationship_ea table that match the criteria 'ATTRIBUTE_NAME = :attributeName'.
	 */
	public RelationshipEaDto[] findWhereAttributeNameEquals(String attributeName) throws RelationshipEaDaoException;

	/** 
	 * Returns all rows from the relationship_ea table that match the criteria 'COLUMN_NAME = :columnName'.
	 */
	public RelationshipEaDto[] findWhereColumnNameEquals(String columnName) throws RelationshipEaDaoException;

	/** 
	 * Returns all rows from the relationship_ea table that match the criteria 'COLUMN_TYPE = :columnType'.
	 */
	public RelationshipEaDto[] findWhereColumnTypeEquals(String columnType) throws RelationshipEaDaoException;

	/** 
	 * Returns all rows from the relationship_ea table that match the criteria 'DEFAULT_VALUE = :defaultValue'.
	 */
	public RelationshipEaDto[] findWhereDefaultValueEquals(String defaultValue) throws RelationshipEaDaoException;

	/** 
	 * Returns all rows from the relationship_ea table that match the criteria 'IS_SEARCHABLE = :isSearchable'.
	 */
	public RelationshipEaDto[] findWhereIsSearchableEquals(String isSearchable) throws RelationshipEaDaoException;

	/** 
	 * Returns all rows from the relationship_ea table that match the criteria 'IS_REQUIRED = :isRequired'.
	 */
	public RelationshipEaDto[] findWhereIsRequiredEquals(String isRequired) throws RelationshipEaDaoException;

	/** 
	 * Returns all rows from the relationship_ea table that match the criteria 'IS_INCLUDED = :isIncluded'.
	 */
	public RelationshipEaDto[] findWhereIsIncludedEquals(String isIncluded) throws RelationshipEaDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the relationship_ea table that match the specified arbitrary SQL statement
	 */
	public RelationshipEaDto[] findByDynamicSelect(String sql, Object[] sqlParams) throws RelationshipEaDaoException;

	/** 
	 * Returns all rows from the relationship_ea table that match the specified arbitrary SQL statement
	 */
	public RelationshipEaDto[] findByDynamicWhere(String sql, Object[] sqlParams) throws RelationshipEaDaoException;

}
