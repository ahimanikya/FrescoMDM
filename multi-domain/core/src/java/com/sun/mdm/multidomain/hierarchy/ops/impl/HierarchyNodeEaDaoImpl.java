/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.sun.mdm.multidomain.hierarchy.ops.impl;

import com.sun.mdm.multidomain.hierarchy.ops.dao.AbstractDAO;
import com.sun.mdm.multidomain.hierarchy.ops.dao.HierarchyNodeEaDao;
import com.sun.mdm.multidomain.hierarchy.ops.dto.HierarchyNodeEaDto;
import com.sun.mdm.multidomain.hierarchy.ops.exceptions.*;

import com.sun.mdm.multidomain.hierarchy.ops.impl.ResourceManager;
import com.sun.mdm.multidomain.sql.DBSchema.HIERARCHY_NODE_EA;
import com.sun.mdm.multidomain.sql.InsertBuilder;
import com.sun.mdm.multidomain.sql.SQLBuilder;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class HierarchyNodeEaDaoImpl extends AbstractDAO implements HierarchyNodeEaDao {

    /**
     * The factory class for this DAO has two versions of the create() method - one that
    takes no arguments and one that takes a Connection argument. If the Connection version
    is chosen then the connection will be stored in this attribute and will be used by all
    calls to this DAO, otherwise a new Connection will be allocated for each operation.
     */
    protected java.sql.Connection userConn;
    /**
     * All finder methods in this class use this SELECT constant to build their queries
     */
    protected final String SQL_SELECT = "SELECT EA_ID, RELATIONSHIP_DEF_ID, ATTRIBUTE_NAME, COLUMN_NAME, COLUMN_TYPE, DEFAULT_VALUE, IS_SEARCHABLE, IS_REQUIRED, IS_INCLUDED FROM " + getTableName() + "";
    /**
     * Finder methods will pass this value to the JDBC setMaxRows method
     */
    protected int maxRows;
    /**
     * SQL INSERT statement for this table
     */
    protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( EA_ID, RELATIONSHIP_DEF_ID, ATTRIBUTE_NAME, COLUMN_NAME, COLUMN_TYPE, DEFAULT_VALUE, IS_SEARCHABLE, IS_REQUIRED, IS_INCLUDED ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";
    /**
     * SQL UPDATE statement for this table
     */
    protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET EA_ID = ?, RELATIONSHIP_DEF_ID = ?, ATTRIBUTE_NAME = ?, COLUMN_NAME = ?, COLUMN_TYPE = ?, DEFAULT_VALUE = ?, IS_SEARCHABLE = ?, IS_REQUIRED = ?, IS_INCLUDED = ? WHERE EA_ID = ?";
    /**
     * SQL DELETE statement for this table
     */
    protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE EA_ID = ?";
    /**
     * Index of column EA_ID
     */
    protected static final int COLUMN_EA_ID = 1;
    /**
     * Index of column RELATIONSHIP_DEF_ID
     */
    protected static final int COLUMN_RELATIONSHIP_DEF_ID = 2;
    /**
     * Index of column ATTRIBUTE_NAME
     */
    protected static final int COLUMN_ATTRIBUTE_NAME = 3;
    /**
     * Index of column COLUMN_NAME
     */
    protected static final int COLUMN_COLUMN_NAME = 4;
    /**
     * Index of column COLUMN_TYPE
     */
    protected static final int COLUMN_COLUMN_TYPE = 5;
    /**
     * Index of column DEFAULT_VALUE
     */
    protected static final int COLUMN_DEFAULT_VALUE = 6;
    /**
     * Index of column IS_SEARCHABLE
     */
    protected static final int COLUMN_IS_SEARCHABLE = 7;
    /**
     * Index of column IS_REQUIRED
     */
    protected static final int COLUMN_IS_REQUIRED = 8;
    /**
     * Index of column IS_INCLUDED
     */
    protected static final int COLUMN_IS_INCLUDED = 9;
    /**
     * Number of columns
     */
    protected static final int NUMBER_OF_COLUMNS = 9;
    /**
     * Index of primary-key column EA_ID
     */
    protected static final int PK_COLUMN_EA_ID = 1;
    private long mPrimaryKey = 0;

    /**
     * Inserts a new row in the hierarchy_ea table.
     */
    public long insert(HierarchyNodeEaDto dto) throws HierarchyEaDaoException {
        long t1 = System.currentTimeMillis();
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            InsertBuilder insertBld = new InsertBuilder();
            insertBld.setTable(HIERARCHY_NODE_EA.getTableName());
            for (HIERARCHY_NODE_EA ea : HIERARCHY_NODE_EA.values()) {
                insertBld.addColumns(ea.columnName);
            }
            String sqlStr = SQLBuilder.buildSQL(insertBld);
            stmt = conn.prepareStatement(sqlStr);
            int index = 1;
            stmt.setLong(index++, dto.getEaId());
            stmt.setLong(index++, dto.getHierarchyDefId());
            stmt.setString(index++, dto.getAttributeName());
            stmt.setString(index++, dto.getColumnName());
            stmt.setString(index++, dto.getColumnType());
            stmt.setString(index++, dto.getDefaultValue());
            stmt.setString(index++, dto.getIsSearchable() ? "Y" : "N");
            stmt.setString(index++, dto.getIsRequired() ? "Y" : "N");
            stmt.setString(index++, dto.getIsIncluded() ? "Y" : "N");
            System.out.println("Executing " + sqlStr + " with DTO: " + dto);
            int rows = stmt.executeUpdate();
            long t2 = System.currentTimeMillis();
            System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
            reset(dto);
            return rows;
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new HierarchyEaDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    public long getPrimaryKey() {
        return mPrimaryKey;
    }

    /**
     * Updates a single row in the hierarchy_ea table.
     */
    public void update(long pk, HierarchyNodeEaDto dto) throws HierarchyEaDaoException {
        long t1 = System.currentTimeMillis();
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            System.out.println("Executing " + SQL_UPDATE + " with DTO: " + dto);
            stmt = conn.prepareStatement(SQL_UPDATE);
            int index = 1;
            stmt.setLong(index++, dto.getEaId());
            stmt.setLong(index++, dto.getHierarchyDefId());
            stmt.setString(index++, dto.getAttributeName());
            stmt.setString(index++, dto.getColumnName());
            stmt.setString(index++, dto.getColumnType());
            stmt.setString(index++, dto.getDefaultValue());
            stmt.setString(index++, dto.getIsSearchable() ? "Y" : "N");
            stmt.setString(index++, dto.getIsRequired() ? "Y" : "N");
            stmt.setString(index++, dto.getIsIncluded() ? "Y" : "N");
            stmt.setLong(10, pk);
            int rows = stmt.executeUpdate();
            reset(dto);
            long t2 = System.currentTimeMillis();
            System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new HierarchyEaDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    /**
     * Deletes a single row in the hierarchy_ea table.
     */
    public void delete(long pk) throws HierarchyEaDaoException {
        long t1 = System.currentTimeMillis();
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            System.out.println("Executing " + SQL_DELETE + " with PK: " + pk);
            stmt = conn.prepareStatement(SQL_DELETE);
            stmt.setLong(1, pk);
            int rows = stmt.executeUpdate();
            long t2 = System.currentTimeMillis();
            System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new HierarchyEaDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    /**
     * Method 'HierarchyNodeEaDaoImpl'
     *
     */
    public HierarchyNodeEaDaoImpl() {
    }

    /**
     * Method 'HierarchyNodeEaDaoImpl'
     *
     * @param userConn
     */
    public HierarchyNodeEaDaoImpl(final java.sql.Connection userConn) {
        this.userConn = userConn;
    }

    /**
     * Sets the value of maxRows
     */
    public void setMaxRows(int maxRows) {
        this.maxRows = maxRows;
    }

    /**
     * Gets the value of maxRows
     */
    public int getMaxRows() {
        return maxRows;
    }

    /**
     * Method 'getTableName'
     *
     * @return String
     */
    public String getTableName() {
        return "hierarchy_ea";
    }

    /**
     * Fetches a single row from the result set
     */
    protected HierarchyNodeEaDto fetchSingleResult(ResultSet rs) throws SQLException {
        if (rs.next()) {
            HierarchyNodeEaDto dto = new HierarchyNodeEaDto();
            populateDto(dto, rs);
            return dto;
        } else {
            return null;
        }

    }

    /**
     * Fetches multiple rows from the result set
     */
    protected HierarchyNodeEaDto[] fetchMultiResults(ResultSet rs) throws SQLException {
        Collection resultList = new ArrayList();
        while (rs.next()) {
            HierarchyNodeEaDto dto = new HierarchyNodeEaDto();
            populateDto(dto, rs);
            resultList.add(dto);
        }

        HierarchyNodeEaDto ret[] = new HierarchyNodeEaDto[resultList.size()];
        resultList.toArray(ret);
        return ret;
    }

    /**
     * Populates a DTO with data from a ResultSet
     */
    protected void populateDto(HierarchyNodeEaDto dto, ResultSet rs) throws SQLException {
        dto.setEaId(rs.getInt(COLUMN_EA_ID));
        dto.setHierarchyDefId(rs.getInt(COLUMN_RELATIONSHIP_DEF_ID));
        dto.setAttributeName(rs.getString(COLUMN_ATTRIBUTE_NAME));
        dto.setColumnName(rs.getString(COLUMN_COLUMN_NAME));
        dto.setColumnType(rs.getString(COLUMN_COLUMN_TYPE));
        dto.setDefaultValue(rs.getString(COLUMN_DEFAULT_VALUE));
        dto.setIsSearchable(rs.getString(COLUMN_IS_SEARCHABLE).equalsIgnoreCase("Y") ? true : false);
        dto.setIsRequired(rs.getString(COLUMN_IS_REQUIRED).equalsIgnoreCase("Y") ? true : false);
        dto.setIsIncluded(rs.getString(COLUMN_IS_INCLUDED).equalsIgnoreCase("Y") ? true : false);
    }

    /**
     * Resets the modified attributes in the DTO
     */
    protected void reset(HierarchyNodeEaDto dto) {
    }

    /**
     * Returns all rows from the hierarchy_ea table that match the specified arbitrary SQL statement
     */
    public HierarchyNodeEaDto[] findByDynamicSelect(String sql, Object[] sqlParams) throws HierarchyEaDaoException {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            // construct the SQL statement
            final String SQL = sql;


            System.out.println("Executing " + SQL);
            // prepare statement
            stmt = conn.prepareStatement(SQL);
            stmt.setMaxRows(maxRows);

            // bind parameters
            for (int i = 0; sqlParams != null && i < sqlParams.length; i++) {
                stmt.setObject(i + 1, sqlParams[i]);
            }


            rs = stmt.executeQuery();

            // fetch the results
            return fetchMultiResults(rs);
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new HierarchyEaDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }
}
