/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.sun.mdm.multidomain.relationship.ops.impl;

import com.sun.mdm.multidomain.attributes.Attribute;
import com.sun.mdm.multidomain.relationship.ops.dao.AbstractDAO;
import com.sun.mdm.multidomain.relationship.ops.dao.RelationshipEavDao;

import com.sun.mdm.multidomain.relationship.ops.dto.RelationshipEavDto;
import com.sun.mdm.multidomain.relationship.ops.exceptions.*;

import com.sun.mdm.multidomain.sql.DBSchema.RELATIONSHIP_EAV;
import com.sun.mdm.multidomain.sql.InsertBuilder;
import com.sun.mdm.multidomain.sql.SQLBuilder;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Iterator;

public class RelationshipEavDaoImpl extends AbstractDAO implements RelationshipEavDao {

    /**
     * The factory class for this DAO has two versions of the create() method - one that
    takes no arguments and one that takes a Connection argument. If the Connection version
    is chosen then the connection will be stored in this attribute and will be used by all
    calls to this DAO, otherwise a new Connection will be allocated for each operation.
     */
    protected java.sql.Connection userConn;
    /**
     * Finder methods will pass this value to the JDBC setMaxRows method
     */
    protected int maxRows;
    private long mPrimaryKey = 0;

    /**
     * Method 'RelationshipNodeEavDaoImpl'
     *
     */
    public RelationshipEavDaoImpl() {
    }

    /**
     * Method 'RelationshipNodeEavDaoImpl'
     *
     * @param userConn
     */
    public RelationshipEavDaoImpl(final java.sql.Connection userConn) {
        this.userConn = userConn;
    }

    /**
     * Inserts a new row in the relationship_eav table.
     */
    public long insert(RelationshipEavDto dto) throws RelationshipEavDaoException {
        // declare variables
        PreparedStatement stmt = null;
        try {
            InsertBuilder insertBld = new InsertBuilder();
            insertBld.setTable(RELATIONSHIP_EAV.getTableName());
            for (RELATIONSHIP_EAV eav : RELATIONSHIP_EAV.values()) {
                insertBld.addColumns(eav.columnName);
            }
            Iterator iter = dto.getAttributes().keySet().iterator();
            ArrayList<Attribute> attrList = new ArrayList<Attribute>();
            while (iter.hasNext()) {
                Attribute attr = (Attribute) iter.next();
                attrList.add(attr);
                insertBld.addColumns(attr.getColumnName());
            }
            String sql = SQLBuilder.buildSQL(insertBld);
            stmt = userConn.prepareStatement(sql);
            int index = 1;
            stmt.setLong(index++, 0);
            stmt.setLong(index++, dto.getRelationshipId());
            for (int i = 0; i < attrList.size(); i++) {
                Attribute attr = attrList.get(i);
                String strValue = (String) dto.getAttributes().get(attr);
                switch (attr.getType()) {
                    case BOOLEAN:
                    case CHAR:
                        stmt.setString(index++, strValue);
                        break;
                    case STRING:
                        stmt.setString(index++, strValue);
                        break;
                    case FLOAT:
                        float floatVal = Float.valueOf(strValue.trim()).floatValue();
                        stmt.setFloat(index++, floatVal);
                    case INT:
                        long longVal = Long.valueOf(strValue.trim()).longValue();
                        stmt.setLong(index++, longVal);
                        break;
                    case DATE:
                        stmt.setTimestamp(index++, java.sql.Timestamp.valueOf(strValue));
                        break;
                    default:
                }
            }

            int rows = stmt.executeUpdate();
            return rows;
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new RelationshipEavDaoException("Exception: " + _e.getMessage(), _e);
        }

    }

    /**
     * Deletes a single row in the relationship_eav table.
     */
    public void delete(long pk) throws RelationshipEavDaoException {
        long t1 = System.currentTimeMillis();
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            // System.out.println("Executing " + SQL_DELETE + " with PK: " + pk);
            // stmt = conn.prepareStatement(SQL_DELETE);

            int rows = stmt.executeUpdate();
            long t2 = System.currentTimeMillis();
            System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new RelationshipEavDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    /**
     * Sets the value of maxRows
     */
    public void setMaxRows(int maxRows) {
        this.maxRows = maxRows;
    }

    /**
     * Gets the value of maxRows
     */
    public int getMaxRows() {
        return maxRows;
    }

    /**
     * Method 'getTableName'
     *
     * @return String
     */
    public String getTableName() {
        return "relationship_eav";
    }

    /**
     * Fetches a single row from the result set
     */
    protected RelationshipEavDto fetchSingleResult(ResultSet rs) throws SQLException {
        if (rs.next()) {
            RelationshipEavDto dto = new RelationshipEavDto();
            populateDto(dto, rs);
            return dto;
        } else {
            return null;
        }

    }

    /**
     * Fetches multiple rows from the result set
     */
    protected RelationshipEavDto[] fetchMultiResults(ResultSet rs) throws SQLException {
        Collection resultList = new ArrayList();
        while (rs.next()) {
            RelationshipEavDto dto = new RelationshipEavDto();
            populateDto(dto, rs);
            resultList.add(dto);
        }

        RelationshipEavDto ret[] = new RelationshipEavDto[resultList.size()];
        resultList.toArray(ret);
        return ret;
    }

    /**
     * Populates a DTO with data from a ResultSet
     */
    protected void populateDto(RelationshipEavDto dto, ResultSet rs) throws SQLException {
        //dto.setEavId(rs.getInt(COLUMN_EAV_ID));
        // dto.setRelationshipId(rs.getInt(COLUMN_RELATIONSHIP_ID));
        if (rs.wasNull()) {
            dto.setRelationshipIdNull(true);
        }

    }

    /**
     * Resets the modified attributes in the DTO
     */
    protected void reset(RelationshipEavDto dto) {
    }

    @Override
    public long getPrimaryKey() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void update(long pk, RelationshipEavDto dto) throws RelationshipEavDaoException {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
