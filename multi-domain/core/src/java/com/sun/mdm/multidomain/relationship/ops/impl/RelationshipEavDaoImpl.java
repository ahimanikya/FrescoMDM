/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.sun.mdm.multidomain.relationship.ops.impl;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import com.sun.mdm.multidomain.attributes.Attribute;
import com.sun.mdm.multidomain.relationship.ops.dao.AbstractDAO;
import com.sun.mdm.multidomain.relationship.ops.dao.RelationshipEavDao;
import com.sun.mdm.multidomain.relationship.ops.dto.RelationshipEavDto;
import com.sun.mdm.multidomain.relationship.ops.exceptions.*;
import com.sun.mdm.multidomain.sql.Criteria;
import com.sun.mdm.multidomain.sql.DBSchema.RELATIONSHIP_EAV;
import com.sun.mdm.multidomain.sql.DeleteBuilder;
import com.sun.mdm.multidomain.sql.InsertBuilder;
import com.sun.mdm.multidomain.sql.Parameter;
import com.sun.mdm.multidomain.sql.SQLBuilder;
import com.sun.mdm.multidomain.sql.UpdateBuilder;

/**
 *
 * @author David Peh
 */
public class RelationshipEavDaoImpl extends AbstractDAO implements RelationshipEavDao {

    private Connection userConn;

    /**
     * Method 'RelationshipNodeEavDaoImpl'
     *
     */
    public RelationshipEavDaoImpl() {
    }

    /**
     * Method 'RelationshipNodeEavDaoImpl'
     *
     * @param userConn
     */
    public RelationshipEavDaoImpl(final java.sql.Connection userConn) {
        this.userConn = userConn;
    }

    /**
     * Inserts a new row in the relationship_eav table.
     */
    public long insert(RelationshipEavDto dto) throws RelationshipEavDaoException {
        PreparedStatement stmt = null;
        try {
            InsertBuilder insert = new InsertBuilder();
            insert.setTable(RELATIONSHIP_EAV.getTableName());
            for (RELATIONSHIP_EAV eav : RELATIONSHIP_EAV.values()) {
                insert.addColumns(eav.columnName);
            }
            Iterator iter = dto.getAttributes().keySet().iterator();
            while (iter.hasNext()) {
                Attribute attr = (Attribute) iter.next();
                insert.addColumns(attr.getColumnName());
            }
            String sqlStr = SQLBuilder.buildSQL(insert);
            stmt = userConn.prepareStatement(sqlStr, Statement.RETURN_GENERATED_KEYS);
            int index = 1;
            stmt.setNull(index++, java.sql.Types.NULL);  // primary key
            stmt.setLong(index++, dto.getRelationshipId());
            Iterator iter2 = dto.getAttributes().keySet().iterator();
            while (iter2.hasNext()) {
                Attribute attr = (Attribute) iter2.next();
                String strValue = (String) dto.getAttributes().get(attr);
                switch (attr.getType()) {
                    case BOOLEAN:
                    case CHAR:
                    case STRING:
                        stmt.setString(index++, strValue);
                        break;
                    case FLOAT:
                        float floatVal = Float.valueOf(strValue.trim()).floatValue();
                        stmt.setFloat(index++, floatVal);
                    case INT:
                        long longVal = Long.valueOf(strValue.trim()).longValue();
                        stmt.setLong(index++, longVal);
                        break;
                    case DATE:
                        long timeVal = Long.parseLong(strValue);
                        stmt.setTimestamp(index++, new java.sql.Timestamp(timeVal));
                        break;
                    default:
                }
            }

            int rows = stmt.executeUpdate();
            long primaryKey = 0;
            if (rows > 0) {
                ResultSet rs = stmt.getGeneratedKeys();
                if (rs != null && rs.next()) {
                    primaryKey = rs.getLong(1);
                }
            }
            return primaryKey;
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new RelationshipEavDaoException("Exception: " + _e.getMessage(), _e);
        }

    }

    /**
     * Deletes a single row in the RELATIONSHIP_EAV table.
     */
    public void delete(long relId) throws RelationshipEavDaoException {
        PreparedStatement stmt = null;
        try {
            DeleteBuilder delete = new DeleteBuilder();
            delete.setTable(RELATIONSHIP_EAV.getTableName());
            Criteria c1 = new Parameter(RELATIONSHIP_EAV.RELATIONSHIP_ID.columnName);
            delete.addCriteria(c1);
            String sqlStr = SQLBuilder.buildSQL(delete);
            stmt = userConn.prepareStatement(sqlStr);
            stmt.setLong(1, relId);
            int rows = stmt.executeUpdate();
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new RelationshipEavDaoException("Exception: " + _e.getMessage(), _e);
        }
    }

    public int update(RelationshipEavDto dto) throws RelationshipEavDaoException {
        PreparedStatement stmt = null;
        try {
            UpdateBuilder update = new UpdateBuilder();
            update.setTable(RELATIONSHIP_EAV.getTableName());
            Criteria c1 = new Parameter(RELATIONSHIP_EAV.RELATIONSHIP_ID.columnName);
            update.addCriteria(c1);

            Iterator iter = dto.getAttributes().keySet().iterator();
            while (iter.hasNext()) {
                Attribute attr = (Attribute) iter.next();
                update.addColumns(attr.getColumnName());
            }
            int index = 1;
            String sqlStr = SQLBuilder.buildSQL(update);
            stmt = userConn.prepareStatement(sqlStr);
            Iterator iter2 = dto.getAttributes().keySet().iterator();
            while (iter2.hasNext()) {
                Attribute attr = (Attribute) iter2.next();
                String strValue = (String) dto.getAttributes().get(attr);
                switch (attr.getType()) {
                    case BOOLEAN:
                    case CHAR:
                    case STRING:
                        stmt.setString(index++, strValue);
                        break;
                    case FLOAT:
                        float floatVal = Float.valueOf(strValue.trim()).floatValue();
                        stmt.setFloat(index++, floatVal);
                    case INT:
                        long longVal = Long.valueOf(strValue.trim()).longValue();
                        stmt.setLong(index++, longVal);
                        break;
                    case DATE:
                        long timeVal = Long.parseLong(strValue);
                        stmt.setTimestamp(index++, new java.sql.Timestamp(timeVal));                        
                        break;
                    default:
                }
                update.addColumns(attr.getColumnName());

            }

            stmt.setLong(index++, dto.getRelationshipId());
            int rows = stmt.executeUpdate();
            return rows;
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new RelationshipEavDaoException("Exception: " + _e.getMessage(), _e);
        }
    }

    /**
     * Fetches a single row from the result set
     */
    protected RelationshipEavDto fetchSingleResult(ResultSet rs) throws SQLException {
        if (rs.next()) {
            RelationshipEavDto dto = new RelationshipEavDto();
            populateDto(dto, rs);
            return dto;
        } else {
            return null;
        }

    }

    /**
     * Fetches multiple rows from the result set
     */
    protected RelationshipEavDto[] fetchMultiResults(ResultSet rs) throws SQLException {
        Collection resultList = new ArrayList();
        while (rs.next()) {
            RelationshipEavDto dto = new RelationshipEavDto();
            populateDto(dto, rs);
            resultList.add(dto);
        }
        RelationshipEavDto ret[] = new RelationshipEavDto[resultList.size()];
        resultList.toArray(ret);
        return ret;
    }

    /**
     * Populates a DTO with data from a ResultSet
     */
    protected void populateDto(RelationshipEavDto dto, ResultSet rs) throws SQLException {
        //dto.setEavId(rs.getInt(COLUMN_EAV_ID));
        // dto.setRelationshipId(rs.getInt(COLUMN_RELATIONSHIP_ID));
        if (rs.wasNull()) {
            dto.setRelationshipIdNull(true);
        }

    }
}
