/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.sun.mdm.multidomain.relationship.ops.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.sun.mdm.multidomain.relationship.ops.dao.AbstractDAO;
import com.sun.mdm.multidomain.relationship.ops.dao.RelationshipDefDao;
import com.sun.mdm.multidomain.relationship.ops.dto.RelationshipDefDto;
import com.sun.mdm.multidomain.relationship.ops.dto.RelationshipEaDto;
import com.sun.mdm.multidomain.relationship.ops.exceptions.RelationshipDefDaoException;
import com.sun.mdm.multidomain.sql.SQLBuilder;
import com.sun.mdm.multidomain.sql.InsertBuilder;
import com.sun.mdm.multidomain.sql.SelectBuilder;
import com.sun.mdm.multidomain.sql.UpdateBuilder;
import static com.sun.mdm.multidomain.sql.DBSchema.*;

public class RelationshipDefDaoImpl extends AbstractDAO implements RelationshipDefDao {

    /**
     * The factory class for this DAO has two versions of the create() method - one that
    takes no arguments and one that takes a Connection argument. If the Connection version
    is chosen then the connection will be stored in this attribute and will be used by all
    calls to this DAO, otherwise a new Connection will be allocated for each operation.
     */
    protected java.sql.Connection userConn;
    /**
     * Index of column RELATIONSHIP_DEF_ID
     */
    protected static final int PK_COLUMN_RELATIONSHIP_DEF_ID = 1;
    private long mPrimaryKey = 0;
    private int maxRows;

    /**
     * Inserts a new row in the relationship_def table.
     */
    public long insert(RelationshipDefDto dto) throws RelationshipDefDaoException {

        long t1 = System.currentTimeMillis();
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();
            InsertBuilder builder = new InsertBuilder();
            builder.setTable(RELATIONSHIP_DEF.getTableName());
            for (RELATIONSHIP_DEF rel : RELATIONSHIP_DEF.values()) {
                builder.addColumns(rel.columnName);
            }
            String sqlStr = SQLBuilder.buildSQL(builder);
            stmt = conn.prepareStatement(sqlStr, Statement.RETURN_GENERATED_KEYS);
            int index = 1;
            stmt.setLong(index++, 0);
            stmt.setString(index++, dto.getRelationshipName());
            stmt.setString(index++, dto.getDescription());
            stmt.setString(index++, dto.getSourceDomain());
            stmt.setString(index++, dto.getTargetDomain());
            stmt.setString(index++, dto.getBidirectional());
            stmt.setString(index++, dto.getEffectiveFromReq());
            stmt.setString(index++, dto.getEffectiveFromReq());
            stmt.setString(index++, dto.getPurgeDateReq());
            stmt.setString(index++, dto.getPlugIn());

            System.out.println("Executing " + sqlStr + " with DTO: " + dto);
            int rows = stmt.executeUpdate();
            long t2 = System.currentTimeMillis();
            System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
            // retrieve values from auto-increment columns
            rs = stmt.getGeneratedKeys();
            if (rs != null && rs.next()) {
                mPrimaryKey = rs.getLong(1);
            }
            return mPrimaryKey;
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new RelationshipDefDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    public long getPrimaryKey() {
        return mPrimaryKey;
    }

    /**
     * Updates a single row in the relationship_def table.
     */
    public int update(RelationshipDefDto dto) throws RelationshipDefDaoException {

        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();
            UpdateBuilder builder = new UpdateBuilder();
            builder.setTable(RELATIONSHIP_DEF.getTableName());
            for (RELATIONSHIP_DEF rel : RELATIONSHIP_DEF.values()) {
                switch (rel) {
                    case RELATIONSHIP_DEF_ID:
                        builder.addCriteria(rel.columnName);
                        break;
                    default:
                        builder.addColumns(rel.columnName);
                }
            }
            String sqlStr = SQLBuilder.buildSQL(builder);
            System.out.println("Executing " + sqlStr + " with DTO: " + dto);
            stmt = conn.prepareStatement(sqlStr);

            int index = 1;
            stmt.setString(index++, dto.getRelationshipName());
            stmt.setString(index++, dto.getDescription());
            stmt.setString(index++, dto.getSourceDomain());
            stmt.setString(index++, dto.getTargetDomain());
            stmt.setString(index++, dto.getBidirectional());
            stmt.setString(index++, dto.getEffectiveFromReq());
            stmt.setString(index++, dto.getEffectiveToReq());
            stmt.setString(index++, dto.getPurgeDateReq());
            stmt.setString(index++, dto.getPlugIn());

            /* set update SQL criteria */
            stmt.setLong(index++, dto.getRelationshipDefId());
            int rows = stmt.executeUpdate();

            return rows;
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new RelationshipDefDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }
    }

    /**
     * Deletes a single row in the relationship_def table.
     */
    public void delete(long pk) throws RelationshipDefDaoException {
        long t1 = System.currentTimeMillis();
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();


            // stmt = conn.prepareStatement(SQL_DELETE);

            int rows = stmt.executeUpdate();
            long t2 = System.currentTimeMillis();
            System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new RelationshipDefDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    /**
     * Returns all rows from the RelationshipDto table that match the criteria
     *
     */
    public List<RelationshipDefDto> search(String sourceDomain, String targetDomain) throws RelationshipDefDaoException {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            // construct the SQL statement

            String sqlStr = BuildSelectByDomains();
            System.out.println("Executing " + sqlStr);
            // prepare statement
            stmt = conn.prepareStatement(sqlStr);

            int index = 1;
            stmt.setString(index++, sourceDomain);
            stmt.setString(index, targetDomain);
            //stmt.setMaxRows(maxRows);

            rs = stmt.executeQuery();

            // fetch the results
            return fetchMultiResults(rs);
        } catch (Exception _e) {
            throw new RelationshipDefDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }
    }

    private String BuildSelectByDomains() {
        SelectBuilder builder = new SelectBuilder();
        builder.setTable(RELATIONSHIP_DEF.getTableName(), RELATIONSHIP_EA.getTableName());

        for (RELATIONSHIP_DEF rel : RELATIONSHIP_DEF.values()) {
            builder.addColumns(rel.prefixedColumnName);
        }
        for (RELATIONSHIP_EA ea : RELATIONSHIP_EA.values()) {
            builder.addColumns(ea.prefixedColumnName);
        }
        builder.addCriteria(RELATIONSHIP_DEF.RELATIONSHIP_DEF_ID.prefixedColumnName, RELATIONSHIP_EA.RELATIONSHIP_DEF_ID.prefixedColumnName);
        builder.addCriteria(RELATIONSHIP_DEF.SOURCE_DOMAIN.prefixedColumnName, null);
        builder.addCriteria(RELATIONSHIP_DEF.TARGET_DOMAIN.prefixedColumnName, null);
        builder.addOrderBy(RELATIONSHIP_DEF.RELATIONSHIP_DEF_ID.prefixedColumnName);
        String sqlStr = SQLBuilder.buildSQL(builder);
        return sqlStr;
    }

    /**
     * Method 'RelationshipDefDaoImpl'
     *
     */
    public RelationshipDefDaoImpl() {
    }

    /**
     * Method 'RelationshipDefDaoImpl'
     *
     * @param userConn
     */
    public RelationshipDefDaoImpl(final java.sql.Connection userConn) {
        this.userConn = userConn;
    }

    /**
     * Sets the value of maxRows
     */
    public void setMaxRows(int maxRows) {
        this.maxRows = maxRows;
    }

    /**
     * Gets the value of maxRows
     */
    public int getMaxRows() {
        return maxRows;
    }

    /**
     * Fetches a single row from the result set
     */
    protected RelationshipDefDto fetchSingleResult(ResultSet rs) throws SQLException {
        if (rs.next()) {
            RelationshipDefDto dto = new RelationshipDefDto();
            populateDto(dto, rs);
            return dto;
        } else {
            return null;
        }

    }

    /**
     * Fetches multiple rows from the result set
     */
    protected List<RelationshipDefDto> fetchMultiResults(ResultSet rs) throws SQLException {
        ArrayList<RelationshipDefDto> resultList = new ArrayList();

        long relDefId = -1;
        RelationshipDefDto relDto = null;
        while (rs.next()) {
            if (relDefId != rs.getLong(RELATIONSHIP_DEF.RELATIONSHIP_DEF_ID.columnName)) {
                if (relDto != null) {
                    resultList.add(relDto);
                }
                relDefId = rs.getLong(RELATIONSHIP_DEF.RELATIONSHIP_DEF_ID.columnName);
                relDto = new RelationshipDefDto();
                populateDto(relDto, rs);
            }
            RelationshipEaDto eaDto = new RelationshipEaDto();
            populateDto(eaDto, rs);
            relDto.getAttributeDefs().add(eaDto);
        }
        if (relDto != null) {
            resultList.add(relDto);
        }
        return resultList;
    }

    /**
     * Populates a DTO with data from a ResultSet
     */
    private void populateDto(RelationshipDefDto relDto, ResultSet rs) throws SQLException {
        /* Poplulate RelationshipDef DTO */
        relDto.setRelationshipDefId(rs.getLong(RELATIONSHIP_DEF.RELATIONSHIP_DEF_ID.columnName));
        relDto.setRelationshipName(rs.getString(RELATIONSHIP_DEF.RELATIONSHIP_NAME.columnName));
        relDto.setDescription(rs.getString(RELATIONSHIP_DEF.DESCRIPTION.columnName));
        relDto.setSourceDomain(rs.getString(RELATIONSHIP_DEF.SOURCE_DOMAIN.columnName));
        relDto.setTargetDomain(rs.getString(RELATIONSHIP_DEF.TARGET_DOMAIN.columnName));
        relDto.setBidirectional(rs.getString(RELATIONSHIP_DEF.BIDIRECTIONAL.columnName));
        relDto.setEffectiveFromReq(rs.getString(RELATIONSHIP_DEF.EFFECTIVE_FROM_REQ.columnName));
        relDto.setEffectiveToReq(rs.getString(RELATIONSHIP_DEF.EFFECTIVE_TO_REQ.columnName));
        relDto.setPurgeDateReq(rs.getString(RELATIONSHIP_DEF.PURGE_DATE_REQ.columnName));
        relDto.setPlugIn(rs.getString(RELATIONSHIP_DEF.PLUGIN.columnName));
    }

    /**
     * Populates a DTO with data from a ResultSet
     */
    private void populateDto(RelationshipEaDto dto, ResultSet rs) throws SQLException {
        dto.setRelationshipDefId(rs.getLong(RELATIONSHIP_DEF.RELATIONSHIP_DEF_ID.columnName));
        dto.setAttributeName(rs.getString(RELATIONSHIP_EA.ATTRIBUTE_NAME.columnName));
        dto.setColumnName(rs.getString(RELATIONSHIP_EA.COLUMN_NAME.columnName));
        dto.setColumnType(rs.getString(RELATIONSHIP_EA.COLUMN_TYPE.columnName));
        dto.setDefaultValue(rs.getString(RELATIONSHIP_EA.DEFAULT_VALUE.columnName));
        dto.setIsSearchable(rs.getString(RELATIONSHIP_EA.IS_SEARCHABLE.columnName).equalsIgnoreCase("Y") ? true : false);
        dto.setIsRequired(rs.getString(RELATIONSHIP_EA.IS_REQUIRED.columnName).equalsIgnoreCase("Y") ? true : false);
        dto.setIsIncluded(rs.getString(RELATIONSHIP_EA.IS_INCLUDED.columnName).equalsIgnoreCase("Y") ? true : false);
    }
}
