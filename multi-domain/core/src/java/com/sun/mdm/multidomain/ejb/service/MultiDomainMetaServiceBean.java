/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */
package com.sun.mdm.multidomain.ejb.service;

import java.util.List;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.annotation.Resource;
import javax.annotation.security.DeclareRoles;
import javax.ejb.Local;
import javax.ejb.Remote;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;

import com.sun.mdm.index.master.ProcessingException;
import com.sun.mdm.index.master.UserException;
import com.sun.mdm.multidomain.group.GroupDef;
import com.sun.mdm.multidomain.group.GroupMemberDef;
import com.sun.mdm.multidomain.hierarchy.HierarchyDef;
import com.sun.mdm.multidomain.hierarchy.ops.exceptions.HierarchyDefDaoException;
import com.sun.mdm.multidomain.hierarchy.service.HierarchyDefService;
import com.sun.mdm.multidomain.relationship.RelationshipDef;
import com.sun.mdm.multidomain.relationship.Domain;
import com.sun.mdm.multidomain.relationship.service.DomainService;
import com.sun.mdm.multidomain.relationship.service.RelationshipDefService;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;


/**
 * The enterprise beans implementation of MultiDomainMetaService that is explpsed to the clients.
 * The application-specific class will be generated by multidomain project during design time.
 * @author cye
 * @author SwaranjitDua
 */
@Stateless(name="MultiDomainMetaService", mappedName="ejb/MULTIDOMAIN_APPLICATION_TOKEN_MultiDomainMetaService")
@Remote(MultiDomainMetaServiceRemote.class)
@Local(MultiDomainMetaServiceLocal.class)
@TransactionManagement(TransactionManagementType.CONTAINER)
@TransactionAttribute(value=TransactionAttributeType.REQUIRED)
@DeclareRoles({"MultiDomain.Admin","MultiDomain.User"})

public class MultiDomainMetaServiceBean implements MultiDomainMetaServiceRemote, MultiDomainMetaServiceLocal {
    
    private SessionContext sessionContext;
    
    @Resource(  name="jdbc/MULTIDOMAIN_DATASOURCE",
                type=javax.sql.DataSource.class,
                mappedName="jdbc/MULTIDOMAIN_APPLICATION_TOKEN_DataSource" )
    javax.sql.DataSource dataSource;

      
    /**
     * Set SessionContext and called by the container when the bean is created.
     * @param sessionContext SessionContext.
     */    
    @Resource
    public void setSessionContext(SessionContext sessionContext){
    	  this.sessionContext = sessionContext;
    }
     
    /**
     * Initialize resources.And onInitialization invocation occurs before the first 
     * business method invocation.
     * @throws ProcessingException Thrown if an error occurs during processing.
     */    
    @PostConstruct
    public void onInitialization(){
    }
    
    /**
     * Clean resources. And onTermination invocation occurs before the instance is 
     * removed by the container.
     */    
    @PreDestroy
    public void onTermination(){
    }
        
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#getDomains() 
     */    
     public String[] getDomains() throws ProcessingException {
        try {
          Connection con = dataSource.getConnection();
          DomainService dService = new DomainService(con);
          Domain[] domains = dService.getDomains();
          String[] domainNames = new String[domains.length];
          for (int i = 0; i < domainNames.length; i++) {
              domainNames[i] = domains[i].getDomainName();
          }
          return domainNames;

       } catch (Exception ex) {
           throw new ProcessingException(ex);
       }

    }

    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#getRelationshipDefs() 
     */
    public RelationshipDef[] getRelationshipDefs() 
        throws ProcessingException {
       try {
        Connection con = dataSource.getConnection();
        RelationshipDefService relDefService = new RelationshipDefService(con);
        return relDefService.getRelationshipDefs();

       } catch (Exception ex) {
           throw new ProcessingException(ex);
       }
         
    }

   /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#getRelationshipDefByName() 
     */    
    public RelationshipDef getRelationshipDefByName(String name, String sourceDomain, String targetDomain) 
        throws ProcessingException, UserException { 
        throw new ProcessingException("Not Implemented Yet."); 
    }  
   
   /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#getRelationshipDefById() 
     */        
    public RelationshipDef getRelationshipDefById(long relationshipDefId) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    } 
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#getRelationshipDefs() 
     */    
    public RelationshipDef[] getRelationshipDefs(String sourceDomain, String targetDomain) 
        throws ProcessingException, UserException {
         try {
        Connection con = dataSource.getConnection();
        RelationshipDefService relDefService = new RelationshipDefService(con);
        List<RelationshipDef> relDefs = relDefService.search(sourceDomain, targetDomain);
        return relDefs.toArray(new RelationshipDef[relDefs.size()]);
        
       } catch (Exception ex) {
           throw new ProcessingException(ex);
       } 
 
    }

    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#createRelationshipDef() 
     */        
    public long createRelationshipDef(RelationshipDef relationshipDef)  
        throws ProcessingException, UserException {
       try {
          Connection con = dataSource.getConnection();
        RelationshipDefService relDefService = new RelationshipDefService(con);
        relDefService.create(relationshipDef);
        return 0;
        
       } catch (Exception ex) {
           throw new ProcessingException(ex);
       }

    }    
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#updateRelationshipDef() 
     */        
    public void updateRelationshipDef(RelationshipDef relationshipDef)  
        throws ProcessingException, UserException {
         try {
          Connection con = dataSource.getConnection();
        RelationshipDefService relDefService = new RelationshipDefService(con);
        relDefService.update(relationshipDef);
      
       } catch (Exception ex) {
           throw new ProcessingException(ex);
       }

    }

    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#deleteRelationshipDef() 
     */        
    public void deleteRelationshipDef(RelationshipDef relationshipDef)  
        throws ProcessingException, UserException {
         try {
          Connection con = dataSource.getConnection();
        RelationshipDefService relDefService = new RelationshipDefService(con);
        relDefService.delete(relationshipDef);

       } catch (Exception ex) {
           throw new ProcessingException(ex);
       }
    }

    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#deleteRelationshipDef() 
     */        
    public void deleteRelationshipDef(String sourceDomain, String targetDomain, String relationshipDefName)  
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }

    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#getHierarchyDefs() 
     */        
    public List<HierarchyDef> getHierarchyDefs(String domain) 
        throws ProcessingException, UserException {
        
        try {
           Connection con = dataSource.getConnection();            
           HierarchyDefService hierarchyDefService = new HierarchyDefService(con);
           return hierarchyDefService.search(domain);
        } catch (SQLException sqlEx) {
            throw new ProcessingException(sqlEx);            
        } catch (HierarchyDefDaoException e) {
            throw new ProcessingException(e);
        }
    }
  
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#getHierarchyDefByName() 
     */      
    public HierarchyDef getHierarchyDefByName(String name, String domain)
        throws ProcessingException, UserException {
        
        List<HierarchyDef> hierarchyDefs = null;        
        try {
            Connection con = dataSource.getConnection();            
            HierarchyDefService hierarchyDefService = new HierarchyDefService(con);            
            hierarchyDefs = hierarchyDefService.search(domain);
        } catch(SQLException sqlEx) {
            throw new ProcessingException(sqlEx);                                
        } catch (HierarchyDefDaoException e) {
            throw new ProcessingException(e);
        }
        
        for (HierarchyDef hierarchyDef : hierarchyDefs) {
            if (hierarchyDef.getName().equals(name)) {
                return hierarchyDef;
            }
        }
        
        return null;
    }
     
   /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#getHierarchyDefById() 
     */ 
    public HierarchyDef getHierarchyDefById(long hierarchyId)
        throws ProcessingException, UserException {      
        
        try {
            Connection con = dataSource.getConnection();            
            HierarchyDefService hierarchyDefService = new HierarchyDefService(con);                        
            return hierarchyDefService.searchById(hierarchyId);
        } catch(SQLException sqlEx) {
            throw new ProcessingException(sqlEx);                                
        } catch (HierarchyDefDaoException e) {
            throw new ProcessingException(e);
        }
    }
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#createHierarchyDef() 
     */        
    public String createHierarchyDef(HierarchyDef hierarchyDef)  
        throws ProcessingException, UserException {        
        
        try {
            Connection con = dataSource.getConnection();            
            HierarchyDefService hierarchyDefService = new HierarchyDefService(con);                        
            long pk = hierarchyDefService.create(hierarchyDef);
            return Long.toString(pk);
        } catch (Exception e) {
            throw new ProcessingException(e);
        }
    }
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#updateHierarchyDef() 
     */        
    public void updateHierarchyDef(HierarchyDef hierarchyDef)  
        throws ProcessingException, UserException {
        
        try {
            Connection con = dataSource.getConnection();            
            HierarchyDefService hierarchyDefService = new HierarchyDefService(con);                        
            hierarchyDefService.update(hierarchyDef);
        } catch(SQLException sqlEx) {
            throw new ProcessingException(sqlEx);                                
        } catch (HierarchyDefDaoException e) {
            throw new ProcessingException(e);
        }
    }

    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#deleteHierarchyDef() 
     */        
    public void deleteHierarchyDef(HierarchyDef hierarchyDef) 
        throws ProcessingException, UserException {
        
        try {
            Connection con = dataSource.getConnection();            
            HierarchyDefService hierarchyDefService = new HierarchyDefService(con);                        
            hierarchyDefService.delete(hierarchyDef);
        } catch(SQLException sqlEx) {
            throw new ProcessingException(sqlEx);                                
        } catch (HierarchyDefDaoException e) {
            throw new ProcessingException(e);
        }
    }
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#deleteHierarchyDef() 
     */        
    public void deleteHierarchyDef(String domain, String name) 
        throws ProcessingException, UserException {
        
        List<HierarchyDef> hierarchyDefs = null;        
        try {
            Connection con = dataSource.getConnection();            
            HierarchyDefService hierarchyDefService = new HierarchyDefService(con);                        
            hierarchyDefs = hierarchyDefService.search(domain);
        } catch(SQLException sqlEx) {
            throw new ProcessingException(sqlEx);                                
        } catch (HierarchyDefDaoException e) {
            throw new ProcessingException(e);
        }
        
        for (HierarchyDef hierarchyDef : hierarchyDefs) {
            if (hierarchyDef.getName().equals(name)) {
                try {
                    Connection con = dataSource.getConnection();            
                    HierarchyDefService hierarchyDefService = new HierarchyDefService(con);                                
                    hierarchyDefService.delete(hierarchyDef);
                } catch(SQLException sqlEx) {
                    throw new ProcessingException(sqlEx);                    
                } catch (HierarchyDefDaoException e) {
                    throw new ProcessingException(e);
                }
            }
        }
        
    }
         
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#getGroupDefs() 
     */        
    public GroupDef[] getGroupDefs(String domain) 
        throws ProcessingException {
        throw new ProcessingException("Not Implemented Yet."); 
    }
        
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#createGroupDef() 
     */        
    public String createGroupDef(GroupDef groupDef) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#updateGroupDef() 
     */        
    public void updateGroupDef(GroupDef groupDef) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#deleteGroupDef() 
     */        
    public void deleteGroupDef(GroupDef groupDef) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }    
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#deleteGroupDef() 
     */        
    public void deleteGroupDef(String domain, String name) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }      
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#getGroupMemberDefs() 
     */   
    public GroupMemberDef[] getGroupMemberDefs(String domain) 
    throws ProcessingException {
    	   throw new ProcessingException("Not Implemented Yet."); 
    }
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#createGroupMemberDef() 
     */        
    public String createGroupMemberDef(GroupMemberDef groupMemberDef) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#updateGroupMemberDef() 
     */        
    public void updateGroupMemberDef(GroupMemberDef groupMemberDef) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#deleteGroupMemberDef() 
     */        
    public void deleteGroupMemberDef(GroupMemberDef groupMemberDef) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }    
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#deleteGroupMemberDef() 
     */        
    public void deleteGroupMemberDef(String domain, String name) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }      
    
}
