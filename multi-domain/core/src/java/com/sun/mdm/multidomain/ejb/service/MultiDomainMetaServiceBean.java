/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */
package com.sun.mdm.multidomain.ejb.service;

import javax.ejb.Stateless;
import javax.ejb.SessionContext;
import javax.ejb.Local;
import javax.ejb.Remote;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.annotation.Resource;
import javax.annotation.Resources;
import javax.annotation.security.DeclareRoles;
        
import com.sun.mdm.index.master.UserException;
import com.sun.mdm.index.master.ProcessingException;
        
import com.sun.mdm.multidomain.relationship.RelationshipType;

/**
 * The enterprise beans implementation of MultiDomainMetaService that is explpsed to the clients.
 * The class will be generated by multidomain project during design time for the application-specific.
 * @author cye
 */
@Stateless(mappedName="ejb/MULTIDOMAIN_APPLICATION_TOKEN_MultiDomainMetaService")
@Remote(MultiDomainMetaServiceRemote.class)
@Local(MultiDomainMetaServiceLocal.class)
@TransactionManagement(TransactionManagementType.CONTAINER)
@DeclareRoles({"MultiDomain.Admin","MultiDomain.User"})
public class MultiDomainMetaServiceBean implements MultiDomainMetaServiceRemote, MultiDomainMetaServiceLocal {
    
    private SessionContext sessionContext;
      
    /**
     * Set SessionContext and called by the container when the bean is created.
     * @param sessionContext SessionContext.
     */    
    @Resource
    public void setSessionContext(SessionContext sessionContext){
    	  this.sessionContext = sessionContext;
    }
     
    /**
     * Initialize resources.And onInitialization invocation occurs before the first 
     * business method invocation.
     * @throws ProcessingException Thrown if an error occurs during processing.
     */    
    @PostConstruct
    public void onInitialization(){
    }
    
    /**
     * Clean resources. And onTermination invocation occurs before the instance is 
     * removed by the container.
     */    
    @PreDestroy
    public void onTermination(){
    }
        
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#getDomains() 
     */    
     public String[] getDomains() throws ProcessingException {
        String[] domains = new String[]{"Person", "Company", "Product"};
        return domains; 
    }

    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#getRelationshipTypes() 
     */
    public RelationshipType[] getRelationshipTypes() 
        throws ProcessingException {
        throw new ProcessingException("Not Implemented Yet."); 
    }

    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#getRelationshipTypes() 
     */    
    public RelationshipType[] getRelationshipTypes(String sourceDomain, String targetDomain) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }

    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#createRelationshipType() 
     */        
    public String createRelationshipType(RelationshipType relationshipType)  
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }    
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#updateRelationshipType() 
     */        
    public void updateRelationshipType(RelationshipType relationshipType)  
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }

    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#deleteRelationshipType() 
     */        
    public void deleteRelationshipType(RelationshipType relationshipType)  
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }

    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#deleteRelationshipType() 
     */        
    public void deleteRelationshipType(String sourceDomain, String targetDomain, String relationshipTypeName)  
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }

    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#getHierarchyTypes() 
     */        
    public RelationshipType[] getHierarchyTypes(String domain) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }
   
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#createHierarchyType() 
     */        
    public String createHierarchyType(RelationshipType hierarchyType)  
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#updateHierarchyType() 
     */        
    public void updateHierarchyType(RelationshipType hierarchyType)  
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }

    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#deleteHierarchyType() 
     */        
    public void deleteHierarchyType(RelationshipType hierarchyType) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#deleteHierarchyType() 
     */        
    public void deleteHierarchyType(String domain, String name) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }
         
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#getGroupTypes() 
     */        
    public RelationshipType[] getGroupTypes(String domain) 
        throws ProcessingException {
        throw new ProcessingException("Not Implemented Yet."); 
    }
        
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#createGroupType() 
     */        
    public String createGroupType(RelationshipType groupType) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#updateGroupType() 
     */        
    public void updateGroupType(RelationshipType groupType) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#deleteGroupType() 
     */        
    public void deleteGroupType(RelationshipType groupType) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }    
    
    /**
     * @see com.sun.mdm.multidomain.ejb.service.MultiDomainMetaService#deleteGroupType() 
     */        
    public void deleteGroupType(String domain, String name) 
        throws ProcessingException, UserException {
        throw new ProcessingException("Not Implemented Yet."); 
    }        
}
