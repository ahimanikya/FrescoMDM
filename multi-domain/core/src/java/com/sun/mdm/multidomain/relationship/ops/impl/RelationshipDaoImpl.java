/*
 * This source file was generated by FireStorm/DAO.
 *
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 *
 * For more information please visit http://www.codefutures.com/products/firestorm
 */
package com.sun.mdm.multidomain.relationship.ops.impl;

import com.sun.mdm.multidomain.attributes.AttributeType;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.sun.mdm.multidomain.relationship.ops.dao.AbstractDAO;
import com.sun.mdm.multidomain.relationship.ops.dao.RelationshipDao;
import com.sun.mdm.multidomain.relationship.ops.dto.RelationshipDefDto;
import com.sun.mdm.multidomain.relationship.ops.dto.RelationshipDto;
import com.sun.mdm.multidomain.relationship.ops.dto.RelationshipEaDto;
import com.sun.mdm.multidomain.relationship.ops.exceptions.*;
import com.sun.mdm.multidomain.sql.InsertBuilder;
import com.sun.mdm.multidomain.sql.SQLBuilder;
import com.sun.mdm.multidomain.sql.SelectBuilder;
import java.util.Date;
import java.util.List;
import java.util.Map;
import static com.sun.mdm.multidomain.sql.DBSchema.*;

public class RelationshipDaoImpl extends AbstractDAO implements RelationshipDao {

    /**
     * The factory class for this DAO has two versions of the create() method - one that
    takes no arguments and one that takes a Connection argument. If the Connection version
    is chosen then the connection will be stored in this attribute and will be used by all
    calls to this DAO, otherwise a new Connection will be allocated for each operation.
     */
    protected java.sql.Connection userConn;
    /**
     * Finder methods will pass this value to the JDBC setMaxRows method
     */
    protected int maxRows;
    private long mPrimaryKey = 0;

    /**
     * Inserts a new row in the RelationshipDto table.
     */
    public long insert(RelationshipDto dto) throws RelationshipDaoException {
        long t1 = System.currentTimeMillis();
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();
            InsertBuilder builder = new InsertBuilder();
            builder.setTable(RELATIONSHIP.getTableName());
            for (RELATIONSHIP rel : RELATIONSHIP.values()) {
                builder.addColumns(rel.columnName);
            }
            String sqlStr = SQLBuilder.buildSQL(builder);
            stmt = conn.prepareStatement(sqlStr);
            int index = 1;
            stmt.setLong(index++, 0);
            stmt.setLong(index++, dto.getRelationshipDefId());
            stmt.setString(index++, dto.getSourceEuid());
            stmt.setString(index++, dto.getTargetEuid());
            stmt.setTimestamp(index++, (java.sql.Timestamp) dto.getEffectiveFromDate());
            stmt.setTimestamp(index++, (java.sql.Timestamp) dto.getEffectiveToDate());
            stmt.setTimestamp(index++, (java.sql.Timestamp) dto.getPurgeDate());
            System.out.println("Executing " + sqlStr + " with DTO: " + dto);
            int rows = stmt.executeUpdate();
            reset(dto);
            rs = stmt.getGeneratedKeys();
            if (rs != null && rs.next()) {
                mPrimaryKey = rs.getLong(1);
            }
            return mPrimaryKey;
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new RelationshipDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    public long getPrimaryKey() {
        return mPrimaryKey;
    }

    /**
     * Updates a single row in the RelationshipDto table.
     */
    public void update(long pk, RelationshipDto dto) throws RelationshipDaoException {
        long t1 = System.currentTimeMillis();
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            //System.out.println("Executing " + SQL_UPDATE + " with DTO: " + dto);
            // stmt = conn.prepareStatement(SQL_UPDATE);
            int index = 1;
            stmt.setLong(index++, dto.getRelationshipId());
            stmt.setString(index++, dto.getSourceEuid());
            stmt.setString(index++, dto.getTargetEuid());
            stmt.setTimestamp(index++, (java.sql.Timestamp) dto.getEffectiveFromDate());
            stmt.setTimestamp(index++, (java.sql.Timestamp) dto.getEffectiveToDate());
            stmt.setTimestamp(index++, (java.sql.Timestamp) dto.getPurgeDate());
            stmt.setLong(14, pk);
            int rows = stmt.executeUpdate();
            reset(dto);
            long t2 = System.currentTimeMillis();
            System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new RelationshipDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    /**
     * Deletes a single row in the RelationshipDto table.
     */
    public void delete(long pk) throws RelationshipDaoException {
        long t1 = System.currentTimeMillis();
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            //System.out.println("Executing " + SQL_DELETE + " with PK: " + pk);
            // stmt = conn.prepareStatement(SQL_DELETE);
            stmt.setLong(1, pk);
            int rows = stmt.executeUpdate();
            long t2 = System.currentTimeMillis();
            System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
        } catch (Exception _e) {
            _e.printStackTrace();
            throw new RelationshipDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }

    }

    /**
     * Returns all rows from the RelationshipDto table that match the criteria
     *
     */
    public List<RelationshipDto> search(String sourceEUID, String targetEUID) throws RelationshipDaoException {
        // declare variables
        final boolean isConnSupplied = (userConn != null);
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // get the user-specified connection or get a connection from the ResourceManager
            conn = isConnSupplied ? userConn : ResourceManager.getConnection();

            // construct the SQL statement

            RelationshipDefDto attrDefList = getAttributeDefs(conn, sourceEUID, targetEUID);
            String sqlStr = BuildSelectSQL(attrDefList);
            System.out.println("Executing " + sqlStr);
            // prepare statement
            stmt = conn.prepareStatement(sqlStr);

            stmt.setLong(1, getPrimaryKey());
            //stmt.setMaxRows(maxRows);

            rs = stmt.executeQuery();

            // fetch the results
            return fetchMultiResults(rs, attrDefList);
        } catch (Exception _e) {
            throw new RelationshipDaoException("Exception: " + _e.getMessage(), _e);
        } finally {
            ResourceManager.close(rs);
            ResourceManager.close(stmt);
            if (!isConnSupplied) {
                ResourceManager.close(conn);
            }

        }
    }

    private RelationshipDefDto getAttributeDefs(Connection conn, String sourceEUID, String targetEUID) throws SQLException {
        SelectBuilder selectBld = new SelectBuilder();
        String relEATable = RELATIONSHIP_EA.getTableName();
        String relTable = RELATIONSHIP.getTableName();
        String relDefTable = RELATIONSHIP_DEF.getTableName();
        selectBld.setTable(relDefTable, relTable, relEATable);
        selectBld.addColumns(RELATIONSHIP.RELATIONSHIP_ID.prefixedColumnName);
        for (RELATIONSHIP_DEF relDef : RELATIONSHIP_DEF.values()) {
            selectBld.addColumns(relDef.prefixedColumnName);
        }
        for (RELATIONSHIP_EA relEA : RELATIONSHIP_EA.values()) {
            selectBld.addColumns(relEA.prefixedColumnName);
        }
        selectBld.addCriteria(RELATIONSHIP_DEF.RELATIONSHIP_DEF_ID.prefixedColumnName, RELATIONSHIP.RELATIONSHIP_DEF_ID.prefixedColumnName);
        selectBld.addCriteria(RELATIONSHIP_DEF.RELATIONSHIP_DEF_ID.prefixedColumnName, RELATIONSHIP_EA.RELATIONSHIP_DEF_ID.prefixedColumnName);
        selectBld.addCriteria(RELATIONSHIP.SOURCE_EUID.prefixedColumnName, null);
        selectBld.addCriteria(RELATIONSHIP.TARGET_EUID.prefixedColumnName, null);
        String sqlStr = SQLBuilder.buildSQL(selectBld);
        PreparedStatement stmt = conn.prepareStatement(sqlStr);
        int index = 1;
        stmt.setString(index++, sourceEUID);
        stmt.setString(index, targetEUID);
        ResultSet rs = stmt.executeQuery();
        RelationshipDefDto relDefDto = new RelationshipDefDto();
        while (rs.next()) {
            if (rs.isFirst()) {
                if (mPrimaryKey == 0) {
                    mPrimaryKey = rs.getLong(RELATIONSHIP.RELATIONSHIP_ID.columnName);
                }
                relDefDto.setRelationshipDefId(rs.getLong(RELATIONSHIP_DEF.RELATIONSHIP_DEF_ID.columnName));
                relDefDto.setRelationshipName(rs.getString(RELATIONSHIP_DEF.RELATIONSHIP_NAME.columnName));
                relDefDto.setDescription(rs.getString(RELATIONSHIP_DEF.DESCRIPTION.columnName));
                relDefDto.setSourceDomain(rs.getString(RELATIONSHIP_DEF.SOURCE_DOMAIN.columnName));
                relDefDto.setTargetDomain(rs.getString(RELATIONSHIP_DEF.TARGET_DOMAIN.columnName));
                relDefDto.setBidirectional(rs.getString(RELATIONSHIP_DEF.BIDIRECTIONAL.columnName));
                relDefDto.setEffectiveFromReq(rs.getString(RELATIONSHIP_DEF.EFFECTIVE_FROM_REQ.columnName));
                relDefDto.setEffectiveToReq(rs.getString(RELATIONSHIP_DEF.EFFECTIVE_TO_REQ.columnName));
                relDefDto.setPurgeDateReq(rs.getString(RELATIONSHIP_DEF.PURGE_DATE_REQ.columnName));
                relDefDto.setPlugIn(rs.getString(RELATIONSHIP_DEF.PLUGIN.columnName));
            }
            RelationshipEaDto relEa = new RelationshipEaDto();
            relEa.setEaId(rs.getLong(RELATIONSHIP_EA.EA_ID.columnName));
            relEa.setRelationshipDefId(rs.getLong(RELATIONSHIP_EA.RELATIONSHIP_DEF_ID.columnName));
            relEa.setAttributeName(rs.getString(RELATIONSHIP_EA.ATTRIBUTE_NAME.columnName));
            relEa.setColumnName(rs.getString(RELATIONSHIP_EA.COLUMN_NAME.columnName));
            relEa.setColumnType(rs.getString(RELATIONSHIP_EA.COLUMN_TYPE.columnName));
            relEa.setDefaultValue(rs.getString(RELATIONSHIP_EA.DEFAULT_VALUE.columnName));
            relEa.setIsSearchable(rs.getString(RELATIONSHIP_EA.IS_SEARCHABLE.columnName).equalsIgnoreCase("Y") ? true : false);
            relEa.setIsRequired(rs.getString(RELATIONSHIP_EA.IS_REQUIRED.columnName).equalsIgnoreCase("Y") ? true : false);
            relEa.setIsIncluded(rs.getString(RELATIONSHIP_EA.IS_INCLUDED.columnName).equalsIgnoreCase("Y") ? true : false);
            relDefDto.getAttributeDefs().add(relEa);
        }
        return relDefDto;
    }

    private String BuildSelectSQL(RelationshipDefDto relDef) {
        SelectBuilder builder = new SelectBuilder();
        builder.setTable(RELATIONSHIP.getTableName(), RELATIONSHIP_EAV.getTableName());

        for (RELATIONSHIP rel : RELATIONSHIP.values()) {
            builder.addColumns(rel.prefixedColumnName);
        }
        for (RELATIONSHIP_EAV ea : RELATIONSHIP_EAV.values()) {
            builder.addColumns(ea.prefixedColumnName);
        }
        for (RelationshipEaDto eaDto : relDef.getAttributeDefs()) {
            builder.addColumns(eaDto.getColumnName());
        }
        builder.addCriteria(RELATIONSHIP.RELATIONSHIP_ID.prefixedColumnName, null);
        builder.addCriteria(RELATIONSHIP.RELATIONSHIP_ID.prefixedColumnName, RELATIONSHIP_EAV.RELATIONSHIP_ID.prefixedColumnName);
        String sqlStr = SQLBuilder.buildSQL(builder);
        return sqlStr;
    }

    /**
     * Method 'RelationshipDaoImpl'
     *
     */
    public RelationshipDaoImpl() {
    }

    /**
     * Method 'RelationshipDaoImpl'
     *
     * @param userConn
     */
    public RelationshipDaoImpl(final java.sql.Connection userConn) {
        this.userConn = userConn;
    }

    /**
     * Sets the value of maxRows
     */
    public void setMaxRows(int maxRows) {
        this.maxRows = maxRows;
    }

    /**
     * Gets the value of maxRows
     */
    public int getMaxRows() {
        return maxRows;
    }

    /**
     * Fetches multiple rows from the result set
     */
    protected List<RelationshipDto> fetchMultiResults(ResultSet rs, RelationshipDefDto relDef) throws SQLException {
        ArrayList<RelationshipDto> resultList = new ArrayList<RelationshipDto>();
        while (rs.next()) {
            RelationshipDto dto = new RelationshipDto();
            populateDto(rs, dto, relDef.getAttributeDefs());
            resultList.add(dto);
        }

        RelationshipDto ret[] = new RelationshipDto[resultList.size()];
        resultList.toArray(ret);
        return resultList;
    }

    /**
     * Populates a DTO with data from a ResultSet
     */
    protected void populateDto(ResultSet rs, RelationshipDto relDto, List<RelationshipEaDto> attrDefList) throws SQLException {

        relDto.setRelationshipId(rs.getLong(RELATIONSHIP.RELATIONSHIP_ID.columnName));
        relDto.setRelationshipDefId(rs.getLong(RELATIONSHIP.RELATIONSHIP_DEF_ID.columnName));
        relDto.setSourceEuid(rs.getString(RELATIONSHIP.SOURCE_EUID.columnName));
        relDto.setTargetEuid(rs.getString(RELATIONSHIP.TARGET_EUID.columnName));
        relDto.setEffectiveFromDate(rs.getDate(RELATIONSHIP.EFFECTIVE_FROM_DATE.columnName));
        relDto.setEffectiveToDate(rs.getDate(RELATIONSHIP.EFFECTIVE_TO_DATE.columnName));
        relDto.setPurgeDate(rs.getDate(RELATIONSHIP.PURGE_DATE.columnName));
        Map attrValueList = relDto.getRelationshipAttributes();
        for (RelationshipEaDto attr : attrDefList) {
            AttributeType attrType = AttributeType.valueOf(attr.getColumnType());
            String attrValue = null;
            switch (attrType) {
                case STRING:
                    attrValue = rs.getString(attr.getColumnName());
                    break;
                case INTEGER:
                    long longVal = rs.getLong(attr.getColumnName());
                    attrValue = Long.toString(longVal);
                    break;
                default:
            }
            attrValueList.put(attr, attrValue);
        }

    }

    /**
     * Resets the modified attributes in the DTO
     */
    protected void reset(RelationshipDto dto) {
    }
}
