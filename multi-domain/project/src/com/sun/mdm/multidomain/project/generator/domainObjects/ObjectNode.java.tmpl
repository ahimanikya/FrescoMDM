[SBYNTAG:DEFINE:domainName,objname,pname,fieldname(),fieldtypename(),fieldtype(),keylist(),nulllist(),seclist()]
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */
package com.sun.mdm.index.objects.domains.[sbyntag:domainName];

import java.util.*;
import com.sun.mdm.index.objects.AttributeMetaData;
import com.sun.mdm.index.objects.ObjectNode;
import com.sun.mdm.index.objects.ObjectField;
import com.sun.mdm.index.objects.ObjectKey;
import com.sun.mdm.index.objects.exception.ObjectException;
import com.sun.mdm.index.objects.SystemObjectException;
import com.sun.mdm.index.util.LogUtil;
import com.sun.mdm.index.util.Logger;

public final class [sbyntag:objname.makeClassName]Object extends ObjectNode
{
    private static ArrayList mFieldNames;
    private static ArrayList mFieldTypes;
    private final Logger mLogger = LogUtil.getLogger(this.getClass().getName());
    
    static
    {
        mFieldNames = new ArrayList();
[SBYNTAG:REP-BEGIN]    
        mFieldNames.add("[sbyntag:fieldname()]");
[SBYNTAG:REP-END]
        mFieldTypes = new ArrayList();
[SBYNTAG:REP-BEGIN]    
        mFieldTypes.add(new Integer([sbyntag:fieldtypename()]));
[SBYNTAG:REP-END]
    }
    
    public [sbyntag:objname.makeClassName]Object() throws ObjectException
    {
        super("[sbyntag:objname]", mFieldNames, mFieldTypes);
        mParentTag = "[sbyntag:pname]";
        mChildTags = new ArrayList();
[SBYNTAG:REP-BEGIN]
        mChildTags.add("[sbyntag:seclist()]");
[SBYNTAG:REP-END]
        mTag = "[sbyntag:objname]";
[SBYNTAG:REP-BEGIN]
        setKeyType("[sbyntag:fieldname()]", [sbyntag:keylist()]);
[SBYNTAG:REP-END]
[SBYNTAG:REP-BEGIN]
        setNullable("[sbyntag:fieldname()]", [sbyntag:nulllist()]);
[SBYNTAG:REP-END]
    }

    public String getObjectId() throws ObjectException
    {
        return (get[sbyntag:objname.makeClassName]Id());
    }

[SBYNTAG:REP-BEGIN]    
    public [sbyntag:fieldtype()] get[sbyntag:fieldname().makeClassName]() throws ObjectException
    {
        try
        {
            return (([sbyntag:fieldtype()])getValue("[sbyntag:fieldname()]"));
        }
        catch (ObjectException e)
        {
            throw e;
        }
    }

[SBYNTAG:REP-END]

    public void setObjectId(Object value) throws ObjectException
    {
        set[sbyntag:objname.makeClassName]Id(value);
    }

[SBYNTAG:REP-BEGIN]    
    public void set[sbyntag:fieldname().makeClassName](Object value) throws ObjectException
    {
        try
        {
            setValue("[sbyntag:fieldname()]", value);
        }
        catch(ObjectException e)
        {
            throw e;
        }
    }
    
[SBYNTAG:REP-END]
    public AttributeMetaData getMetaData()
    {
        return null;
    }
            
[SBYNTAG:REP-BEGIN]    
    public Collection get[sbyntag:seclist().makeClassName]()
    {
        return pGetChildren("[sbyntag:seclist()]");
    }
    
[SBYNTAG:REP-END]
[SBYNTAG:REP-BEGIN]    
    public void add[sbyntag:seclist().makeClassName]([sbyntag:seclist().makeClassName]Object [sbyntag:seclist().toLowerCase])
    {
        try
        {
            addChild([sbyntag:seclist().toLowerCase]);
        }
        catch (ObjectException ex)
        {
            mLogger.error(ex.getMessage(), ex);
        }
    }
    
[SBYNTAG:REP-END]
    public void addSecondaryObject(ObjectNode obj) throws SystemObjectException
    {
        try
        {
            addChild(obj);
        }
        catch (ObjectException ex)
        {
            mLogger.error(ex.getMessage(), ex);
        }
    }
    
    public void dropSecondaryObject(ObjectNode obj) throws SystemObjectException
    {
        try
        {
            removeChild(obj.pGetTag(), obj.pGetKey());
        }
        catch (ObjectException ex)
        {
            mLogger.error(ex.getMessage(), ex);
        }
    }
    
    public Collection getSecondaryObject(String type) throws SystemObjectException
    {
        return pGetChildren(type);
    }    

    public ArrayList getChildTags()
    {
        if (null == mChildTags)
        {
            mChildTags = new ArrayList();
[SBYNTAG:REP-BEGIN]
            mChildTags.add("[sbyntag:seclist()]");
[SBYNTAG:REP-END]            
        }        
        
        return mChildTags;
    }
    
    public ObjectNode copy () throws ObjectException
    {
        [sbyntag:objname.makeClassName]Object ret = null;
        try
        {
            ret = new [sbyntag:objname.makeClassName]Object();
            String tag = pGetTag ();
            ArrayList names = pGetFieldNames ();
            ArrayList values = pGetFieldValues ();

            for(int i=0; i<names.size (); i++)
            {
                String name = (String)names.get (i);
                ret.setValue (name, getValue(name));
                ret.setVisible (name, isVisible (name));
                ret.setSearched (name, isSearched (name));
                ret.setChanged (name, isChanged (name));
                ret.setKeyType (name, isKeyType (name));
            }
            ret.setUpdateFlag ( isUpdated());
            ret.setRemoveFlag ( isRemoved());
            ret.setAddFlag ( isAdded());
            ret.setKeyChangeFlag ( isKeyChanged() );

            ArrayList fieldUpdateLogs = null;
            if ( pGetFieldUpdateLogs()!= null ){
                fieldUpdateLogs = (ArrayList)pGetFieldUpdateLogs().clone();    
            }
            ret.setFieldUpdateLogs( fieldUpdateLogs );
            
            if (null != mParent)
            {
                ret.setParent(mParent);
            }
           
            ArrayList aKeyedChildren = getAllChildrenFromHashMap();
            if (aKeyedChildren != null) {
                for (int i = 0; i < aKeyedChildren.size(); i++) {
                    ObjectNode child = (ObjectNode) aKeyedChildren.get(i);
                    ret.addChildNoFlagSet(child.copy());
                }
            }
        }
        catch (ObjectException e)
        {
            throw e;
        }
                
        return (ObjectNode)ret;
    }
    
    public ObjectNode structCopy () throws ObjectException
    {
        [sbyntag:objname.makeClassName]Object ret = null;
        try
        {
            ret = new [sbyntag:objname.makeClassName]Object();
            String tag = pGetTag ();
            ArrayList names = pGetFieldNames ();

            for(int i=0; i<names.size (); i++)
            {
                String name = (String)names.get (i);
                ret.setVisible (name, isVisible (name));
                ret.setSearched (name, isSearched (name));
                ret.setKeyType (name, isKeyType (name));
            }

            ObjectKey key = pGetKey();
            if (key != null) {
                ret.setKey(key);
            }                

            if (null != mParent)
            {
                ret.setParent(mParent);
            }

            ArrayList aKeyedChildren = getAllChildrenFromHashMap();
            if (aKeyedChildren != null) {
                for (int i = 0; i < aKeyedChildren.size(); i++) {
                    ObjectNode child = (ObjectNode) aKeyedChildren.get(i);
                    ret.addChildNoFlagSet(child.structCopy());
                }
            }
        }
        catch (ObjectException e)
        {
            throw e;
        }
                
        return (ObjectNode)ret;
    }
}
