/*
 * TabDomainView.java
 *
 * Created on October 22, 2008, 2:16 PM
 */

package com.sun.mdm.multidomain.project.editor;

import com.sun.mdm.multidomain.parser.DomainForWebManager;
import com.sun.mdm.multidomain.parser.DomainsForWebManager;
import com.sun.mdm.multidomain.parser.FieldGroup;
import com.sun.mdm.multidomain.parser.RecordDetail;
import com.sun.mdm.multidomain.project.editor.nodes.DomainNode;
import java.util.ArrayList;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbBundle;

/**
 *
 * @author  wee
 */
public class TabDomainView extends javax.swing.JPanel {

    private EditorMainApp mEditorMainApp = null;
    private DomainsForWebManager mDomains = null;
    private ArrayList<RecordDetail> mRecordDetail;
    private DomainForWebManager mDomain = null;
    private DomainNode mDomainNode = null;

    /** Creates new form TabDomainView */
    public TabDomainView(EditorMainApp editorMainApp, DomainForWebManager domain) {
        mEditorMainApp = editorMainApp;
        mDomain = domain;
        initComponents();
        getDomain(domain.getDomainName());
        mDomainNode = mEditorMainApp.getDomainNode(domain.getDomainName());
        jTableRecordID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBtnRmvHighLightField.setEnabled(true);
            }
        });
        
        jTableRecordSummay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                     onEditSummaryGroup(null);
                 }
                jBtnRmvSummaryGroup.setEnabled(true);
                jBtnEditSummaryGroup.setEnabled(true);
            }
        });
        
        jTableRecordDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                     onEditDetail(null);
                 }
                jBtnRemoveDetail.setEnabled(true);
                jBtnEditDetail.setEnabled(true);
            }
        });
         
    }

    private void getDomain(String domainName) {
        jCBIncludeEUID.setSelected(false);
        this.jTxtDomain.setText(domainName);
        
        FieldGroup fieldList = null;
        fieldList = mDomain.getRecordID().getFieldGroup();
        
        jCBIncludeEUID.setSelected(mDomain.getRecordID().isMShowEUID());
        
        TableModelRecordId recordIdModel = new TableModelRecordId(fieldList.getFieldRefs());
        jTableRecordID.setModel(recordIdModel);
        jPanelRecordHighLight.setVisible(true);

        TableModelRecordSummary recordSummaryModel = new TableModelRecordSummary(mDomain.getRecordSummaryFields());
        jTableRecordSummay.setModel(recordSummaryModel);
        jPanelDomainSummary.setVisible(true);

        mRecordDetail = mDomain.getRecordDetailList();
        TableModelRecordDetail mTableRecordDetailModel = new TableModelRecordDetail(mRecordDetail);
        jTableRecordDetail.setModel(mTableRecordDetailModel);
        jPanelRecordDetail.setVisible(true);

        
    }
    

private void enableSave() {
    mEditorMainApp.enableSaveAction(true);
}



 
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanelRecordHighLight = new javax.swing.JPanel();
        jCBIncludeEUID = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRecordID = new javax.swing.JTable();
        jBtnAddHighLightField = new javax.swing.JButton();
        jBtnRmvHighLightField = new javax.swing.JButton();
        jPanelDomainSummary = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableRecordSummay = new javax.swing.JTable();
        jBtnAddSummayGroup = new javax.swing.JButton();
        jBtnRmvSummaryGroup = new javax.swing.JButton();
        jBtnEditSummaryGroup = new javax.swing.JButton();
        jPanelRecordDetail = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableRecordDetail = new javax.swing.JTable();
        jBtnAddDetail = new javax.swing.JButton();
        jBtnRemoveDetail = new javax.swing.JButton();
        jBtnEditDetail = new javax.swing.JButton();
        jTxtDomain = new javax.swing.JTextField();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(TabDomainView.class, "LBL_Domain")); // NOI18N

        jPanelRecordHighLight.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(TabDomainView.class, "LBL_DOMAIN_RECORD_HIGHLIGHT_PROPERTIES"))); // NOI18N

        jCBIncludeEUID.setText(org.openide.util.NbBundle.getMessage(TabDomainView.class, "LBL_DOMAIN_INCLUDE_EUID")); // NOI18N
        jCBIncludeEUID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCBIncludeEUID(evt);
            }
        });

        jTableRecordID.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Field"
            }
        ));
        jScrollPane1.setViewportView(jTableRecordID);
        jTableRecordID.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(TabDomainView.class, "LBL_FIELD")); // NOI18N

        jBtnAddHighLightField.setText(org.openide.util.NbBundle.getMessage(TabDomainView.class, "LBL_Add")); // NOI18N
        jBtnAddHighLightField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddHighLightField(evt);
            }
        });

        jBtnRmvHighLightField.setText(org.openide.util.NbBundle.getMessage(TabDomainView.class, "LBL_Remove")); // NOI18N
        jBtnRmvHighLightField.setEnabled(false);
        jBtnRmvHighLightField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRemoveHighLightField(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelRecordHighLightLayout = new org.jdesktop.layout.GroupLayout(jPanelRecordHighLight);
        jPanelRecordHighLight.setLayout(jPanelRecordHighLightLayout);
        jPanelRecordHighLightLayout.setHorizontalGroup(
            jPanelRecordHighLightLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelRecordHighLightLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelRecordHighLightLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jCBIncludeEUID)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelRecordHighLightLayout.createSequentialGroup()
                        .add(jBtnAddHighLightField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jBtnRmvHighLightField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 407, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanelRecordHighLightLayout.linkSize(new java.awt.Component[] {jBtnAddHighLightField, jBtnRmvHighLightField}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanelRecordHighLightLayout.setVerticalGroup(
            jPanelRecordHighLightLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelRecordHighLightLayout.createSequentialGroup()
                .addContainerGap()
                .add(jCBIncludeEUID)
                .add(7, 7, 7)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelRecordHighLightLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jBtnRmvHighLightField)
                    .add(jBtnAddHighLightField))
                .addContainerGap())
        );

        jPanelDomainSummary.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(TabDomainView.class, "LBL_DOMAIN_RECORD_SUMMARY_PROPERTIES"))); // NOI18N

        jTableRecordSummay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Field Group"
            }
        ));
        jScrollPane2.setViewportView(jTableRecordSummay);
        jTableRecordSummay.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(TabDomainView.class, "LBL_FIELD_GROUP")); // NOI18N

        jBtnAddSummayGroup.setText(org.openide.util.NbBundle.getMessage(TabDomainView.class, "LBL_Add")); // NOI18N
        jBtnAddSummayGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddSummayGroup(evt);
            }
        });

        jBtnRmvSummaryGroup.setText(org.openide.util.NbBundle.getMessage(TabDomainView.class, "LBL_Remove")); // NOI18N
        jBtnRmvSummaryGroup.setEnabled(false);
        jBtnRmvSummaryGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRemoveSummaryGroup(evt);
            }
        });

        jBtnEditSummaryGroup.setText(org.openide.util.NbBundle.getMessage(TabDomainView.class, "LBL_Edit")); // NOI18N
        jBtnEditSummaryGroup.setEnabled(false);
        jBtnEditSummaryGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onEditSummaryGroup(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelDomainSummaryLayout = new org.jdesktop.layout.GroupLayout(jPanelDomainSummary);
        jPanelDomainSummary.setLayout(jPanelDomainSummaryLayout);
        jPanelDomainSummaryLayout.setHorizontalGroup(
            jPanelDomainSummaryLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelDomainSummaryLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 412, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
            .add(jPanelDomainSummaryLayout.createSequentialGroup()
                .add(161, 161, 161)
                .add(jBtnAddSummayGroup, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jBtnRmvSummaryGroup, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jBtnEditSummaryGroup, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(28, 28, 28))
        );

        jPanelDomainSummaryLayout.linkSize(new java.awt.Component[] {jBtnAddSummayGroup, jBtnEditSummaryGroup, jBtnRmvSummaryGroup}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanelDomainSummaryLayout.setVerticalGroup(
            jPanelDomainSummaryLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelDomainSummaryLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 8, Short.MAX_VALUE)
                .add(jPanelDomainSummaryLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jBtnAddSummayGroup)
                    .add(jBtnRmvSummaryGroup)
                    .add(jBtnEditSummaryGroup))
                .addContainerGap())
        );

        jPanelRecordDetail.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(TabDomainView.class, "LBL_DOMAIN_RECORD_DETAIL_PROPERTIES"))); // NOI18N

        jTableRecordDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Field Group"
            }
        ));
        jScrollPane3.setViewportView(jTableRecordDetail);
        jTableRecordDetail.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(TabDomainView.class, "LBL_FIELD_GROUP")); // NOI18N

        jBtnAddDetail.setText(org.openide.util.NbBundle.getMessage(TabDomainView.class, "LBL_Add")); // NOI18N
        jBtnAddDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddDetail(evt);
            }
        });

        jBtnRemoveDetail.setText(org.openide.util.NbBundle.getMessage(TabDomainView.class, "LBL_Remove")); // NOI18N
        jBtnRemoveDetail.setEnabled(false);
        jBtnRemoveDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRemoveDetail(evt);
            }
        });

        jBtnEditDetail.setText(org.openide.util.NbBundle.getMessage(TabDomainView.class, "LBL_Edit")); // NOI18N
        jBtnEditDetail.setEnabled(false);
        jBtnEditDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onEditDetail(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelRecordDetailLayout = new org.jdesktop.layout.GroupLayout(jPanelRecordDetail);
        jPanelRecordDetail.setLayout(jPanelRecordDetailLayout);
        jPanelRecordDetailLayout.setHorizontalGroup(
            jPanelRecordDetailLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelRecordDetailLayout.createSequentialGroup()
                .add(jPanelRecordDetailLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanelRecordDetailLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 415, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanelRecordDetailLayout.createSequentialGroup()
                        .add(170, 170, 170)
                        .add(jBtnAddDetail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jBtnRemoveDetail, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jBtnEditDetail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(23, 23, 23))
        );

        jPanelRecordDetailLayout.linkSize(new java.awt.Component[] {jBtnAddDetail, jBtnEditDetail, jBtnRemoveDetail}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanelRecordDetailLayout.setVerticalGroup(
            jPanelRecordDetailLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelRecordDetailLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 153, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 12, Short.MAX_VALUE)
                .add(jPanelRecordDetailLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jBtnEditDetail)
                    .add(jBtnRemoveDetail)
                    .add(jBtnAddDetail)))
        );

        jTxtDomain.setEditable(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelRecordHighLight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jTxtDomain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 210, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jPanelRecordDetail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jPanelDomainSummary, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(226, 226, 226))
        );

        layout.linkSize(new java.awt.Component[] {jPanelDomainSummary, jPanelRecordDetail, jPanelRecordHighLight}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jTxtDomain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(26, 26, 26)
                .add(jPanelRecordHighLight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanelDomainSummary, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanelRecordDetail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(34, 34, 34))
        );
    }// </editor-fold>//GEN-END:initComponents

private void onAddHighLightField(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddHighLightField
// TODO add your handling code here:
   EntityTreeDialog entityDlg = new EntityTreeDialog(mDomainNode.getEntityTree(), mDomain.getRecordID().getFieldGroup());
    entityDlg.setVisible(true);
    if (entityDlg.isSelected()) {
        if (entityDlg.getFieldList().size() > 0) {
            TableModelRecordId fieldModel = (TableModelRecordId) jTableRecordID.getModel();
            for (String fieldName : entityDlg.getFieldList()) {
                FieldGroup.FieldRef fieldRef = mDomain.getRecordID().getFieldGroup().createFieldRef(fieldName);
                //mDomain.getRecordID().getFieldGroup().addFieldRef(fieldRef);
                fieldModel.addRow(fieldModel.getRowCount(), fieldRef);
            }
            jTableRecordID.setModel(fieldModel);
            enableSave();

        }
    }

}//GEN-LAST:event_onAddHighLightField

private void onRemoveHighLightField(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRemoveHighLightField
// TODO add your handling code here:
    int selectedRow = this.jTableRecordID.getSelectedRow();
    TableModelRecordId model = (TableModelRecordId) jTableRecordID.getModel();
    FieldGroup.FieldRef selectedGroup = model.getRow(selectedRow);   
    NotifyDescriptor d = new NotifyDescriptor.Confirmation(
            NbBundle.getMessage(TabDomainView.class, "MSG_Confirm_Remove_Row_Prompt"),
            NbBundle.getMessage(TabDomainView.class, "MSG_Confirm_Remove_Row_Title"),
            NotifyDescriptor.YES_NO_OPTION);
    if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.YES_OPTION) {
        Object recordDetail = (Object) model.getValueAt(selectedRow, model.iColRecordDetailName);
        model.removeRow(selectedRow);
        if (jTableRecordID.getRowCount() > 0) {
            jTableRecordID.setRowSelectionInterval(0, 0);
            this.jBtnRmvHighLightField.setEnabled(true);
        } else {
            this.jBtnRmvHighLightField.setEnabled(false);
        }

        this.enableSave();
    }
    
    
}//GEN-LAST:event_onRemoveHighLightField

private void onAddSummayGroup(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddSummayGroup
// TODO add your handling code here:
    FieldGroup newGroup = new FieldGroup();
    FieldGroupDialog dlg = new FieldGroupDialog(newGroup, mDomainNode);
    dlg.setVisible(true);
    if (dlg.isModified()) {
        TableModelRecordSummary model = (TableModelRecordSummary) jTableRecordSummay.getModel();
        model.addRow(model.getRowCount(), newGroup);
        jTableRecordSummay.setModel(model);
        //mDomain.getRecordSummaryFields().add(newGroup);
        this.jBtnRmvSummaryGroup.setEnabled(true);
        this.jBtnEditSummaryGroup.setEnabled(true);
        enableSave();

    }

}//GEN-LAST:event_onAddSummayGroup

private void onRemoveSummaryGroup(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRemoveSummaryGroup
// TODO add your handling code here:
    int selectedRow = jTableRecordSummay.getSelectedRow();
    TableModelRecordSummary model = (TableModelRecordSummary) jTableRecordSummay.getModel();
    FieldGroup selectedGroup = model.getRow(selectedRow);   
    NotifyDescriptor d = new NotifyDescriptor.Confirmation(
            NbBundle.getMessage(TabDomainView.class, "MSG_Confirm_Remove_Row_Prompt"),
            NbBundle.getMessage(TabDomainView.class, "MSG_Confirm_Remove_Row_Title"),
            NotifyDescriptor.YES_NO_OPTION);
    if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.YES_OPTION) {
        Object recordDetail = (Object) model.getValueAt(selectedRow, model.iColRecordSummary);
        model.removeRow(selectedRow);
        this.jBtnRemoveDetail.setEnabled(false);
        this.jBtnEditDetail.setEnabled(false);
        this.enableSave();
    }
    
}//GEN-LAST:event_onRemoveSummaryGroup

private void onEditSummaryGroup(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onEditSummaryGroup
// TODO add your handling code here:
    int selectedRow = this.jTableRecordSummay.getSelectedRow();
    TableModelRecordSummary model = (TableModelRecordSummary) jTableRecordSummay.getModel();
    FieldGroup selectedGroup = model.getRow(selectedRow);
    if (selectedGroup.getDescription() == null || selectedGroup.getDescription().length() == 0) {
        selectedGroup.setDescription("FieldGroup-" + selectedRow);
    }
    FieldGroupDialog dlg = new FieldGroupDialog(selectedGroup, mDomainNode);
    dlg.setVisible(true);
    if (dlg.isModified()) {
        jTableRecordSummay.setRowSelectionInterval(selectedRow, selectedRow);
        model.fireTableDataChanged();
        enableSave();
    }
}//GEN-LAST:event_onEditSummaryGroup

private void onAddDetail(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddDetail
// TODO add your handling code here:
    //DomainForWebManager domain = mDomains.getDomain((String) jCBDomainList.getSelectedItem());
    int recordDetailID = mDomain.generateRecordDetailID();
    RecordDetail newRecordDetail = new RecordDetail(recordDetailID);
    DomainRecordDetailDialog dlg = new DomainRecordDetailDialog(newRecordDetail, true, mDomainNode);
    dlg.setVisible(true);
    if (dlg.isModifed()) {
        //mRecordDetail.add(newRecordDetail);
        TableModelRecordDetail recordDetailModel = (TableModelRecordDetail) this.jTableRecordDetail.getModel();
        int totalRowCount = recordDetailModel.getRowCount();
        recordDetailModel.addRow(totalRowCount, newRecordDetail);
        jTableRecordDetail.setModel(recordDetailModel);
        jTableRecordDetail.setRowSelectionInterval(totalRowCount, totalRowCount);
        this.jBtnEditDetail.setEnabled(true);
        this.jBtnRemoveDetail.setEnabled(true);
        this.enableSave();        
    }
    
}//GEN-LAST:event_onAddDetail

private void onRemoveDetail(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRemoveDetail
// TODO add your handling code here:
        int selectedRow = jTableRecordDetail.getSelectedRow();
    TableModelRecordDetail model = (TableModelRecordDetail) jTableRecordDetail.getModel();
    RecordDetail recordDet = model.getRow(selectedRow);
    if (mDomain.isRecordDetailUsed(recordDet)) {
        String warningMsg = NbBundle.getMessage(TabDomainView.class, "MSG_ERROR_DELETING_RECORD_DETAIL");
        NotifyDescriptor errorNotify = new NotifyDescriptor.Message(
                warningMsg,
                NotifyDescriptor.ERROR_MESSAGE);
        DialogDisplayer.getDefault().notify(errorNotify);

    } else {
        NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                NbBundle.getMessage(TabDomainView.class, "MSG_Confirm_Remove_Row_Prompt"),
                NbBundle.getMessage(TabDomainView.class, "MSG_Confirm_Remove_Row_Title"),
                NotifyDescriptor.YES_NO_OPTION);
        if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.YES_OPTION) {
            Object recordDetail = (Object) model.getValueAt(selectedRow, model.iColRecordDetailName);
            model.removeRow(selectedRow);
            if (jTableRecordDetail.getRowCount() > 0) {
                jTableRecordDetail.setRowSelectionInterval(0, 0);
            } else {
                this.jBtnRemoveDetail.setEnabled(false);
                this.jBtnEditDetail.setEnabled(false);
            }

            this.enableSave();
        }
    }
}//GEN-LAST:event_onRemoveDetail

private void onEditDetail(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onEditDetail
// TODO add your handling code here:
    int selectedRow = this.jTableRecordDetail.getSelectedRow();
    TableModelRecordDetail recordDetailModel = (TableModelRecordDetail) jTableRecordDetail.getModel();
    RecordDetail recordDetail = recordDetailModel.getRow(selectedRow);
    DomainRecordDetailDialog dlg = new DomainRecordDetailDialog(recordDetail, false, mDomainNode);
    dlg.setVisible(true);
    if (dlg.isModifed()) {
        recordDetailModel.fireTableDataChanged();
        this.enableSave();        
    }

}//GEN-LAST:event_onEditDetail

private void onCBIncludeEUID(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCBIncludeEUID
  mDomain.getRecordID().setMShowEUID(this.jCBIncludeEUID.isSelected());
  enableSave();
}//GEN-LAST:event_onCBIncludeEUID


    class TableModelRecordSummary extends AbstractTableModel {

        private String columnNames[] = {NbBundle.getMessage(TabDomainView.class, "LBL_FIELD_GROUP"),};
        ArrayList fieldRows;
        final static int iColRecordSummary = 0;

        TableModelRecordSummary(ArrayList rows) {
            fieldRows = rows;
        }

        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            if (fieldRows != null) {
                return fieldRows.size();
            }
            return 0;
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            if (fieldRows != null) {
                FieldGroup singleRow = (FieldGroup) fieldRows.get(row);
                if (singleRow != null) {
                    switch (col) {
                        case iColRecordSummary:
                            if (singleRow.getDescription() != null && singleRow.getDescription().length() > 0) {
                                return singleRow.getDescription();
                            }
                            return "FieldGroup-" + row;
                            
                        default:
                            return null;
                    }
                }
            }
            return null;
        }

        public FieldGroup getRow(int row) {
            if (fieldRows != null) {
                FieldGroup singleRow = (FieldGroup) fieldRows.get(row);
                return singleRow;
            }
            return null;
        }

        public Class getColumnClass(int c) {
            Object colNameObj = getValueAt(0, c);
            return colNameObj.getClass();
        }

        /*
         * Don't need to implement this method unless your table's
         * editable.
         */
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            return false;
        }

        /*
         * Don't need to implement this method unless your table's
         * data can change.
         */
        
        public void setValueAt(Object value, int row, int col) {
            switch (col) {
                case iColRecordSummary:
                    ((FieldGroup) fieldRows.get(row)).setDescription((String) value);
                    break;

            }
            fireTableCellUpdated(row, col);

        }

        public void removeRow(int index) {
            fieldRows.remove(index);
            this.fireTableRowsDeleted(index, index);
        }

        public void addRow(int index, FieldGroup row) {
            //fieldRows.add(row);
            fieldRows.add(index, row);
            this.fireTableRowsInserted(index, index);
        }

        /**
        public MatchRuleRowPerProbType getRow(int index) {
        //MatchRuleRowPerProbType row = (MatchRuleRowPerProbType) matchRuleRows.get(index);
        return row;
        }
         */
        public int findRowByFieldName(String fieldName) {
            for (int i = 0; i < fieldRows.size(); i++) {
                if (getValueAt(i, iColRecordSummary).equals(fieldName)) {
                    return i;
                }
            }
            return -1;
        }

        public FieldGroup.FieldRef findRelTypeByFieldName(String fieldName) {
            for (int i = 0; i < fieldRows.size(); i++) {
                if (getValueAt(i, iColRecordSummary).equals(fieldName)) {
                    return (FieldGroup.FieldRef) fieldRows.get(i);
                }
            }
            return null;
        }
    }


    class TableModelRecordId extends AbstractTableModel {

        private String columnNames[] = {NbBundle.getMessage(TabDomainView.class, "LBL_FIELD"),};
        ArrayList fieldRows = new ArrayList<FieldGroup.FieldRef>();
        final static int iColRecordDetailName = 0;

        TableModelRecordId(ArrayList<FieldGroup.FieldRef> rows) {
            fieldRows = rows;
        }

        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            if (fieldRows != null) {
                return fieldRows.size();
            }
            return 0;
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            if (fieldRows != null) {
                FieldGroup.FieldRef singleRow = (FieldGroup.FieldRef) fieldRows.get(row);
                if (singleRow != null) {
                    switch (col) {
                        case iColRecordDetailName:
                            return singleRow.getFieldName();
                        default:
                            return null;
                    }
                }
            }
            return null;
        }

        public FieldGroup.FieldRef getRow(int row) {
            if (fieldRows != null) {
                FieldGroup.FieldRef singleRow = (FieldGroup.FieldRef) fieldRows.get(row);
                return singleRow;
            }
            return null;
        }

        public Class getColumnClass(int c) {
            Object colNameObj = getValueAt(0, c);
            return colNameObj.getClass();
        }

        /*
         * Don't need to implement this method unless your table's
         * editable.
         */
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            return false;
        }

        /*
         * Don't need to implement this method unless your table's
         * data can change.
         */
        
        /**
        public void setValueAt(Object value, int row, int col) {
            switch (col) {
                case iColRecordDetailName:
                    ((FieldGroup.FieldRef) fieldRows.get(row)).getFieldName((String) value);
                    //((RecordDetail) fieldRows.get(row)).setRecordDetailId(Integer.parseInt((String) value));
                    break;

            }

            //fieldRows.set(row, value);
            fireTableCellUpdated(row, col);

        }
         */ 

        public void removeRow(int index) {
            fieldRows.remove(index);
            this.fireTableRowsDeleted(index, index);
        }

        public void addRow(int index, FieldGroup.FieldRef row) {
            //fieldRows.add(row);
            fieldRows.add(index, row);
            this.fireTableRowsInserted(index, index);
        }

        /**
        public MatchRuleRowPerProbType getRow(int index) {
        //MatchRuleRowPerProbType row = (MatchRuleRowPerProbType) matchRuleRows.get(index);
        return row;
        }
         */
        public int findRowByFieldName(String fieldName) {
            for (int i = 0; i < fieldRows.size(); i++) {
                if (getValueAt(i, iColRecordDetailName).equals(fieldName)) {
                    return i;
                }
            }
            return -1;
        }

        public FieldGroup.FieldRef findRelTypeByFieldName(String fieldName) {
            for (int i = 0; i < fieldRows.size(); i++) {
                if (getValueAt(i, iColRecordDetailName).equals(fieldName)) {
                    return (FieldGroup.FieldRef) fieldRows.get(i);
                }
            }
            return null;
        }
    }

    class TableModelRecordDetail extends AbstractTableModel {

        private String columnNames[] = {NbBundle.getMessage(TabDomainView.class, "LBL_DOMAIN_RECORD_DETAIL_FIELD"),};
        ArrayList fieldRows;
        final static int iColRecordDetailName = 0;

        TableModelRecordDetail(ArrayList rows) {
            fieldRows = rows;
        }

        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            if (fieldRows != null) {
                return fieldRows.size();
            }
            return 0;
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            if (fieldRows != null) {
                RecordDetail singleRow = (RecordDetail) fieldRows.get(row);
                if (singleRow != null) {
                    switch (col) {
                        case iColRecordDetailName:
                            return singleRow.getDisplayName();
                        default:
                            return null;
                    }
                }
            }
            return null;
        }

        public RecordDetail getRow(int row) {
            if (fieldRows != null) {
                RecordDetail singleRow = (RecordDetail) fieldRows.get(row);
                return singleRow;
            }
            return null;
        }

        public Class getColumnClass(int c) {
            Object colNameObj = getValueAt(0, c);
            return colNameObj.getClass();
        }

        /*
         * Don't need to implement this method unless your table's
         * editable.
         */
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            return false;
        }

        /*
         * Don't need to implement this method unless your table's
         * data can change.
         */
        public void setValueAt(Object value, int row, int col) {
            switch (col) {
                case iColRecordDetailName:
                    ((RecordDetail) fieldRows.get(row)).setDisplayName((String) value);
                    //((RecordDetail) fieldRows.get(row)).setRecordDetailId(Integer.parseInt((String) value));
                    break;

            }

            //fieldRows.set(row, value);
            fireTableCellUpdated(row, col);

        }

        public void removeRow(int index) {
            fieldRows.remove(index);
            this.fireTableRowsDeleted(index, index);
        }

        public void addRow(int index, RecordDetail row) {
            //fieldRows.add(row);
            fieldRows.add(index, row);
            this.fireTableRowsInserted(index, index);
        }

        /**
        public MatchRuleRowPerProbType getRow(int index) {
        //MatchRuleRowPerProbType row = (MatchRuleRowPerProbType) matchRuleRows.get(index);
        return row;
        }
         */
        public int findRowByFieldName(String fieldName) {
            for (int i = 0; i < fieldRows.size(); i++) {
                if (getValueAt(i, iColRecordDetailName).equals(fieldName)) {
                    return i;
                }
            }
            return -1;
        }

        public RecordDetail findRelTypeByFieldName(String fieldName) {
            for (int i = 0; i < fieldRows.size(); i++) {
                if (getValueAt(i, iColRecordDetailName).equals(fieldName)) {
                    return (RecordDetail) fieldRows.get(i);
                }
            }
            return null;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAddDetail;
    private javax.swing.JButton jBtnAddHighLightField;
    private javax.swing.JButton jBtnAddSummayGroup;
    private javax.swing.JButton jBtnEditDetail;
    private javax.swing.JButton jBtnEditSummaryGroup;
    private javax.swing.JButton jBtnRemoveDetail;
    private javax.swing.JButton jBtnRmvHighLightField;
    private javax.swing.JButton jBtnRmvSummaryGroup;
    private javax.swing.JCheckBox jCBIncludeEUID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanelDomainSummary;
    private javax.swing.JPanel jPanelRecordDetail;
    private javax.swing.JPanel jPanelRecordHighLight;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableRecordDetail;
    private javax.swing.JTable jTableRecordID;
    private javax.swing.JTable jTableRecordSummay;
    private javax.swing.JTextField jTxtDomain;
    // End of variables declaration//GEN-END:variables

}
