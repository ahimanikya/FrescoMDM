/*
 * JNDIPropertiesDialog.java
 *
 * Created on November 19, 2008, 2:10 PM
 */

package com.sun.mdm.multidomain.project.editor;

import com.sun.mdm.multidomain.parser.JNDIResources;
import com.sun.mdm.multidomain.parser.RelationshipJDNIResources;
import com.sun.mdm.multidomain.parser.RelationshipProperty;
import java.util.ArrayList;
import javax.swing.event.TableModelEvent;
import javax.swing.table.AbstractTableModel;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbBundle;

/**
 *
 * @author  wee
 */
public class JNDIPropertiesDialog extends javax.swing.JDialog {

    private JNDIResources mJNDIResources = null;
    
    private boolean bModified = false;
    /** Creates new form JNDIPropertiesDialog */
    public JNDIPropertiesDialog(JNDIResources multiDomainJNDI) {
        super(org.openide.windows.WindowManager.getDefault().getMainWindow(), true);
        mJNDIResources = multiDomainJNDI;
        initComponents();
        loadProperties();
        jTableProperties.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int selectedRow = jTableProperties.getSelectedRow();
                jBtnRemoveProperty.setEnabled(true);
             }
        });
        
        jTableProperties.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                int selectedRow = jTableProperties.getSelectedRow();
                TableModelProperties propertiesModel = (TableModelProperties) jTableProperties.getModel();
                PropertyRow propRow = propertiesModel.getRow(selectedRow);
                Object data = propertiesModel.getValueAt(selectedRow, 1);
                propRow.setValue((String) data);
                //jBtnRemoveProperty.setEnabled(true);
            }
        });
        
        
    }
    
    private void loadProperties() {
        ArrayList<ResourceRow> resRows = new ArrayList<ResourceRow>();
        for (RelationshipJDNIResources res : mJNDIResources.getJDNIResources()) {
            ResourceRow row = new ResourceRow();
            row.setDescrption(res.getDescription());
            row.setId(res.getID());
            row.setJndiName(res.getJNDIName());
            row.setResType(res.getResourceType());
            resRows.add(row);
        }
        
        TableModelResources modelRes = new TableModelResources(resRows);
        jTableResources.setModel(modelRes);
        
        ArrayList<PropertyRow> propertyRows = new ArrayList<PropertyRow>();
        for (RelationshipProperty property : mJNDIResources.getProperties()) {
            PropertyRow row = new PropertyRow();
            row.setName(property.getPropertyName());
            row.setValue(property.getPropertyValue());
            propertyRows.add(row);
        }
        
        TableModelProperties modelProperties = new TableModelProperties(propertyRows);
        jTableProperties.setModel(modelProperties);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableResources = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableProperties = new javax.swing.JTable();
        jBtnAddProperty = new javax.swing.JButton();
        jBtnRemoveProperty = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(JNDIPropertiesDialog.class, "LBL_JNDI_RESOURCES")); // NOI18N
        setResizable(false);

        jTableResources.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Resoruce ID", "Resource Description", "JNDI Name", "Resource Type"
            }
        ));
        jScrollPane1.setViewportView(jTableResources);
        jTableResources.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(JNDIPropertiesDialog.class, "LBL_RESOURCE_ID")); // NOI18N
        jTableResources.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(JNDIPropertiesDialog.class, "LBL_RESOURCE_DESCR")); // NOI18N
        jTableResources.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(JNDIPropertiesDialog.class, "LBL_RESOURCE_JNDI_NAME")); // NOI18N
        jTableResources.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(JNDIPropertiesDialog.class, "LBL_RESOURCE_TYPE")); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(JNDIPropertiesDialog.class, "LBL_RESOURCE_PROPERTIES")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(JNDIPropertiesDialog.class, "LBL_REMOTE_PROPERTIES"))); // NOI18N

        jTableProperties.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Name", "Value"
            }
        ));
        jTableProperties.setCellSelectionEnabled(true);
        jScrollPane2.setViewportView(jTableProperties);
        jTableProperties.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(JNDIPropertiesDialog.class, "LBL_PROPERTY_NAME")); // NOI18N
        jTableProperties.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(JNDIPropertiesDialog.class, "LBL_PROPERTY_VALUE")); // NOI18N

        jBtnAddProperty.setText(org.openide.util.NbBundle.getMessage(JNDIPropertiesDialog.class, "LBL_Add")); // NOI18N
        jBtnAddProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddProperty(evt);
            }
        });

        jBtnRemoveProperty.setText(org.openide.util.NbBundle.getMessage(JNDIPropertiesDialog.class, "LBL_Remove")); // NOI18N
        jBtnRemoveProperty.setEnabled(false);
        jBtnRemoveProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRemoveProperty(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 417, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(235, Short.MAX_VALUE)
                .add(jBtnAddProperty, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jBtnRemoveProperty, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jBtnAddProperty)
                    .add(jBtnRemoveProperty))
                .addContainerGap(4, Short.MAX_VALUE))
        );

        jButton3.setText(org.openide.util.NbBundle.getMessage(JNDIPropertiesDialog.class, "LBL_Cancel")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCancel(evt);
            }
        });

        jButton4.setText(org.openide.util.NbBundle.getMessage(JNDIPropertiesDialog.class, "LBL_OK")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOK(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(271, Short.MAX_VALUE)
                .add(jButton4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 177, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton3)
                    .add(jButton4))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-481)/2, (screenSize.height-377)/2, 481, 377);
    }// </editor-fold>//GEN-END:initComponents

private void onCancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCancel
    bModified = false;
    this.dispose();
}//GEN-LAST:event_onCancel

private void onOK(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onOK
    bModified = true;
    mJNDIResources.getProperties().clear();
    TableModelProperties modelProperties = (TableModelProperties) jTableProperties.getModel();
    for (PropertyRow row : modelProperties.fieldRows) {
        RelationshipProperty property = new RelationshipProperty(row.getName(), row.getValue());
        mJNDIResources.getProperties().add(property);
    }
    this.dispose();
}//GEN-LAST:event_onOK

private void onAddProperty(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddProperty
    TableModelProperties modelProperties = (TableModelProperties) jTableProperties.getModel();
    int iInsertRow = modelProperties.getRowCount();
    PropertyRow newProperty = new PropertyRow();
    newProperty.setName("");
    newProperty.setValue("");
    modelProperties.addRow(iInsertRow, newProperty);
    jTableProperties.setModel(modelProperties);
    jTableProperties.setColumnSelectionInterval(0, 0);
    jTableProperties.setRowSelectionInterval(iInsertRow, iInsertRow);
    
}//GEN-LAST:event_onAddProperty

private void onRemoveProperty(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRemoveProperty
    int rs = jTableProperties.getSelectedRow();
    int length = jTableProperties.getSelectedRowCount();
    String type = (length == 1) ? NbBundle.getMessage(JNDIPropertiesDialog.class, "LBL_FIELD")
                                : NbBundle.getMessage(JNDIPropertiesDialog.class, "LBL_FIELDS");
    String prompt = (length == 1) ? NbBundle.getMessage(JNDIPropertiesDialog.class, "MSG_Confirm_Remove_Prompt", type)
                                  : NbBundle.getMessage(JNDIPropertiesDialog.class, "MSG_Confirm_Remove_Multiple_Prompt", length, type);;
    String title = NbBundle.getMessage(JNDIPropertiesDialog.class, "MSG_Confirm_Remove_Title", type);
    NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                             prompt, 
                             title, 
                             NotifyDescriptor.YES_NO_OPTION);
    if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.YES_OPTION) {
        TableModelProperties modelProperties = (TableModelProperties) jTableProperties.getModel();
        modelProperties.removeRow(rs);          
    }
}//GEN-LAST:event_onRemoveProperty

    public boolean isModified() {
        return bModified;
    }

    class PropertyRow {
        private String name;
        private String value;

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }
        
    }
    
    class ResourceRow {
        
        private String descrption;
        private String id;
        private String jndiName;
        private String resType;

        public String getDescrption() {
            return descrption;
        }

        public void setDescrption(String descrption) {
            this.descrption = descrption;
        }

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public String getJndiName() {
            return jndiName;
        }

        public void setJndiName(String jndiName) {
            this.jndiName = jndiName;
        }

        public String getResType() {
            return resType;
        }

        public void setResType(String resType) {
            this.resType = resType;
        }
        
    }
    
    class TableModelResources extends AbstractTableModel {

        private String columnNames[] = {NbBundle.getMessage(TabDomainSearch.class, "LBL_RESOURCE_ID"),
                                        NbBundle.getMessage(TabDomainSearch.class, "LBL_RESOURCE_DESCR"),
                                        NbBundle.getMessage(TabDomainSearch.class, "LBL_RESOURCE_JNDI_NAME"),
                                        NbBundle.getMessage(TabDomainSearch.class, "LBL_RESOURCE_TYPE"),};
        ArrayList<ResourceRow> fieldRows;
        final static int iResourceID = 0;
        final static int iResourceName = 1;
        final static int iResourceDescr = 2;
        final static int iResourceType = 3;
        
        TableModelResources(ArrayList rows) {
            fieldRows = rows;
        }

        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            if (fieldRows != null) {
                return fieldRows.size();
            }
            return 0;
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            if (fieldRows != null) {
                ResourceRow singleRow = (ResourceRow) fieldRows.get(row);
                if (singleRow != null) {
                    switch (col) {
                        case iResourceID:
                            return singleRow.getId();
                        case iResourceDescr:
                            return singleRow.getDescrption();
                        case iResourceName:
                            return singleRow.getJndiName();
                        case iResourceType:
                            return singleRow.getResType();
                        default:
                            return null;
                    }
                }
            }
            return null;
        }

        public ResourceRow getRow(int row) {
            if (fieldRows != null) {
                ResourceRow singleRow = (ResourceRow) fieldRows.get(row);
                return singleRow;
            }
            return null;
        }

        public Class getColumnClass(int c) {
            Object colNameObj = getValueAt(0, c);
            return colNameObj.getClass();
        }

        /*
         * Don't need to implement this method unless your table's
         * editable.
         */
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            return false;
        }

        /*
         * Don't need to implement this method unless your table's
         * data can change.
         */
        public void setValueAt(Object value, int row, int col) {
            switch (col) {
                case iResourceID:
                    ((ResourceRow) fieldRows.get(row)).setId((String) value);
                    break;
                case iResourceName:
                    ((ResourceRow) fieldRows.get(row)).setJndiName((String) value);
                    break;
                case iResourceType:
                    ((ResourceRow) fieldRows.get(row)).setResType((String) value);
                    break;
                case iResourceDescr:
                    ((ResourceRow) fieldRows.get(row)).setDescrption((String) value);
                    break;

            }

            //fieldRows.set(row, value);
            fireTableCellUpdated(row, col);

        }

        public void removeRow(int index) {
            fieldRows.remove(index);
            this.fireTableRowsDeleted(index, index);
        }

        public void addRow(int index, ResourceRow row) {
            //fieldRows.add(row);
            fieldRows.add(index, row);
            this.fireTableRowsInserted(index, index);
        }


    }

    class TableModelProperties extends AbstractTableModel {

        private String columnNames[] = {NbBundle.getMessage(TabDomainSearch.class, "LBL_PROPERTY_NAME"),
                                        NbBundle.getMessage(TabDomainSearch.class, "LBL_PROPERTY_VALUE"),};
        ArrayList<PropertyRow> fieldRows;
        final static int iName = 0;
        final static int iValue = 1;
        
        TableModelProperties(ArrayList rows) {
            fieldRows = rows;
        }

        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            if (fieldRows != null) {
                return fieldRows.size();
            }
            return 0;
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            if (fieldRows != null) {
                PropertyRow singleRow = (PropertyRow) fieldRows.get(row);
                if (singleRow != null) {
                    switch (col) {
                        case iName:
                            return singleRow.getName();
                        case iValue:
                            return singleRow.getValue();
                        default:
                            return null;
                    }
                }
            }
            return null;
        }

        public PropertyRow getRow(int row) {
            if (fieldRows != null) {
                PropertyRow singleRow = (PropertyRow) fieldRows.get(row);
                return singleRow;
            }
            return null;
        }

        public Class getColumnClass(int c) {
            Object colNameObj = getValueAt(0, c);
            return colNameObj.getClass();
        }

        /*
         * Don't need to implement this method unless your table's
         * editable.
         */
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            return true;
        }

        /*
         * Don't need to implement this method unless your table's
         * data can change.
         */
        public void setValueAt(Object value, int row, int col) {
            switch (col) {
                case iName:
                    ((PropertyRow) fieldRows.get(row)).setName((String) value);
                    break;
                case iValue:
                    ((PropertyRow) fieldRows.get(row)).setValue((String) value);
                    break;
            }

            fireTableCellUpdated(row, col);

        }

        public void removeRow(int index) {
            fieldRows.remove(index);
            this.fireTableRowsDeleted(index, index);
        }

        public void addRow(int index, PropertyRow row) {
            //fieldRows.add(row);
            fieldRows.add(index, row);
            this.fireTableRowsInserted(index, index);
        }
    }    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAddProperty;
    private javax.swing.JButton jBtnRemoveProperty;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableProperties;
    private javax.swing.JTable jTableResources;
    // End of variables declaration//GEN-END:variables

}
