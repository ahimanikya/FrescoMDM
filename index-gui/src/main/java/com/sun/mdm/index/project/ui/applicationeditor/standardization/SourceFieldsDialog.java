/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */
package com.sun.mdm.index.project.ui.applicationeditor.standardization;

import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;

import java.util.ArrayList;
import com.sun.mdm.index.project.ui.applicationeditor.EntityTree;
import com.sun.mdm.index.project.ui.applicationeditor.EntityNode;

public class SourceFieldsDialog extends javax.swing.JDialog implements TreeSelectionListener {
    private boolean mModified = false;
    private boolean isGeneratedFieldAllowed = false;
    private EntityTree mEntityTree;
    private ArrayList mAlSourceFieldsSelected;
    private javax.swing.JList mLstSourceFieldsSelected;
    
    /** Creates new form SourceFieldsDialog */
    public SourceFieldsDialog(EntityTree entityTree, ArrayList alSourceFieldNames, boolean isGeneratedFieldAllowed) {
        super(org.openide.windows.WindowManager.getDefault().getMainWindow(), true);
        mEntityTree = entityTree;
        mEntityTree.setEditable(false);        
        mEntityTree.addTreeSelectionListener(this);
        mEntityTree.clearSelection();
        mEntityTree.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    TreePath hitPath = mEntityTree.getPathForLocation(
                            evt.getX(),
                            evt.getY());
                    if (hitPath != null) {
                        EntityNode selectedNode = (EntityNode) hitPath.getLastPathComponent();
                        if (selectedNode != null) {
                            mEntityTree.setSelectionPath(hitPath);
                            onAddSourceField(null);
                        }
                    }
                }
            }
        });

        this.isGeneratedFieldAllowed = isGeneratedFieldAllowed;
        initComponents();
        mLstSourceFieldsSelected = new javax.swing.JList();
        mLstSourceFieldsSelected.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onClickSelectedSourceField(evt);
            }
        });
        mAlSourceFieldsSelected = alSourceFieldNames;
        if (mAlSourceFieldsSelected == null) {
            mAlSourceFieldsSelected = new ArrayList();
        } else if (mAlSourceFieldsSelected.size() > 0) {
            //String sourceField = (String) mAlSourceFieldsSelected.get(0);
            //mEntityTree.setSelectedNode(sourceField);
            // Need to reset it after the node is selected
            btnAddFieldID.setEnabled(false);
        }
        mLstSourceFieldsSelected.setListData(mAlSourceFieldsSelected.toArray());
        scrollPaneSourceFieldsSelected.setViewportView(mLstSourceFieldsSelected);
        //btnOK.setEnabled(mAlSourceFieldsSelected.size() > 0);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDesc = new javax.swing.JLabel();
        lblSelectedSourceFields = new javax.swing.JLabel();
        jScrollPaneEntityTree = new javax.swing.JScrollPane();
        jScrollPaneEntityTree.setViewportView(mEntityTree);
        btnAddFieldID = new javax.swing.JButton();
        btnAddFieldID.setEnabled(false);
        btnRemoveFieldID = new javax.swing.JButton();
        btnRemoveFieldID.setEnabled(false);
        btnOK = new javax.swing.JButton();
        btnOK.setEnabled(false);
        btnCancel = new javax.swing.JButton();
        scrollPaneSourceFieldsSelected = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/standardization/Bundle"); // NOI18N
        setTitle(bundle.getString("TITLE_Select_Source_Fields")); // NOI18N

        lblDesc.setText(bundle.getString("LBL_Select_the_Source_Fields")); // NOI18N

        lblSelectedSourceFields.setText(bundle.getString("LBL_Selected_Source_Fields")); // NOI18N

        btnAddFieldID.setLabel(">");
        btnAddFieldID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddSourceField(evt);
            }
        });

        btnRemoveFieldID.setLabel("<");
        btnRemoveFieldID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRemoveSourceField(evt);
            }
        });

        btnOK.setText(bundle.getString("LBL_OK")); // NOI18N
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOK(evt);
            }
        });

        btnCancel.setText(bundle.getString("LBL_Cancel")); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCancel(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(lblDesc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 250, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(20, 20, 20)
                .add(lblSelectedSourceFields, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 180, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jScrollPaneEntityTree, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnAddFieldID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnRemoveFieldID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(scrollPaneSourceFieldsSelected, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(332, 332, 332)
                .add(btnOK, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(btnCancel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblDesc)
                    .add(lblSelectedSourceFields))
                .add(16, 16, 16)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPaneEntityTree, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 340, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(160, 160, 160)
                        .add(btnAddFieldID)
                        .add(2, 2, 2)
                        .add(btnRemoveFieldID))
                    .add(scrollPaneSourceFieldsSelected, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 340, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnOK)
                    .add(btnCancel)))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-514)/2, (screenSize.height-449)/2, 514, 449);
    }// </editor-fold>//GEN-END:initComponents

    private void onCancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCancel
        mModified = false;
        this.dispose();
    }//GEN-LAST:event_onCancel

    private void onOK(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onOK
        mModified = true;
        this.dispose();
    }//GEN-LAST:event_onOK
    private void onClickSelectedSourceField(java.awt.event.MouseEvent evt) {
        btnRemoveFieldID.setEnabled(true);
    }

    private void onRemoveSourceField(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRemoveSourceField
        int[] rs = mLstSourceFieldsSelected.getSelectedIndices();
        for (int i=rs.length - 1; i>=0 && i < rs.length; i--) {
            mAlSourceFieldsSelected.remove(rs[i]);
        }
        mLstSourceFieldsSelected.setListData(mAlSourceFieldsSelected.toArray());
        scrollPaneSourceFieldsSelected.setViewportView(mLstSourceFieldsSelected);
        btnRemoveFieldID.setEnabled(false);
        btnOK.setEnabled(mAlSourceFieldsSelected.size() > 0);
    }//GEN-LAST:event_onRemoveSourceField

    private void onAddSourceField(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddSourceField
        TreePath[] paths = mEntityTree.getSelectionPaths();
        int[] indices = new int[paths.length];
        int j = -1;
        boolean bAdded = false;
        for (int i=0; i < paths.length; i++) {
            TreePath path = paths[i];
            EntityNode selectedNode = (EntityNode) path.getLastPathComponent();
            // addSourceField(selectedNode);
            if (selectedNode.isField() && (isGeneratedFieldAllowed || !selectedNode.isGeneratedField())) {
                String sourceField = null;
    	        EntityNode parentNode = (EntityNode) selectedNode.getParent();
        	if (parentNode.isSub()) {
            	    EntityNode grandParentNode = (EntityNode) parentNode.getParent();
                    sourceField = grandParentNode.getName() + "." + parentNode.getName() + "[*]." + selectedNode.getName();
	        } else {
    	            sourceField = parentNode.getName() + "." + selectedNode.getName();
        	}
            	if (!mAlSourceFieldsSelected.contains(sourceField)) {
                    mAlSourceFieldsSelected.add(sourceField);
                    bAdded = true;
	        }
                int index = mAlSourceFieldsSelected.indexOf(sourceField);
                indices[++j] = index;
            }
        }
        mLstSourceFieldsSelected.setListData(mAlSourceFieldsSelected.toArray());
        scrollPaneSourceFieldsSelected.setViewportView(mLstSourceFieldsSelected);
        if (j >= 0) {
            mLstSourceFieldsSelected.setSelectedIndices(indices);
            btnRemoveFieldID.setEnabled(true);
        }
        mEntityTree.clearSelection();
        btnAddFieldID.setEnabled(false);
        btnOK.setEnabled(mAlSourceFieldsSelected.size() > 0 && bAdded);
    }//GEN-LAST:event_onAddSourceField
    
    public boolean isModified() {
        return mModified;
    }
    
    public ArrayList getSelectedSourceFields() {
        return this.mAlSourceFieldsSelected;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    }
    
    public void valueChanged(TreeSelectionEvent e) {
        EntityNode selectedNode = (EntityNode) e.getPath().getLastPathComponent();

        if (selectedNode != null && selectedNode.isField() && (isGeneratedFieldAllowed || !selectedNode.isGeneratedField())) {
            if (this.btnAddFieldID != null) {
                this.btnAddFieldID.setEnabled(true);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFieldID;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnRemoveFieldID;
    private javax.swing.JScrollPane jScrollPaneEntityTree;
    private javax.swing.JLabel lblDesc;
    private javax.swing.JLabel lblSelectedSourceFields;
    private javax.swing.JScrollPane scrollPaneSourceFieldsSelected;
    // End of variables declaration//GEN-END:variables
    
}
