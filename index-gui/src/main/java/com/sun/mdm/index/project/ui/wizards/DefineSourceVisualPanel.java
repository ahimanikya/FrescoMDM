/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */
package com.sun.mdm.index.project.ui.wizards;

import org.openide.NotifyDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.NbBundle;

import java.awt.Toolkit;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;
import java.util.Iterator;


/** A single panel for a wizard - the GUI portion.
 *
 */
public class DefineSourceVisualPanel extends javax.swing.JPanel {
    /**
     * focus listener
     */
    private TextFocusListener textFocusListener = new TextFocusListener();

    /** The wizard panel descriptor associated with this GUI panel.
     * If you need to fire state changes or something similar, you can
     * use this handle to do so.
     */
    private final DefineSourcePanel panel;

    // Variables declaration - do not modify
    private javax.swing.JTextField jTextFieldSourceName;
    private javax.swing.JLabel jLabelStepDescription;
    private javax.swing.JLabel jLabelListSourceSystems;
    private java.awt.List listSource;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JButton jButtonRemoveAll;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JLabel jLabelSourceName;

    /**
     * Create the wizard panel and set up some basic properties.
     *
     *@param panel DefineSourcePanel
     */
    public DefineSourceVisualPanel(DefineSourcePanel panel) {
        this.panel = panel;
        this.getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(DefineSourceVisualPanel.class, 
                "TITLE_DefineSourcePanel")); // NOI18N

        initComponents();

        // Provide a name in the title bar.
        //setName(NbBundle.getMessage(DefineSourceVisualPanel.class, "TITLE_DefineSourcePanel"));

        /*
        // Optional: provide a special description for this pane.
        // You must have turned on WizardDescriptor.WizardPanel_helpDisplayed
        // (see descriptor in standard iterator template for an example of this).
        try {
            putClientProperty("WizardPanel_helpURL", // NOI18N
                new URL("nbresloc:/eview/wizard/src/java/com/sun/mdm/index/project/ui/wizards/DefineSourceVisualHelp.html")); // NOI18N
        } catch (MalformedURLException mfue) {
            throw new IllegalStateException(mfue.toString());
        }
         */
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        jLabelStepDescription = new javax.swing.JLabel();
        jLabelSourceName = new javax.swing.JLabel();
        jLabelListSourceSystems = new javax.swing.JLabel();
        jTextFieldSourceName = new javax.swing.JTextField();
        listSource = new java.awt.List();
        jButtonAdd = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();
        jButtonRemoveAll = new javax.swing.JButton();

        setLayout(null);

        //setBackground(new java.awt.Color(255, 255, 255));
        jLabelStepDescription.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelStepDescription.setText(NbBundle.getMessage(DefineSourceVisualPanel.class,
                "MSG_source_systems"));

        jLabelSourceName.setText(NbBundle.getMessage(
                DefineSourceVisualPanel.class, "MSG_static_Name"));
        jTextFieldSourceName.getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(DefineSourceVisualPanel.class, 
                "ACS_MSG_Source_System_Name")); // NOI18N

        jLabelListSourceSystems.setText(NbBundle.getMessage(
                DefineSourceVisualPanel.class, "MSG_static_Systems"));

        jTextFieldSourceName.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    onTextSourceNameKeyReleased(evt);
                }
                public void keyTyped(java.awt.event.KeyEvent evt) {
                    onTextSourceNameKeyTyped(evt);}
        });
        //jTextFieldSourceName.addFocusListener(textFocusListener);


        jButtonAdd.setText(NbBundle.getMessage(
                DefineSourceVisualPanel.class, "MSG_button_Add"));
        jButtonAdd.setBorder(new javax.swing.border.BevelBorder(
                javax.swing.border.BevelBorder.RAISED));
        jButtonAdd.setEnabled(false);
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonAddActionPerformed(evt);
                }
            });
        jButtonAdd.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    onTextSourceNameChanged(evt);
                }
            });
        jButtonAdd.getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(DefineSourceVisualPanel.class, 
                "ACS_MSG_button_Add_Source_System")); // NOI18N

        jButtonRemove.setText(NbBundle.getMessage(
                DefineSourceVisualPanel.class, "MSG_button_Remove"));
        jButtonRemove.setBorder(new javax.swing.border.BevelBorder(
                javax.swing.border.BevelBorder.RAISED));
        jButtonRemove.setEnabled(false);
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonRemoveActionPerformed(evt);
                }
            });
        jButtonRemove.getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(DefineSourceVisualPanel.class, 
                "ACS_MSG_button_Remove_Source_System")); // NOI18N

        listSource.setMultipleMode(true);
        listSource.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    listSourceActionPerformed(evt);
                }
            });
        listSource.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    onListSourceClicked(evt);
                }
            });
        listSource.getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(DefineSourceVisualPanel.class, 
                "ACS_MSG_List_Of_Source_Systems")); // NOI18N


        jButtonRemoveAll.setText(NbBundle.getMessage(
                DefineSourceVisualPanel.class, "MSG_button_RemoveAll"));
        jButtonRemoveAll.setBorder(new javax.swing.border.BevelBorder(
                javax.swing.border.BevelBorder.RAISED));
        jButtonRemoveAll.setEnabled(false);
        jButtonRemoveAll.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButtonRemoveAllActionPerformed(evt);
                }
            });
        jButtonRemoveAll.getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(DefineSourceVisualPanel.class, 
                "ACS_MSG_button_Remove_ALL_Source_Systems")); // NOI18N

        jButtonAdd.setMnemonic('A');
        jButtonRemove.setMnemonic('R');
        jButtonRemoveAll.setMnemonic('L');
        
        add(jLabelStepDescription);
        add(jLabelSourceName);
        add(jTextFieldSourceName);
        add(jLabelListSourceSystems);
        add(listSource);
        add(jButtonAdd);
        add(jButtonRemove);
        add(jButtonRemoveAll);
        jLabelStepDescription.setBounds(0, 10, 480, 28);
        jLabelSourceName.setBounds(0, 65, 60, 28);
        jTextFieldSourceName.setBounds(65, 65, 230, 28);
        jLabelListSourceSystems.setBounds(0, 100, 60, 28);
        listSource.setBounds(65, 100, 230, 180);
        jButtonAdd.setBounds(300, 65, 70, 28);
        jButtonRemove.setBounds(300, 100, 70, 28);
        jButtonRemoveAll.setBounds(300, 133, 70, 28);
    }

    private void onTextSourceNameKeyTyped(java.awt.event.KeyEvent evt) {
        if (evt.getKeyChar() == ' ') {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }
    }
    
    private void onTextSourceNameKeyReleased(java.awt.event.KeyEvent evt) {
        String newSource = jTextFieldSourceName.getText();
        jButtonAdd.setEnabled(newSource.length() > 0);
    }

    private void onTextSourceNameChanged(java.beans.PropertyChangeEvent evt) {
        //jButtonAdd.setEnabled(true);
    }

    private void onListSourceClicked(java.awt.event.MouseEvent evt) {
        jButtonRemove.setEnabled(true);
    }

    private void listSourceActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void jButtonRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {
        listSource.removeAll();
        jButtonRemoveAll.setEnabled(false);
        panel.fireChangeEvent();
    }

    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {
        int[] itemsBeingRemoved = listSource.getSelectedIndexes();
        int length = itemsBeingRemoved.length;

        for (int index = length - 1; (index >= 0) && (index < length);
                index--) {
            listSource.remove(itemsBeingRemoved[index]);
        }

        jButtonRemove.setEnabled(false);

        if (listSource.getItemCount() == 0) {
            jButtonRemoveAll.setEnabled(false);
        }

        panel.fireChangeEvent();
    }

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {
        // Add your handling code here:
        String newSource = jTextFieldSourceName.getText();
        String[] s = listSource.getItems();

        for (int i = 0; i < s.length; i++) {
            if (s[i].equals(newSource)) {
                Toolkit.getDefaultToolkit().beep();

                String msg = "Source \"" + newSource + " \" already exists!";
                NotifyDescriptor desc = new NotifyDescriptor.Message(msg);
                DialogDisplayer.getDefault().notify(desc);

                return;
            }
        }

        listSource.add(newSource);

        jTextFieldSourceName.setText("");
        //jTextFieldSourceName.requestFocus();
        jButtonAdd.setEnabled(false);
        jButtonRemoveAll.setEnabled(true);
        panel.fireChangeEvent();
    }

    // End of variables declaration

    /**
     *@return count of Source Systems
     */
    public int getSoureSystemsCount() {
        return listSource.getItemCount();
    }

    /** for eIndex50.xml
     *@return xml string for Source Systems
     */
    public String getSoureSystemsList() {
        String sourceSystems = "";
        int cnt = listSource.getItemCount();

        for (int i = 0; i < cnt; i++) {
            //sourceSystems += "    <systems>" + listSource.getItem(i) + "</systems>";
            if (i != 0) {
                sourceSystems += "\t";
            }

            sourceSystems += listSource.getItem(i);
        }

        return sourceSystems;
    }

    /** set Source Systems
     *@param  alSourceSystems Source Systems
     */
    public void setSourceSystems(ArrayList alSourceSystems) {
        if ((alSourceSystems != null) && (alSourceSystems.size() > 0)) {
            listSource.removeAll();

            int i = 0;
            Iterator it = alSourceSystems.iterator();

            while (it.hasNext()) {
                String s = (String) it.next();
                listSource.add(s);
            }

            jButtonRemoveAll.setEnabled(true);
        }
    }

    /** set view name for panel title
     *@param  newViewName new view name
     */
    public void setViewName(String newViewName) {
        setName(NbBundle.getMessage(DefineSourceVisualPanel.class,
                "TITLE_DefineSourcePanel"));
    }

    /**
     * This class is text field focuslistener
     */
    class TextFocusListener implements FocusListener {
        /**
         * Invoked when a component gains the keyboard focus.
         *
         * @param e
         */
        public void focusGained(FocusEvent e) {
            jTextFieldSourceName.selectAll();
        }

        /** Invoked when a component loses the keyboard focus.
         *
         */
        public void focusLost(FocusEvent e) {
        }
    }
}
