/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */
package com.sun.mdm.index.project.ui.applicationeditor.standardization;

import java.util.ArrayList;
import javax.swing.JTable;
import javax.swing.table.TableColumn;
import javax.swing.table.AbstractTableModel;
import javax.swing.tree.TreeNode;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;

import org.openide.util.NbBundle;
import org.openide.NotifyDescriptor;
import org.openide.DialogDisplayer;

import com.sun.mdm.index.project.ui.applicationeditor.EntityNode;
import com.sun.mdm.index.project.ui.applicationeditor.EntityTree;
import com.sun.mdm.index.project.ui.applicationeditor.EntityTreeSelectionDialog;

public class TargetMappingDialog extends javax.swing.JDialog implements TreeSelectionListener {
    private EntityTree mEntityTree;
    //private JList mLstStandComponents;
    private String mStandardizationType;
    private JTable mTblTargetMappings;
    private boolean mModified = false;
    private ArrayList mAlStandComponentsAvailable;
    private ArrayList mAlStandComponentsSelected = new ArrayList();
    private javax.swing.JList mLstStandComponentsAvailable;
    
    /** Creates new form TargetMappingDialog */
    public TargetMappingDialog(EntityTree entityTree, String standardizationType, String targetFieldName, String standComponentsSelected, boolean editMode) {
        super(org.openide.windows.WindowManager.getDefault().getMainWindow(), true);
        mEntityTree = entityTree;
        mEntityTree.setEditable(false);        
        mStandardizationType = standardizationType;

        // populate data
        if (editMode) {
            mEntityTree.setSelectedNode(targetFieldName);
        } else {
            mEntityTree.expandPath(new TreePath(mEntityTree.getRootNode()));
            mEntityTree.clearSelection();            
        }
        mEntityTree.addTreeSelectionListener(this);

        
        if (standComponentsSelected != null && standComponentsSelected.length() > 0) {
            String[] iDs = standComponentsSelected.split(";");
            for (int i=0; iDs != null && i < iDs.length; i++) {
                mAlStandComponentsSelected.add(iDs[i]);
            }
        }
        
        initComponents();        
        if (editMode) {
            txtTargetFieldName.setText(targetFieldName);
        }        
        loadTargetMappingsTable();
        
        mLstStandComponentsAvailable = new javax.swing.JList();
        mLstStandComponentsAvailable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    btnAddFieldIDActionPerformed(null);
                } else {
                    onClickAvailableTargetIDs(evt);
                }
            }
        });
        
        loadStandComponentsAvailable(entityTree.getEviewApplication().getStandardizationComponentsByType(standardizationType));
        scrollPaneFieldIDsAvailable.setViewportView(mLstStandComponentsAvailable);        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnOK = new javax.swing.JButton();
        btnOK.setEnabled(false);
        btnCancel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        txtTargetFieldName = new javax.swing.JTextField();
        lblSetPriority = new javax.swing.JLabel();
        jScrollPaneTargetMappings = new javax.swing.JScrollPane();
        btnAddFieldID = new javax.swing.JButton();
        btnUp = new javax.swing.JButton();
        btnUp.setEnabled(false);
        btnDown = new javax.swing.JButton();
        btnRemoveFieldID = new javax.swing.JButton();
        btnRemoveFieldID.setEnabled(false);
        lblSelectFromTree = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        scrollPaneFieldIDsAvailable = new javax.swing.JScrollPane();
        lblFieldIDsAvailable = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Target Mapping");
        setModal(true);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/standardization/Bundle"); // NOI18N
        btnOK.setText(bundle.getString("LBL_OK")); // NOI18N
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOK(evt);
            }
        });

        btnCancel.setText(bundle.getString("LBL_Cancel")); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCancel(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtTargetFieldName.setBackground(new java.awt.Color(204, 204, 204));
        txtTargetFieldName.setEditable(false);
        txtTargetFieldName.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                onTargetFieldPropertyChange(evt);
            }
        });

        lblSetPriority.setText(bundle.getString("LBL_Mapping_Priorities")); // NOI18N

        btnAddFieldID.setText(bundle.getString("LBL_Add")); // NOI18N
        btnAddFieldID.setActionCommand("Add/Remove...");
        btnAddFieldID.setEnabled(false);
        btnAddFieldID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFieldIDActionPerformed(evt);
            }
        });

        btnUp.setText(bundle.getString("LBL_Move_Up")); // NOI18N
        btnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpActionPerformed(evt);
            }
        });

        btnDown.setText(bundle.getString("LBL_Move_Down")); // NOI18N
        btnDown.setEnabled(false);
        btnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownActionPerformed(evt);
            }
        });

        btnRemoveFieldID.setText(bundle.getString("LBL_Remove")); // NOI18N
        btnRemoveFieldID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveFieldIDActionPerformed(evt);
            }
        });

        lblSelectFromTree.setText(bundle.getString("LBL_Selected_Target_Field")); // NOI18N

        jButton1.setText(bundle.getString("LBL_Browse")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFieldActionPerformed(evt);
            }
        });

        lblFieldIDsAvailable.setText(bundle.getString("LBL_Available_Standardization_Components")); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(8, 8, 8)
                .add(lblSelectFromTree, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(txtTargetFieldName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 350, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jPanel1Layout.createSequentialGroup()
                .add(8, 8, 8)
                .add(lblFieldIDsAvailable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 240, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(80, 80, 80)
                .add(lblSetPriority, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jPanel1Layout.createSequentialGroup()
                .add(8, 8, 8)
                .add(scrollPaneFieldIDsAvailable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnAddFieldID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnRemoveFieldID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnUp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnDown, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jScrollPaneTargetMappings, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(8, 8, 8)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblSelectFromTree, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtTargetFieldName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(10, 10, 10)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblFieldIDsAvailable)
                    .add(lblSetPriority))
                .add(6, 6, 6)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(scrollPaneFieldIDsAvailable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 290, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(100, 100, 100)
                        .add(btnAddFieldID)
                        .add(7, 7, 7)
                        .add(btnRemoveFieldID)
                        .add(7, 7, 7)
                        .add(btnUp)
                        .add(7, 7, 7)
                        .add(btnDown))
                    .add(jScrollPaneTargetMappings, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 290, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 560, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(430, 430, 430)
                .add(btnOK, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(btnCancel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(5, 5, 5)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 360, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(5, 5, 5)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnOK)
                    .add(btnCancel)))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-589)/2, (screenSize.height-430)/2, 589, 430);
    }// </editor-fold>//GEN-END:initComponents

    private void selectFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFieldActionPerformed

        String field = this.txtTargetFieldName.getText();
        mEntityTree.clearSelection();
        EntityTreeSelectionDialog entityTreeSelectionDialog = new EntityTreeSelectionDialog(mEntityTree, field, true);                                        
        entityTreeSelectionDialog.setVisible(true);
        if (entityTreeSelectionDialog.isSelected()) {
            this.txtTargetFieldName.setText(entityTreeSelectionDialog.getTargetFieldName());        
        }
        btnOK.setEnabled(txtTargetFieldName.getText() != null && !txtTargetFieldName.getText().equals("") && mTblTargetMappings.getRowCount() > 0);
    }//GEN-LAST:event_selectFieldActionPerformed

    private void btnRemoveFieldIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveFieldIDActionPerformed
        int rs[] = mTblTargetMappings.getSelectedRows();
        int length = rs.length;
        String prompt = (length == 1) ? NbBundle.getMessage(TargetMappingDialog.class, "MSG_Confirm_Remove_Row_Prompt")
                                        : NbBundle.getMessage(TargetMappingDialog.class, "MSG_Confirm_Remove_Rows_Prompt");

        NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                                 prompt, 
                                 NbBundle.getMessage(TargetMappingDialog.class, "MSG_Confirm_Remove_Row_Title"), 
                                 NotifyDescriptor.YES_NO_OPTION);
        if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.YES_OPTION) {
            TargetMappingsTableModel model = (TargetMappingsTableModel) mTblTargetMappings.getModel();
            for (int i=length - 1; i>=0 && i < length; i--) {
                int j = rs[i];
                String fieldID = (String) model.getValueAt(j,  1);
                mAlStandComponentsSelected.remove(fieldID);
                mAlStandComponentsAvailable.add(fieldID);
                model.removeRow(j);
            }
            //  mMapTargetFields.put(mStandardizationType, mAlStandComponentsSelected);
            mLstStandComponentsAvailable.setListData(mAlStandComponentsAvailable.toArray());            
            btnRemoveFieldID.setEnabled(false);
        }
        btnUp.setEnabled(false);
        btnDown.setEnabled(false);
        btnOK.setEnabled(txtTargetFieldName.getText() != null && !txtTargetFieldName.getText().equals("") && mTblTargetMappings.getRowCount() > 0);
    }//GEN-LAST:event_btnRemoveFieldIDActionPerformed

    private void btnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownActionPerformed
        moveSelectedTargetMappingRow(false);
    }//GEN-LAST:event_btnDownActionPerformed

    private void onTargetFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_onTargetFieldPropertyChange
        btnOK.setEnabled(txtTargetFieldName.getText().length() > 0 && mAlStandComponentsSelected.size() > 0);
    }//GEN-LAST:event_onTargetFieldPropertyChange

    private void btnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpActionPerformed
        moveSelectedTargetMappingRow(true);
    }//GEN-LAST:event_btnUpActionPerformed

    private void moveSelectedTargetMappingRow(boolean moveUp) {
        int iSelectedRow = this.mTblTargetMappings.getSelectedRow();
        int iInsertTo = iSelectedRow + (moveUp ? -1 : 1);
        TargetMappingsTableModel model = (TargetMappingsTableModel) mTblTargetMappings.getModel();
        TargetMappingsRow row = model.removeRow(iSelectedRow);
        mAlStandComponentsSelected.remove(iSelectedRow);
        model.insertRow(row, iInsertTo);
        mAlStandComponentsSelected.add(iInsertTo, row.getFieldID());
        mTblTargetMappings.addRowSelectionInterval(iInsertTo, iInsertTo);
        boolean bEnabled = iInsertTo > 0;
        btnUp.setEnabled(iInsertTo > 0);
        btnDown.setEnabled(iInsertTo != mTblTargetMappings.getRowCount() - 1);
        btnRemoveFieldID.setEnabled(true);
    }
    
    private void onCancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCancel
        mModified = false;
        this.dispose();
    }//GEN-LAST:event_onCancel

    private void onOK(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onOK
        mModified = true;
        this.dispose();
    }//GEN-LAST:event_onOK

    private void btnAddFieldIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFieldIDActionPerformed
        if (mLstStandComponentsAvailable != null && mLstStandComponentsAvailable.getModel().getSize() > 0) {
            Object[] fieldNames = mLstStandComponentsAvailable.getSelectedValues();
            int[] indices = new int[fieldNames.length];
            int j = -1;
            for (int i=fieldNames.length - 1; i>=0 && i < fieldNames.length; i--) {
                if (mAlStandComponentsSelected != null && !mAlStandComponentsSelected.contains(fieldNames[i])) {
                    mAlStandComponentsSelected.add(fieldNames[i]);
                    int index = mAlStandComponentsSelected.indexOf(fieldNames[i]);
                    indices[++j] = index;
                    mAlStandComponentsAvailable.remove(fieldNames[i]);
                }
            }
            mLstStandComponentsAvailable.setListData(mAlStandComponentsAvailable.toArray());
        }
        
        loadTargetMappingsTable();
        btnUp.setEnabled(false);
        btnDown.setEnabled(false);
        btnRemoveFieldID.setEnabled(false);
        btnAddFieldID.setEnabled(false);            
        mModified = true;
    }//GEN-LAST:event_btnAddFieldIDActionPerformed
    
    private void onClickAvailableTargetIDs(java.awt.event.MouseEvent evt) {
        btnAddFieldID.setEnabled(true);
    }
    
    public String getTargetField() {
        return this.txtTargetFieldName.getText();
    }
    
    public ArrayList getFieldIDs() {
        ArrayList alStandComponents = new ArrayList();
        TargetMappingsTableModel targetMappingsTableModel = (TargetMappingsTableModel) mTblTargetMappings.getModel();
        for (int i=0; i < targetMappingsTableModel.getRowCount(); i++) {
            String fieldID = (String) targetMappingsTableModel.getValueAt(i,  1);
            alStandComponents.add(fieldID);
        }
        return alStandComponents;
    }
    
    public boolean isModified() {
        return mModified;
    }
    
    
    private void loadTargetMappingsTable() {
        ArrayList rows = new ArrayList();
        for (int i=0; i < mAlStandComponentsSelected.size(); i++) {
            TargetMappingsRow r = new TargetMappingsRow(i+1, (String) mAlStandComponentsSelected.get(i)); //, this.txtTargetFieldName.getText());
            rows.add(r);
        }
        TargetMappingsTableModel targetMappingsTableModel = new TargetMappingsTableModel(rows);
        mTblTargetMappings = new JTable(targetMappingsTableModel);
        mTblTargetMappings.getTableHeader().setReorderingAllowed(false);
        jScrollPaneTargetMappings.setViewportView(mTblTargetMappings);
        // Disable auto resizing
        mTblTargetMappings.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        // Set width for the "Priority" column
        TableColumn col = mTblTargetMappings.getColumnModel().getColumn(0);
        col.setPreferredWidth(58);
        // Set width for the "Priority" column
        col = mTblTargetMappings.getColumnModel().getColumn(1);
        col.setPreferredWidth(148);
        
        mTblTargetMappings.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    if (evt.getClickCount() == 2) {
                        btnRemoveFieldIDActionPerformed(null);
                        return;
                    }
                    int[] rows = mTblTargetMappings.getSelectedRows();
                    boolean bEnabled = mTblTargetMappings.getRowCount() > 1 && 
                                       rows.length == 1 &&
                                       mTblTargetMappings.getSelectedRow() > 0;
                    btnUp.setEnabled(bEnabled);
                    bEnabled = mTblTargetMappings.getRowCount() > 1 && 
                                       rows.length == 1 &&
                                       mTblTargetMappings.getSelectedRow() != mTblTargetMappings.getRowCount() - 1;
                    btnDown.setEnabled(bEnabled);
                    btnRemoveFieldID.setEnabled(true);
                }
            });
            
        btnOK.setEnabled(txtTargetFieldName.getText().length() > 0 && mAlStandComponentsSelected.size() > 0);
    }
    
    private void loadStandComponentsAvailable(ArrayList alStandComponentsAvailable) {
        mAlStandComponentsAvailable = alStandComponentsAvailable;
        if (mAlStandComponentsAvailable != null && mAlStandComponentsSelected != null) {
            for (int i=0; i < mAlStandComponentsSelected.size(); i++) {
                String fieldIdSelected = (String) mAlStandComponentsSelected.get(i);
                if (mAlStandComponentsAvailable.contains(fieldIdSelected)) {
                    mAlStandComponentsAvailable.remove(fieldIdSelected);
                }
            }
            mLstStandComponentsAvailable.setListData(mAlStandComponentsAvailable.toArray());            
        }
    }
    
    // Table model for TargetMapping Types
    class TargetMappingsTableModel extends AbstractTableModel {
        private	String columnNames [] = {NbBundle.getMessage(TargetMappingDialog.class, "LBL_Priority"),
                                         NbBundle.getMessage(TargetMappingDialog.class, "LBL_Field_ID")
                                         //NbBundle.getMessage(TargetMappingDialog.class, "LBL_Target_Field_Name")
                                        };
        ArrayList targetMappingsRows;
        
        TargetMappingsTableModel(ArrayList rows) {
            targetMappingsRows = rows;
        }
        
        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            if (targetMappingsRows != null) {
                return targetMappingsRows.size();
            }
            return 0;
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            if (targetMappingsRows != null) {
                TargetMappingsRow singleRow = (TargetMappingsRow) targetMappingsRows.get(row);
                if (singleRow != null && col == 0) {
                    String s = String.valueOf(singleRow.getPriority());
                    Integer priority = Integer.valueOf(s);
                    return priority;
                }
                if (singleRow != null && col == 1) {
                    return singleRow.getFieldID();
                }
                //if (singleRow != null && col == 2) {
                //	return singleRow.getTargetFieldName();
                //}
            }
            return null;
        }

        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        /*
         * Don't need to implement this method unless your table's
         * editable.
         */
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            return false;
        }

        /*
         * Don't need to implement this method unless your table's
         * data can change.
         */
        public void setValueAt(Object value, int row, int col) {
            if (targetMappingsRows != null) {
                TargetMappingsRow singleRow = (TargetMappingsRow) targetMappingsRows.get(row);
                if (singleRow != null && col == 0) {
                    if (value instanceof Integer) {
                        //singleRow.setPriority(new Integer(value.toString()));
                    }
                }
                if (col == 1) {
                    singleRow.setFieldID((String) value);
                }
            }
            fireTableCellUpdated(row, col);
        }
        
        public TargetMappingsRow removeRow(int index) {
            TargetMappingsRow singleRow = (TargetMappingsRow) targetMappingsRows.get(index);
            targetMappingsRows.remove(index);
            // update priorities
            resetPriorities();
            this.fireTableRowsDeleted(index, index);
            return singleRow;
        }
        
        public void insertRow(TargetMappingsRow singleRow, int index) {
            targetMappingsRows.add(index, singleRow);
            // update priorities
            resetPriorities();
            this.fireTableRowsInserted(index, index);
        }
        
        public void resetPriorities() {
            for (int i = 0; i < targetMappingsRows.size(); i++) {
                TargetMappingsRow singleRow = (TargetMappingsRow) targetMappingsRows.get(i);
                singleRow.setPriority(i);
            }
            this.fireTableDataChanged();
        }
    }
    
    class TargetMappingsRow {
        private int priority;
        private String fieldID;
        //private String targetFieldName;

    	TargetMappingsRow(int priority, String fieldID) { //, String targetFieldName) {
            this.priority = priority;
            this.fieldID = fieldID;
            //this.targetFieldName = targetFieldName;
        }
        
        public int getPriority() {
            return priority;
        }
        
    	//public String getTargetFieldName()
    	//{
    	//	return targetFieldName;
    	//}

        public String getFieldID() {
            return fieldID;
        }
        
        public void setPriority(int priority) {
            this.priority = priority;
        }

    	//public void setTargetFieldName(String targetFieldName)
    	//{
    	//	this.targetFieldName = targetFieldName;
    	//}

        public void setFieldID(String fieldID) {
            this.fieldID = fieldID;
        }
   }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    }
    
    public void valueChanged(TreeSelectionEvent e) {
        EntityNode selectedNode = (EntityNode) e.getPath().getLastPathComponent();

        if (selectedNode.isField()) {
            TreeNode[] nodes = selectedNode.getPath();
            String fieldNamePath = "";
            for (int i=0; i < nodes.length; i++) {
                EntityNode node = (EntityNode) nodes[i];
                String nodeName = node.getName();
                if (node.isRoot()) {
                } else if (node.isPrimary()) {
                    fieldNamePath = nodeName;
                } else if (node.isSub()) {
                    fieldNamePath += "." + nodeName + "[*]";
                } else { // isField
                    fieldNamePath += "." + nodeName;
                }
            }
            txtTargetFieldName.setText(fieldNamePath);
            btnOK.setEnabled(mTblTargetMappings.getRowCount() > 0);
        } else {
            txtTargetFieldName.setText("");
            btnOK.setEnabled(false);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFieldID;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnRemoveFieldID;
    private javax.swing.JButton btnUp;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPaneTargetMappings;
    private javax.swing.JLabel lblFieldIDsAvailable;
    private javax.swing.JLabel lblSelectFromTree;
    private javax.swing.JLabel lblSetPriority;
    private javax.swing.JScrollPane scrollPaneFieldIDsAvailable;
    private javax.swing.JTextField txtTargetFieldName;
    // End of variables declaration//GEN-END:variables
    
}
