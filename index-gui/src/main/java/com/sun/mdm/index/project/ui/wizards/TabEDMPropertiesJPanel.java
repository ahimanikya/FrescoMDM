/*
 * TabEDMPropertiesJPanel.java
 *
 * Created on February 12, 2008, 10:36 AM
 */

package com.sun.mdm.index.project.ui.wizards;

/**
 *
 * @author  kkao
 */
public class TabEDMPropertiesJPanel extends javax.swing.JPanel {
    
    /** Creates new form TabEDMPropertiesJPanel */
    public TabEDMPropertiesJPanel(String displayName, String inputMask, String valueMask,
                                    boolean searchScreen, boolean searchResult, 
                                    boolean generateReport, String searchRequired) {
        initComponents();
        this.txtDisplayName.setText(displayName);
        this.txtInputMask.setText(inputMask);
        this.txtValueMask.setText(valueMask);
        this.chkSearchResult.setSelected(searchResult);
        this.chkGenerateReport.setSelected(generateReport);
        this.jComboBoxSearchRequired.setSelectedItem(searchRequired);
        this.jComboBoxSearchRequired.setEnabled(searchScreen);
        
        chkSearchScreen.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent e) {
                if (!chkSearchScreen.isSelected()) {
                    jComboBoxSearchRequired.setSelectedItem("false");
                    jComboBoxSearchRequired.setEnabled(false);
                } else {
                    jComboBoxSearchRequired.setEnabled(true);
                }
            }
        });
        this.chkSearchScreen.setSelected(searchScreen);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelDisplayName = new javax.swing.JLabel();
        jLabelInputMask = new javax.swing.JLabel();
        jLabelValueMask = new javax.swing.JLabel();
        jLabelSearchScreen = new javax.swing.JLabel();
        jLabelSearchRequired = new javax.swing.JLabel();
        jLabelSearchResult = new javax.swing.JLabel();
        jLabelGenerateReport = new javax.swing.JLabel();
        txtDisplayName = new javax.swing.JTextField();
        txtInputMask = new javax.swing.JTextField();
        txtValueMask = new javax.swing.JTextField();
        chkSearchScreen = new javax.swing.JCheckBox();
        chkSearchResult = new javax.swing.JCheckBox();
        chkGenerateReport = new javax.swing.JCheckBox();
        jComboBoxSearchRequired = new javax.swing.JComboBox();

        jLabelDisplayName.setText(org.openide.util.NbBundle.getMessage(TabEDMPropertiesJPanel.class, "MSG_DisplayName")); // NOI18N

        jLabelInputMask.setText(org.openide.util.NbBundle.getMessage(TabEDMPropertiesJPanel.class, "MSG_InputMask")); // NOI18N

        jLabelValueMask.setText(org.openide.util.NbBundle.getMessage(TabEDMPropertiesJPanel.class, "MSG_ValueMask")); // NOI18N

        jLabelSearchScreen.setText(org.openide.util.NbBundle.getMessage(TabEDMPropertiesJPanel.class, "MSG_SearchScreen")); // NOI18N
        jLabelSearchScreen.setMaximumSize(new java.awt.Dimension(59, 14));
        jLabelSearchScreen.setMinimumSize(new java.awt.Dimension(59, 14));

        jLabelSearchRequired.setText(org.openide.util.NbBundle.getMessage(TabEDMPropertiesJPanel.class, "MSG_SearchRequired")); // NOI18N

        jLabelSearchResult.setText(org.openide.util.NbBundle.getMessage(TabEDMPropertiesJPanel.class, "MSG_SearchResult")); // NOI18N

        jLabelGenerateReport.setText(org.openide.util.NbBundle.getMessage(TabEDMPropertiesJPanel.class, "MSG_GenerateReport")); // NOI18N

        txtDisplayName.setText(org.openide.util.NbBundle.getMessage(TabEDMPropertiesJPanel.class, "TabEDMPropertiesJPanel.txtDisplayName.text")); // NOI18N

        txtInputMask.setText(org.openide.util.NbBundle.getMessage(TabEDMPropertiesJPanel.class, "TabEDMPropertiesJPanel.txtInputMask.text")); // NOI18N

        txtValueMask.setText(org.openide.util.NbBundle.getMessage(TabEDMPropertiesJPanel.class, "TabEDMPropertiesJPanel.txtValueMask.text")); // NOI18N

        chkSearchScreen.setText(org.openide.util.NbBundle.getMessage(TabEDMPropertiesJPanel.class, "TabEDMPropertiesJPanel.chkSearchScreen.text")); // NOI18N
        chkSearchScreen.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkSearchScreen.setMaximumSize(new java.awt.Dimension(13, 13));
        chkSearchScreen.setMinimumSize(new java.awt.Dimension(13, 13));
        chkSearchScreen.setPreferredSize(new java.awt.Dimension(13, 13));

        chkSearchResult.setText(org.openide.util.NbBundle.getMessage(TabEDMPropertiesJPanel.class, "TabEDMPropertiesJPanel.chkSearchResult.text")); // NOI18N
        chkSearchResult.setMargin(new java.awt.Insets(0, 0, 0, 0));

        chkGenerateReport.setText(org.openide.util.NbBundle.getMessage(TabEDMPropertiesJPanel.class, "TabEDMPropertiesJPanel.chkGenerateReport.text")); // NOI18N
        chkGenerateReport.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jComboBoxSearchRequired.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "true", "false", "oneof" }));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabelSearchScreen, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .add(jLabelSearchRequired, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .add(jLabelSearchResult, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .add(jLabelInputMask, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .add(jLabelGenerateReport, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .add(jLabelValueMask, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .add(jLabelDisplayName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(txtInputMask, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                    .add(txtDisplayName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                    .add(chkGenerateReport)
                    .add(jComboBoxSearchRequired, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(chkSearchResult)
                    .add(chkSearchScreen, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, txtValueMask, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtDisplayName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelDisplayName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtInputMask, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelInputMask, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelValueMask, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtValueMask, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelSearchScreen, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(chkSearchScreen, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelSearchRequired, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxSearchRequired, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabelSearchResult, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(chkSearchResult, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabelGenerateReport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(chkGenerateReport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(115, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkGenerateReport;
    private javax.swing.JCheckBox chkSearchResult;
    private javax.swing.JCheckBox chkSearchScreen;
    private javax.swing.JComboBox jComboBoxSearchRequired;
    private javax.swing.JLabel jLabelDisplayName;
    private javax.swing.JLabel jLabelGenerateReport;
    private javax.swing.JLabel jLabelInputMask;
    private javax.swing.JLabel jLabelSearchRequired;
    private javax.swing.JLabel jLabelSearchResult;
    private javax.swing.JLabel jLabelSearchScreen;
    private javax.swing.JLabel jLabelValueMask;
    private javax.swing.JTextField txtDisplayName;
    private javax.swing.JTextField txtInputMask;
    private javax.swing.JTextField txtValueMask;
    // End of variables declaration//GEN-END:variables
    
    private void addListeners() {
        /*
        txtDisplayName.addFocusListener(new java.awt.event.FocusListener() {
                String oldName;
                public void focusGained(java.awt.event.FocusEvent ev) {
                    oldName = txtDisplayName.getText();
                }

                public void focusLost(java.awt.event.FocusEvent ev) {
                    String newName = txtDisplayName.getText();
                }
            });
         */
        txtDisplayName.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    onTextFieldKeyReleased(evt);
                    char c = evt.getKeyChar();
                    if (c == '\n') {
                        txtInputMask.requestFocus();
                    }
                }
                public void keyTyped(java.awt.event.KeyEvent evt) {
                    onTextFieldKeyTyped(evt);
                }
        });
        
        txtInputMask.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    onTextFieldKeyReleased(evt);
                    char c = evt.getKeyChar();
                    if (c == '\n') {
                        txtValueMask.requestFocus();
                    }
                }
                public void keyTyped(java.awt.event.KeyEvent evt) {
                    onTextFieldKeyTyped(evt);
                }
        });
        
        txtValueMask.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    onTextFieldKeyReleased(evt);
                    char c = evt.getKeyChar();
                    if (c == '\n') {
                        chkSearchScreen.requestFocus();
                    }
                }
                public void keyTyped(java.awt.event.KeyEvent evt) {
                    onTextFieldKeyTyped(evt);
                }
        });
        

        this.chkSearchScreen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
            }
        });
        
        this.chkSearchResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
            }
        });
        
        this.chkGenerateReport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
            }
        });
        
        this.jComboBoxSearchRequired.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent e) {
            }
        });
    }
    
    /*
     * Check if char entered will cause xml to break
     * such as < > /
     */
    private void onTextFieldKeyTyped(java.awt.event.KeyEvent evt) {
        char c = evt.getKeyChar();
        if (!Character.isLetterOrDigit(c) && 
                c != '-' && c != '_'&& 
                c != '(' && c != ')' && 
                c != '[' && c != ']' && 
                c != '{' && c != '}' && 
                c != '\b' && c != '\n') {
            java.awt.Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }
    }
    
    private void onTextFieldKeyReleased(java.awt.event.KeyEvent evt) {
    }

    /**
     *@return DisplayName
     */
    public String getDisplayName() {
        return txtDisplayName.getText();
    }

    /**
     *@return InputMask
     */
    public String getInputMask() {
        return txtInputMask.getText();
    }

    /**
     *@return ValueMask
     */
    public String getValueMask() {
        return txtValueMask.getText();
    }

    /**
     *@param order gui display order
     */
    public void setDisplayOrder(int order) {
        //mDisplayOrder = order;
    }

    /**
     *@return DisplayOrder
     */
    public int getDisplayOrder() {
        return 0;
    }

    /**
     *@return UsedInSearchScreen
     */
    public boolean getUsedInSearchScreen() {
        return chkSearchScreen.isSelected();
    }

    /**
     *@return SearchRequired
     */
    public String getSearchRequired() {
        return this.jComboBoxSearchRequired.getSelectedItem().toString();
    }

    /**
     *@return DisplayedInSearchResult
     */
    public boolean getDisplayedInSearchResult() {
        return chkSearchResult.isSelected();
    }

    /**
     *@return GenerateReport
     */
    public boolean getGenerateReport() {
        return chkGenerateReport.isSelected();
    }
    
    /**
     * setDisplayName
     * @param oldName
     * @param newName
     */
    public void updateDefaultDisplayName(String oldName, String newName) {
        if (this.txtDisplayName.getText().equals(oldName)) {
            this.txtDisplayName.setText(newName);
        }
    }
}
