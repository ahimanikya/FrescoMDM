/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */
package com.sun.mdm.index.project.ui.applicationeditor;

import org.openide.util.NbBundle;
import org.openide.NotifyDescriptor;
import org.openide.DialogDisplayer;

import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import com.sun.mdm.index.parser.EDMType;
import com.sun.mdm.index.parser.QueryType;
import com.sun.mdm.index.parser.QueryType.QueryBuilder;
import com.sun.mdm.index.parser.QueryType.BlockRule;
import com.sun.mdm.index.project.ui.applicationeditor.blocking.BasicQueryDialog;
import com.sun.mdm.index.project.ui.applicationeditor.blocking.BlockingQueryDialog;
import com.sun.mdm.index.project.EviewApplication;

public class TabBlockingPanel extends javax.swing.JPanel {
    final String STR_BASIC_SEARCH = "**Basic Search**";    
    private JTable mTblBlockingQueries;
    private JTable mTblBasicQueries;
    
    private EviewEditorMainApp mEviewEditorMainApp;
    private EviewApplication mEviewApplication;
    //private ArrayList mBlockingQueries;
    private QueryType mQueryType;
    private EDMType mEDMType;
    private Map mMapQueryBuilders = new HashMap();              // key:QueryBuilder Value:QueryBuilder
    private Map mMapQueryBuildersRestore = new HashMap();       // key:QueryBuilder Value:Block Definitions
    private Map mMapQueryRuleDefinitions = new HashMap();       // key:QueryRuleName Value:Source fields
    private Map mMapQueryRuleDefinitionsRestore = new HashMap();// key:QueryRuleName Value:Source fields
    private Map mMapBlockingQueries = new HashMap();            // key:BlockingQuery value:QueryRuleDefinitions 
    private Map mMapBlockingQueriesRestore = new HashMap();     // key:BlockingQuery value:QueryRuleDefinitions 
    private boolean bCheckedOut;
    
    /** Creates new form TabBlockingPanel */
    public TabBlockingPanel(EviewEditorMainApp eviewEditorMainApp, EviewApplication eviewApplication, QueryType queryType) {
        mEviewEditorMainApp = eviewEditorMainApp;
        mEviewApplication = eviewApplication;
        bCheckedOut = eviewEditorMainApp.isCheckedOut();
        try {
            mEDMType = eviewApplication.getEDMType(false);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        mQueryType = queryType;
        initComponents();
        //createRuleDefinitionTable();      
        createBlockingQueriesTable();
        createBasicQueriesTable();
        mTblBlockingQueries.setEnabled(bCheckedOut);
        mTblBasicQueries.setEnabled(bCheckedOut);
        btnAddBasicQuery.setEnabled(bCheckedOut);
        btnAddBlockingQuery.setEnabled(bCheckedOut);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPaneBlockingQueries = new javax.swing.JScrollPane();
        btnRemoveBlockingQuery = new javax.swing.JButton();
        btnEditBlockingQuery = new javax.swing.JButton();
        btnAddBlockingQuery = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPaneBasicQueries = new javax.swing.JScrollPane();
        btnAddBasicQuery = new javax.swing.JButton();
        btnRemoveBasicQuery = new javax.swing.JButton();
        btnEditBasicQuery = new javax.swing.JButton();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/Bundle"); // NOI18N
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), bundle.getString("LBL_Blocking_Queries"))); // NOI18N

        btnRemoveBlockingQuery.setText(bundle.getString("MSG_button_Remove")); // NOI18N
        btnRemoveBlockingQuery.setEnabled(false);
        btnRemoveBlockingQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBlockingQueryActionPerformed(evt);
            }
        });

        btnEditBlockingQuery.setText(bundle.getString("MSG_button_Edit")); // NOI18N
        btnEditBlockingQuery.setEnabled(false);
        btnEditBlockingQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBlockingQueryActionPerformed(evt);
            }
        });

        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/blocking/Bundle"); // NOI18N
        btnAddBlockingQuery.setText(bundle1.getString("LBL_Add")); // NOI18N
        btnAddBlockingQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBlockingQueryActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(4, 4, 4)
                .add(jScrollPaneBlockingQueries, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 540, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jPanel2Layout.createSequentialGroup()
                .add(304, 304, 304)
                .add(btnAddBlockingQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(btnRemoveBlockingQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(btnEditBlockingQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jScrollPaneBlockingQueries, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 230, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnAddBlockingQuery)
                    .add(btnRemoveBlockingQuery)
                    .add(btnEditBlockingQuery)))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), bundle.getString("LBL_Basic_Queries"))); // NOI18N

        btnAddBasicQuery.setText(bundle.getString("MSG_button_Add")); // NOI18N
        btnAddBasicQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBasicQueryActionPerformed(evt);
            }
        });

        btnRemoveBasicQuery.setText(bundle.getString("LBL_Remove")); // NOI18N
        btnRemoveBasicQuery.setEnabled(false);
        btnRemoveBasicQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBasicQueryActionPerformed(evt);
            }
        });

        btnEditBasicQuery.setText(bundle.getString("MSG_button_Edit")); // NOI18N
        btnEditBasicQuery.setEnabled(false);
        btnEditBasicQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBasicQueryActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(4, 4, 4)
                .add(jScrollPaneBasicQueries, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 540, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jPanel3Layout.createSequentialGroup()
                .add(304, 304, 304)
                .add(btnAddBasicQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(btnRemoveBasicQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(btnEditBasicQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jScrollPaneBasicQueries, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 230, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnAddBasicQuery)
                    .add(btnRemoveBasicQuery)
                    .add(btnEditBasicQuery)))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 560, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 560, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(11, 11, 11)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addBlockingQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBlockingQueryActionPerformed
        BlockingQueryDialog dlg = new BlockingQueryDialog(mEviewEditorMainApp, null, null, false, mQueryType);
        dlg.setVisible(true);
        if (dlg.isModified()) {
            // add queryBuilder
            /*
            String queryBuilderName = dlg.getQueryBuilderName();
            QueryBuilder queryBuilder= mQueryType.createQueryBuilder(queryBuilderName,
                                                        dlg.getQueryBuilderClass(),
                                                        dlg.getParserClass(),
                                                        dlg.getStandardize(),
                                                        dlg.getPhoneticize(),
                                                        null, //dlg.getOptionKey(),
                                                        null, //dlg.getOptionValue(),
                                                        false, //dlg.getUseWildcard(),
                                                        null); // ToDo dlg.getBlockingRulesSelected());
             */
            // Update table
            updateModelQueries(dlg.getQueryBuilder());
            mQueryType.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
        } else {
            mMapBlockingQueries = mMapBlockingQueriesRestore;
        }

    }//GEN-LAST:event_addBlockingQueryActionPerformed

    private void removeBasicQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBasicQueryActionPerformed
        if (removeBasicQuery()) {
            btnRemoveBasicQuery.setEnabled(false);
            btnEditBasicQuery.setEnabled(false);
        }
    }//GEN-LAST:event_removeBasicQueryActionPerformed

    private void editBasicQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBasicQueryActionPerformed
        mMapBlockingQueriesRestore = mMapBlockingQueries;
        
        int iSelectedRow = mTblBasicQueries.getSelectedRow();
        TableModelBasicQueries model = (TableModelBasicQueries) mTblBasicQueries.getModel();
        String queryBuilderName = (String) model.getValueAt(iSelectedRow, model.iColQueryBuildeName);
        QueryBuilder queryBuilder = mQueryType.getQueryBuilderByName(queryBuilderName);

        BasicQueryDialog dlg = new BasicQueryDialog(queryBuilder, true);
        dlg.setVisible(true);
        if (dlg.isModified()) {
            // update queryBuilder
            queryBuilder.setQueryBuilderClass(dlg.getQueryBuilderClass());
            queryBuilder.setParserClass(dlg.getParserClass());
            queryBuilder.setStandardize(dlg.getStandardize());
            queryBuilder.setPhoneticize(dlg.getPhoneticize());
            queryBuilder.setOptionKey(dlg.getOptionKey());
            queryBuilder.setOptionValue(dlg.getOptionValue());
            queryBuilder.setUseWildcard(dlg.getUseWildcard());
            mQueryType.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
        } else {
            mMapBlockingQueries = mMapBlockingQueriesRestore;
        }

    }//GEN-LAST:event_editBasicQueryActionPerformed

    private String getDefinitionNames(ArrayList alBlockDefinitionNames) {
        String strDefinitions = "";
        for (int j=0; alBlockDefinitionNames!= null && j<alBlockDefinitionNames.size(); j++) {
            strDefinitions += (String) alBlockDefinitionNames.get(j) + ";";
        }
        return strDefinitions;
    }
    
    private void updateModelQueries(QueryBuilder queryBuilder) {
        if (queryBuilder == null) {
            return;
        }
        String targetQueryBuilderName = queryBuilder.getQueryBuilderName();
        TableModelBlockingQueries modelQ = (TableModelBlockingQueries) mTblBlockingQueries.getModel();
        int cnt = modelQ.getRowCount();
        boolean bFound = false;
        String strDefinitions = "";
        for (int i=0; i<cnt; i++) {
            String queryBuilderName = (String) modelQ.getValueAt(i, modelQ.iColQueryBuildeName);
            if (!queryBuilderName.equals(targetQueryBuilderName)) {
                continue;
            }
            bFound = true;
            modelQ.setValueAt(getDefinitionNames(queryBuilder.getSelectedBlockDefinitionNames()), i, modelQ.iColBlockingRuleDefinitions);
        }
        
        if (!bFound) {
            BlockingQueryRow r = new BlockingQueryRow(targetQueryBuilderName, 
                                      1, 
                                      getDefinitionNames(queryBuilder.getSelectedBlockDefinitionNames()));            
            TableModelBlockingQueries model = (TableModelBlockingQueries) mTblBlockingQueries.getModel();
            int iInsertRow = model.getRowCount();
            model.addRow(iInsertRow, r);
            mTblBlockingQueries.clearSelection();
            mTblBlockingQueries.addRowSelectionInterval(iInsertRow, iInsertRow);   
            mTblBlockingQueries.setEditingRow(iInsertRow);
            this.btnEditBlockingQuery.setEnabled(bCheckedOut);
            this.btnRemoveBlockingQuery.setEnabled(bCheckedOut);
        }
    }
   
    private void editBlockingQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBlockingQueryActionPerformed
        int iSelectedRow = mTblBlockingQueries.getSelectedRow();
        TableModelBlockingQueries model = (TableModelBlockingQueries) mTblBlockingQueries.getModel();
        String queryBuilderName = (String) model.getValueAt(iSelectedRow, model.iColQueryBuildeName);
        QueryBuilder queryBuilder = mQueryType.getQueryBuilderByName(queryBuilderName);
        mMapBlockingQueriesRestore = mMapBlockingQueries;
        ArrayList alDefinedBlockDefinitions = mQueryType.getAllBlockDefinitions();
        BlockingQueryDialog dlg = new BlockingQueryDialog(mEviewEditorMainApp, queryBuilder, alDefinedBlockDefinitions, true, mQueryType);
        dlg.setVisible(true);
        if (dlg.isModified()) {
            // update queryBuilder
            queryBuilder.setQueryBuilderClass(dlg.getQueryBuilderClass());
            queryBuilder.setParserClass(dlg.getParserClass());
            queryBuilder.setStandardize(dlg.getStandardize());
            queryBuilder.setPhoneticize(dlg.getPhoneticize());
            updateModelQueries(queryBuilder);
            mQueryType.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
        } else {
            mMapBlockingQueries = mMapBlockingQueriesRestore;
        }

    }//GEN-LAST:event_editBlockingQueryActionPerformed
    
    private boolean removeBasicQuery() {
        boolean bRet = false;
        int rs[] = mTblBasicQueries.getSelectedRows();
        int length = rs.length;
        String prompt = (length == 1) ? NbBundle.getMessage(TabBlockingPanel.class, "MSG_Confirm_Remove_Row_Prompt")
                                        : NbBundle.getMessage(TabBlockingPanel.class, "MSG_Confirm_Remove_Rows_Prompt");

        NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                                 prompt, 
                                 NbBundle.getMessage(TabBlockingPanel.class, "MSG_Confirm_Remove_Row_Title"), 
                                 NotifyDescriptor.YES_NO_OPTION);
        if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.YES_OPTION) {
            bRet = true;
            TableModelBasicQueries modelQ = (TableModelBasicQueries) mTblBasicQueries.getModel();
            
            for (int i=length - 1; i>=0 && i < length; i--) {
                int j = rs[i];
                String selectedQueryBuilderName = (String) modelQ.getValueAt(j, modelQ.iColQueryBuildeName);
                // update mQueryType
                mQueryType.deleteQueryBuilderByName(selectedQueryBuilderName);
                // update mEDMType
                mEDMType.removeReferencedQueryBuilder(selectedQueryBuilderName);
                modelQ.removeRow(j);
            }
            mQueryType.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
        }
        return bRet;
    }
    
    private boolean removeBlockingQuery() {
        boolean bRet = false;
        int rs[] = mTblBlockingQueries.getSelectedRows();
        int length = rs.length;
        String prompt = (length == 1) ? NbBundle.getMessage(TabBlockingPanel.class, "MSG_Confirm_Remove_Row_Prompt")
                                        : NbBundle.getMessage(TabBlockingPanel.class, "MSG_Confirm_Remove_Rows_Prompt");

        NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                                 prompt, 
                                 NbBundle.getMessage(TabBlockingPanel.class, "MSG_Confirm_Remove_Row_Title"), 
                                 NotifyDescriptor.YES_NO_OPTION);
        if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.YES_OPTION) {
            bRet = true;
            TableModelBlockingQueries modelQ = (TableModelBlockingQueries) mTblBlockingQueries.getModel();
            
            for (int i=length - 1; i>=0 && i < length; i--) {
                int j = rs[i];
                String selectedQueryBuilderName = (String) modelQ.getValueAt(j, modelQ.iColQueryBuildeName);
                // update modelQ
                /*
                TableModelBlockingQueries modelQ = (TableModelBlockingQueries) mTblBlockingQueries.getModel();
                for (int k=modelQ.getRowCount() - 1; k >= 0 ; k--) {
                    String queryBuilderName = (String) modelQ.getValueAt(k, modelQ.iColQueryBuilderName);
                    if (selectedQueryBuilderName.equals(queryBuilderName)) {
                        // ToDo - update blocking check box 
                        String sourceFields = (String) modelQ.getValueAt(k, modelQ.iColSourceFields);
                        modelQ.removeRow(k);
                    }
                }
                 */
                // update mQueryType
                mQueryType.deleteQueryBuilderByName(selectedQueryBuilderName);
                // update mEDMType
                mEDMType.removeReferencedQueryBuilder(selectedQueryBuilderName);
                modelQ.removeRow(j);
            }
            mQueryType.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
        }
        return bRet;
    }
    
    private void removeBlockingQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBlockingQueryActionPerformed
        if (removeBlockingQuery()) {
            btnRemoveBlockingQuery.setEnabled(false);
            btnEditBlockingQuery.setEnabled(false);
        }
    }//GEN-LAST:event_removeBlockingQueryActionPerformed

    private void addBasicQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBasicQueryActionPerformed
        ArrayList alDefinedBlockDefinitions = mQueryType.getAllBlockDefinitions();
        BasicQueryDialog dlg = new BasicQueryDialog(null, false);
        dlg.setVisible(true);
        if (dlg.isModified()) {
            String queryBuilderName = dlg.getQueryBuilderName();
            QueryBuilder queryBuilder= this.mQueryType.createQueryBuilder(queryBuilderName,
                                                        dlg.getQueryBuilderClass(),
                                                        dlg.getParserClass(),
                                                        dlg.getStandardize(),
                                                        dlg.getPhoneticize(),
                                                        dlg.getOptionKey(),
                                                        dlg.getOptionValue(),
                                                        dlg.getUseWildcard(),
                                                        null);
            mMapQueryBuilders.put(queryBuilderName, queryBuilder);
            
            mMapBlockingQueries.put(queryBuilderName, null);
            
            BasicQueryRow r = new BasicQueryRow(queryBuilderName);            
            TableModelBasicQueries model = (TableModelBasicQueries) mTblBasicQueries.getModel();
            int iInsertRow = model.getRowCount();
            model.addRow(iInsertRow, r);
            mTblBasicQueries.clearSelection();
            mTblBasicQueries.addRowSelectionInterval(iInsertRow, iInsertRow);   
            mTblBasicQueries.setEditingRow(iInsertRow);
            this.btnEditBasicQuery.setEnabled(bCheckedOut);
            this.btnRemoveBasicQuery.setEnabled(bCheckedOut);
            
            mQueryType.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
        }

    }//GEN-LAST:event_addBasicQueryActionPerformed
            
    class QueryBuilderInfo {
        String queryBuildClass;
        String optionKey;   // String UseWildcard
        String optionValue; // boolean true
        boolean useWildcard;
        String definitions;        
        
        QueryBuilderInfo(String queryBuildClass, boolean useWildcard, String definitions) {
            this.queryBuildClass = queryBuildClass;
            this.useWildcard = useWildcard;
            this.definitions = definitions;
        }
    }
    
    /** 
     *@param blockingQueries
     */
    //public void setBlockingQueries(ArrayList blockingQueries) {
    //    mBlockingQueries = blockingQueries;
    //}
    
    /** 
     *@return blockingQueries
     */
    //public ArrayList getBlockingQueries() {
    //    return mBlockingQueries;
    //}
    
    
    private String getSourceFieldsString(BlockRule blockRule) {
        String sourceFields = null;
        int iFieldCnt = 0;

        ArrayList alBlockBys = blockRule.getBlockBys();
        if (alBlockBys != null) {
            iFieldCnt = alBlockBys.size();
            for (int k=0; k < alBlockBys.size(); k++) {
                QueryType.BlockBy blockBy = (QueryType.BlockBy) alBlockBys.get(k);
                String source;
                if (blockBy.useConstant()) {
                    source = blockBy.getConstant();
                } else {
                    source = blockBy.getSource();
                }
                if (sourceFields == null) {
                    sourceFields = source;
                } else {
                    sourceFields += ";" + source;
                }
            }
        }

        return sourceFields;
    }
    
    /* Called by EntityNode when field name changed
     *@param oldName
     *@param newName
     *
     * Update Source Fields in Blocking Rule definition table
     */
    public boolean updateReferencedField(String oldName, String newName) {
        boolean bRet = false;

        TableModelBlockingQueries modelQ = (TableModelBlockingQueries) mTblBlockingQueries.getModel();
        for (int i=0; i<modelQ.getRowCount(); i++) {
            String queryBuilderName = (String) modelQ.getValueAt(i, modelQ.iColQueryBuildeName);
            QueryBuilder queryBuilder = mQueryType.getQueryBuilderByName(queryBuilderName);
            ArrayList alBlockDefinitions = queryBuilder.getSelectedBlockDefinitions();
            for (int j=0; j<alBlockDefinitions.size(); j++) {
                QueryType.BlockDefinition blockDefinition = (QueryType.BlockDefinition) alBlockDefinitions.get(j);
                blockDefinition.getBlockRule();
                String blockRuleName = blockDefinition.getName();
                QueryType.BlockRule br = blockDefinition.getBlockRule();
                ArrayList alBlockBys = br.getBlockBys();
                if (alBlockBys != null) {
                    for (int k=0; k < alBlockBys.size(); k++) {
                        QueryType.BlockBy blockBy = (QueryType.BlockBy) alBlockBys.get(k);
                        String oldValue = blockBy.getSource();
                        String newValue;
                        int index = oldValue.indexOf(oldName);
                        if (oldValue.equals(oldName) || 
                            (index >= 0 &&
                            oldValue.length() > oldName.length() &&
                            (index + oldName.length() < oldValue.length() &&
                                (oldValue.charAt(index + oldName.length()) == '.' ||
                                oldValue.charAt(index + oldName.length()) == ';')))) {
                            bRet = true;
                            newValue = oldValue.replaceAll(oldName, newName);
                            blockBy.setSource(newValue);
                        }
                        oldValue = blockBy.getField();
                        index = oldValue.indexOf(oldName);
                        if (oldValue.equals("Enterprise.SystemSBR." + oldName) || 
                            (index >= 0 &&
                            oldValue.length() > oldName.length() &&
                            (index + oldName.length() < oldValue.length() &&
                                (oldValue.charAt(index + oldName.length()) == '.' ||
                                oldValue.charAt(index + oldName.length()) == ';')))) {
                            bRet = true;
                            newValue = oldValue.replaceAll(oldName, newName);
                            blockBy.setField(newValue);
                        }
                    }
                }
            }
        }       
        return bRet;
    }
    
    /* Called by EntityNode when field name changed
     *@param oldName
     *
     * Update Source Fields in Blocking Rule definition table
     */
    public boolean removeReferencedField(String oldName) {
        boolean bRet = false;
        TableModelBlockingQueries modelQ = (TableModelBlockingQueries) mTblBlockingQueries.getModel();
        for (int i=0; i<modelQ.getRowCount(); i++) {
            String queryBuilderName = (String) modelQ.getValueAt(i, modelQ.iColQueryBuildeName);
            QueryBuilder queryBuilder = mQueryType.getQueryBuilderByName(queryBuilderName);
            ArrayList alBlockDefinitions = queryBuilder.getSelectedBlockDefinitions();
            for (int j=alBlockDefinitions.size() - 1; j>=0 && j<alBlockDefinitions.size(); j--) {
                QueryType.BlockDefinition blockDefinition = (QueryType.BlockDefinition) alBlockDefinitions.get(j);
                blockDefinition.getBlockRule();
                String blockRuleName = blockDefinition.getName();
                QueryType.BlockRule br = blockDefinition.getBlockRule();
                ArrayList alBlockBys = br.getBlockBys();
                if (alBlockBys != null) {
                    for (int k=alBlockBys.size() - 1; k>=0 && k < alBlockBys.size(); k--) {
                        QueryType.BlockBy blockBy = (QueryType.BlockBy) alBlockBys.get(k);
                        String oldSource = blockBy.getSource();
                        if (oldSource == null) {
                            oldSource = "";
                        }
                        String oldField = blockBy.getField();
                        if (oldSource.indexOf(oldName) >= 0 || oldField.indexOf(oldName) >= 0) {
                            alBlockBys.remove(k);
                            bRet = true;
                        }
                    }
                    if (alBlockBys == null || alBlockBys.size() ==  0) {
                        queryBuilder.deleteBlockDefinition(blockRuleName);
                    }
                }
            }
        }
        if (bRet) {
            createBlockingQueriesTable();
        }
        return bRet;
    }
    
    void createBlockingQueriesTable() {
        ArrayList rows = new ArrayList();
        ArrayList alQueryBuilders = mQueryType.getQueryBuilders();
        if (alQueryBuilders == null) {
            TableModelBlockingQueries tableModelQueries = new TableModelBlockingQueries(rows);
            mTblBlockingQueries = new JTable(tableModelQueries);
            mTblBlockingQueries.getTableHeader().setReorderingAllowed(false);
            return;
        }
        for (int i=0; i < alQueryBuilders.size(); i++) {
            QueryType.QueryBuilder queryBuilder = (QueryType.QueryBuilder) alQueryBuilders.get(i);
            //queryBuilder
            if (queryBuilder.isBlockerSearch()) {
                mMapQueryBuilders.put(queryBuilder.getQueryBuilderName(), queryBuilder);
                ArrayList alDefinedBlockDefinitions = queryBuilder.getSelectedBlockDefinitions();
                if (alDefinedBlockDefinitions != null) {
                    String strDefinitions = "";
                    ArrayList alBDNames = new ArrayList();
                    for (int j=0; alDefinedBlockDefinitions != null && j < alDefinedBlockDefinitions.size(); j++) {
                        QueryType.BlockDefinition blockDefinition = (QueryType.BlockDefinition) alDefinedBlockDefinitions.get(j);
                        String bdName = blockDefinition.getName();
                        strDefinitions += bdName + ";";
                        alBDNames.add(bdName);
                    }
                    String queryBuilderName = queryBuilder.getQueryBuilderName();
                    BlockingQueryRow r = new BlockingQueryRow(queryBuilderName, alDefinedBlockDefinitions.size(), strDefinitions);
                    rows.add(r);
                    // build mMapBlockingQueries
                    mMapBlockingQueries.put(queryBuilderName, alBDNames);
                }
            }
        }
        TableModelBlockingQueries tableModelQueries = new TableModelBlockingQueries(rows);
        mTblBlockingQueries = new JTable(tableModelQueries);
        mTblBlockingQueries.getTableHeader().setReorderingAllowed(false);
        mTblBlockingQueries.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    if (evt.getClickCount() == 2) {
                        if (bCheckedOut) {
                            editBlockingQueryActionPerformed(null);
                        }
                    } else {                    
                        btnRemoveBlockingQuery.setEnabled(bCheckedOut);
                        btnEditBlockingQuery.setEnabled(mTblBlockingQueries.getSelectedRowCount() == 1);
                    }
                }
            });
        jScrollPaneBlockingQueries.setViewportView(mTblBlockingQueries);
    }
    
    void createBasicQueriesTable() {
        ArrayList rows = new ArrayList();
        ArrayList alQueryBuilders = mQueryType.getQueryBuilders();
        if (alQueryBuilders == null) {
            TableModelBasicQueries tableModelQueries = new TableModelBasicQueries(rows);
            mTblBasicQueries = new JTable(tableModelQueries);
            mTblBasicQueries.getTableHeader().setReorderingAllowed(false);
            return;
        }
        for (int i=0; i < alQueryBuilders.size(); i++) {
            QueryType.QueryBuilder queryBuilder = (QueryType.QueryBuilder) alQueryBuilders.get(i);
            //queryBuilder - Basic Query
            if (!queryBuilder.isBlockerSearch()) {
                mMapQueryBuilders.put(queryBuilder.getQueryBuilderName(), queryBuilder);
                BasicQueryRow r = new BasicQueryRow(queryBuilder.getQueryBuilderName());
                rows.add(r);
                mMapBlockingQueries.put(queryBuilder.getQueryBuilderName(), null);
            }
        }
        TableModelBasicQueries tableModelQueries = new TableModelBasicQueries(rows);
        mTblBasicQueries = new JTable(tableModelQueries);
        mTblBasicQueries.getTableHeader().setReorderingAllowed(false);
        mTblBasicQueries.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    if (evt.getClickCount() == 2) {
                        if (bCheckedOut) {
                            editBasicQueryActionPerformed(null);
                        }
                    } else {                    
                        btnRemoveBasicQuery.setEnabled(bCheckedOut);
                        btnEditBasicQuery.setEnabled(bCheckedOut && mTblBasicQueries.getSelectedRowCount() == 1);
                    }
                }
            });
        jScrollPaneBasicQueries.setViewportView(mTblBasicQueries);
    }
    
    // Table model for Basic Search Query
    class BasicQueryRow {
    	private String queryName;

    	BasicQueryRow(String name) {
            this.queryName = name;
    	}

    	public String getQueryName() {
            return queryName;
    	}
        
    	public void setQueryName(String name) {
            this.queryName = name;
    	}
    }
    
    class TableModelBasicQueries extends AbstractTableModel {
        private	String columnNames [] = {NbBundle.getMessage(TabBlockingPanel.class, "LBL_QueryBuilderName"),
                                        };
        ArrayList basicQueryRows;
        final int iColQueryBuildeName = 0;
        
        TableModelBasicQueries(ArrayList rows) {
            basicQueryRows = rows;
        }
        
        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            if (basicQueryRows != null) {
                return basicQueryRows.size();
            }
            return 0;
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            if (basicQueryRows != null) {
                BasicQueryRow singleRow = (BasicQueryRow) basicQueryRows.get(row);
                if (singleRow != null) {
                    switch (col) {
                        case iColQueryBuildeName:
                            return singleRow.getQueryName();                            
                        default:
                            return null;
                    }
                }
            }
            return null;
        }

        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        /*
         * Don't need to implement this method unless your table's
         * editable.
         */
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            return false;
        }

        /*
         * Don't need to implement this method unless your table's
         * data can change.
         */
        public void setValueAt(Object value, int row, int col) {
            if (basicQueryRows != null) {
                BasicQueryRow singleRow = (BasicQueryRow) basicQueryRows.get(row);

                if (singleRow != null) {
                    switch (col) {
                        case iColQueryBuildeName:
                            singleRow.setQueryName((String) value);                            
                            break;
                        default:
                            return;
                    }
                }
            }
            fireTableCellUpdated(row, col);
        }
        
        public void removeRow(int index) {
            basicQueryRows.remove(index);
            this.fireTableRowsDeleted(index, index);
        }
        
        public void addRow(int index, BasicQueryRow row) {
            basicQueryRows.add(row);
            this.fireTableRowsInserted(index, index);
        }
    }

    // Table for Blocking Search Query
    class TableModelBlockingQueries extends AbstractTableModel {
        private	String columnNames [] = {NbBundle.getMessage(TabBlockingPanel.class, "LBL_QueryBuilderName"),
                                         NbBundle.getMessage(TabBlockingPanel.class, "LBL_BlockingRuleDefinitions")
                                        };
        ArrayList blockingQueryRows;
        final int iColQueryBuildeName = 0;
        final int iColBlockingRuleDefinitions = 1;
        
        TableModelBlockingQueries(ArrayList rows) {
            blockingQueryRows = rows;
        }
        
        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            if (blockingQueryRows != null) {
                return blockingQueryRows.size();
            }
            return 0;
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            if (blockingQueryRows != null) {
                BlockingQueryRow singleRow = (BlockingQueryRow) blockingQueryRows.get(row);
                if (singleRow != null) {
                    switch (col) {
                        case iColQueryBuildeName:
                            return singleRow.getQueryName();                            
                        case iColBlockingRuleDefinitions:
                            return singleRow.getRuleDefinitions();                            
                        default:
                            return null;
                    }
                }
            }
            return null;
        }

        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        /*
         * Don't need to implement this method unless your table's
         * editable.
         */
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            return false;
        }

        /*
         * Don't need to implement this method unless your table's
         * data can change.
         */
        public void setValueAt(Object value, int row, int col) {
            if (blockingQueryRows != null) {
                BlockingQueryRow singleRow = (BlockingQueryRow) blockingQueryRows.get(row);

                if (singleRow != null) {
                    switch (col) {
                        case iColQueryBuildeName:
                            singleRow.setQueryName((String) value);                            
                            break;
                        case iColBlockingRuleDefinitions:
                            singleRow.setRuleDefinitions((String) value);                            
                            break;
                        default:
                            return;
                    }
                }
            }
            fireTableCellUpdated(row, col);
        }
        
        public void removeRow(int index) {
            blockingQueryRows.remove(index);
            this.fireTableRowsDeleted(index, index);
        }
        
        public void addRow(int index, BlockingQueryRow row) {
            blockingQueryRows.add(row);
            this.fireTableRowsInserted(index, index);
        }
    }
    
    class BlockingQueryRow {
    	private String queryName;
    	private int totalRules;
        private String ruleDefinitions;

    	BlockingQueryRow(String name, int rules, String definitions)
    	{
            this.queryName = name;
            this.totalRules = rules;
            this.ruleDefinitions = definitions;
    	}

    	public String getQueryName()
    	{
            return queryName;
    	}

    	public int getTotalRules()
    	{
            return totalRules;
    	}
        
    	public String getRuleDefinitions()
    	{
            return ruleDefinitions;
    	}
        
    	public void setQueryName(String name)
    	{
            this.queryName = name;
    	}

    	public void setTotalRules(int rules)
    	{
            this.totalRules = rules;
    	}

    	public void setRuleDefinitions(String definitions)
    	{
            this.ruleDefinitions = definitions;
    	}
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddBasicQuery;
    private javax.swing.JButton btnAddBlockingQuery;
    private javax.swing.JButton btnEditBasicQuery;
    private javax.swing.JButton btnEditBlockingQuery;
    private javax.swing.JButton btnRemoveBasicQuery;
    private javax.swing.JButton btnRemoveBlockingQuery;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPaneBasicQueries;
    private javax.swing.JScrollPane jScrollPaneBlockingQueries;
    // End of variables declaration//GEN-END:variables
    
}
