/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */
package com.sun.mdm.index.project.ui.applicationeditor.standardization;

import java.util.ArrayList;
import org.openide.util.NbBundle;
import org.openide.NotifyDescriptor;
import org.openide.DialogDisplayer;

import com.sun.mdm.index.project.ui.wizards.generator.ConfigGenerator;
import com.sun.mdm.index.project.ui.wizards.generator.MatchType;
import com.sun.mdm.index.project.ui.applicationeditor.EntityTree;
import com.sun.mdm.index.parser.MatchFieldDef;

/**
 * Not used, see StandardizationTypeAddDialog
 */
public class StandardizationTypeEditDialog extends javax.swing.JDialog {
    private String mStandardizationType;
    private String mSourceField;
    private MatchFieldDef mMatchFieldDef;
    private ArrayList mAlFieldIDsSelected;
    private ArrayList mAlTargetFields;
        

    public StandardizationTypeEditDialog(String matchEngine, String standardizationType, String sourceField, EntityTree entityTree, MatchFieldDef matchFieldDef) {
        super(org.openide.windows.WindowManager.getDefault().getMainWindow(), true);
        initComponents();
        mMatchFieldDef = matchFieldDef;
        mStandardizationType = standardizationType;
        mSourceField = sourceField;
        scrollPaneEntityTree.add(entityTree);
        txtSource.setText(mSourceField);
        loadMatchTypes(matchEngine);
        mAlTargetFields = mMatchFieldDef.getMatchOutputFields(mStandardizationType, mSourceField);
        loadTargetFields();
        loadFieldIDsAvailable(entityTree.getEviewApplication().getMatchTypeList(false));
        MatchFieldDef.Group group = mMatchFieldDef.getFreeFormGroup(mStandardizationType);
        ArrayList alFieldIDs = group.getTargetMappingFieldIDsBySourceField(mSourceField);
        loadFieldIDsSelected();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlConfiguration = new javax.swing.JPanel();
        lblStep1 = new javax.swing.JLabel();
        lblStep2 = new javax.swing.JLabel();
        lblFieldIDsAvailable = new javax.swing.JLabel();
        btnAddFieldID = new javax.swing.JButton();
        btnAddFieldID.setEnabled(false);
        btnRemoveFieldID = new javax.swing.JButton();
        btnRemoveFieldID.setEnabled(false);
        lblStep3 = new javax.swing.JLabel();
        txtSource = new javax.swing.JTextField();
        scrollPaneTargetFields = new javax.swing.JScrollPane();
        lstTargetFields = new javax.swing.JList();
        scrollPaneFieldIDsAvailable = new javax.swing.JScrollPane();
        lstFieldIDsAvailable = new javax.swing.JList();
        lstFieldIDsAvailable.setEnabled(false);
        lblFieldIDsSelected = new javax.swing.JLabel();
        scrollPaneEntityTree = new javax.swing.JScrollPane();
        lblDesc = new javax.swing.JLabel();
        cbType = new javax.swing.JComboBox();
        scrollPaneFieldIDsSelected = new javax.swing.JScrollPane();
        lstFieldIDsSelected = new javax.swing.JList();
        btRemoveTargetField = new javax.swing.JButton();
        btRemoveTargetField.setEnabled(false);
        btAddTargetField = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Standardization Type");
        setModal(true);
        getContentPane().setLayout(null);

        pnlConfiguration.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Configuration", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        pnlConfiguration.setMinimumSize(new java.awt.Dimension(560, 400));
        pnlConfiguration.setName(""); // NOI18N

        lblStep1.setFont(new java.awt.Font("MS Sans Serif", 1, 11));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/standardization/Bundle"); // NOI18N
        lblStep1.setText(bundle.getString("LBL_Source_Field_Standardized")); // NOI18N

        lblStep2.setFont(new java.awt.Font("MS Sans Serif", 1, 11));
        lblStep2.setText("Field IDs the source will be parsed to:");

        lblFieldIDsAvailable.setText("Available Field IDs");

        btnAddFieldID.setLabel(">");
        btnAddFieldID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddFieldIDs(evt);
            }
        });

        btnRemoveFieldID.setLabel("<");
        btnRemoveFieldID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRemoveFieldIDs(evt);
            }
        });

        lblStep3.setFont(new java.awt.Font("MS Sans Serif", 1, 11));
        lblStep3.setText(bundle.getString("LBL_Target_Fields")); // NOI18N

        txtSource.setEditable(false);

        lstTargetFields.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lstTargetFields.setPreferredSize(new java.awt.Dimension(400, 400));
        lstTargetFields.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                onTargetFieldSelected(evt);
            }
        });
        scrollPaneTargetFields.setViewportView(lstTargetFields);

        lstFieldIDsAvailable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lstFieldIDsAvailable.setPreferredSize(new java.awt.Dimension(400, 400));
        lstFieldIDsAvailable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onClickAvailableTargetIDs(evt);
            }
        });
        scrollPaneFieldIDsAvailable.setViewportView(lstFieldIDsAvailable);

        lblFieldIDsSelected.setText("Selected Field IDs");

        lblDesc.setFont(new java.awt.Font("MS Sans Serif", 1, 11));
        lblDesc.setText(bundle.getString("LBL_Standardization_Type")); // NOI18N

        lstFieldIDsSelected.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lstFieldIDsSelected.setPreferredSize(new java.awt.Dimension(400, 400));
        lstFieldIDsSelected.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onClickSelectedFieldIDs(evt);
            }
        });
        scrollPaneFieldIDsSelected.setViewportView(lstFieldIDsSelected);

        btRemoveTargetField.setText("Remove");
        btRemoveTargetField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRemoveTargetField(evt);
            }
        });

        btAddTargetField.setText("Add");
        btAddTargetField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddTargetField(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlConfigurationLayout = new org.jdesktop.layout.GroupLayout(pnlConfiguration);
        pnlConfiguration.setLayout(pnlConfigurationLayout);
        pnlConfigurationLayout.setHorizontalGroup(
            pnlConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlConfigurationLayout.createSequentialGroup()
                .add(2, 2, 2)
                .add(scrollPaneEntityTree, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10)
                .add(pnlConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblDesc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 320, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cbType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 320, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblStep1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 320, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtSource, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 320, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblStep3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 320, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(scrollPaneTargetFields, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 320, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pnlConfigurationLayout.createSequentialGroup()
                        .add(140, 140, 140)
                        .add(btAddTargetField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(btRemoveTargetField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(lblStep2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 320, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pnlConfigurationLayout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(lblFieldIDsAvailable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(60, 60, 60)
                        .add(lblFieldIDsSelected, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnlConfigurationLayout.createSequentialGroup()
                        .add(scrollPaneFieldIDsAvailable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(pnlConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btnRemoveFieldID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(btnAddFieldID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(scrollPaneFieldIDsSelected, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
        );
        pnlConfigurationLayout.setVerticalGroup(
            pnlConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(scrollPaneEntityTree, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 440, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(pnlConfigurationLayout.createSequentialGroup()
                .add(lblDesc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(pnlConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cbType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pnlConfigurationLayout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(lblStep1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(txtSource, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(lblStep3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(scrollPaneTargetFields, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(pnlConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btAddTargetField)
                    .add(btRemoveTargetField))
                .add(7, 7, 7)
                .add(lblStep2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(pnlConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblFieldIDsAvailable)
                    .add(lblFieldIDsSelected))
                .add(6, 6, 6)
                .add(pnlConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(scrollPaneFieldIDsAvailable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pnlConfigurationLayout.createSequentialGroup()
                        .add(60, 60, 60)
                        .add(pnlConfigurationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(pnlConfigurationLayout.createSequentialGroup()
                                .add(20, 20, 20)
                                .add(btnRemoveFieldID))
                            .add(btnAddFieldID)))
                    .add(scrollPaneFieldIDsSelected, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        getContentPane().add(pnlConfiguration);
        pnlConfiguration.setBounds(10, 0, 570, 470);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-598)/2, (screenSize.height-507)/2, 598, 507);
    }// </editor-fold>//GEN-END:initComponents

    private void onClickAvailableTargetIDs(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onClickAvailableTargetIDs
        // TODO add your handling code here:
        btnAddFieldID.setEnabled(true);
    }//GEN-LAST:event_onClickAvailableTargetIDs

    private void onClickSelectedFieldIDs(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onClickSelectedFieldIDs
        // TODO add your handling code here:
        btnRemoveFieldID.setEnabled(true);
    }//GEN-LAST:event_onClickSelectedFieldIDs

    private void onTargetFieldSelected(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_onTargetFieldSelected
        btRemoveTargetField.setEnabled(true);
        lstFieldIDsAvailable.setEnabled(true);
        loadFieldIDsSelected();
    }//GEN-LAST:event_onTargetFieldSelected

    private void onRemoveTargetField(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRemoveTargetField
        int[] rs = lstTargetFields.getSelectedIndices();
        if (rs != null && rs.length > 0) {
	        String prompt = (rs.length == 1) ? NbBundle.getMessage(StandardizationTypeEditDialog.class, "MSG_Confirm_Remove_Row_Prompt")
    	                                    : NbBundle.getMessage(StandardizationTypeEditDialog.class, "MSG_Confirm_Remove_Rows_Prompt");
            NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                                     prompt, 
                                     NbBundle.getMessage(StandardizationTypeEditDialog.class, "MSG_Confirm_Remove_Row_Title"), 
                                     NotifyDescriptor.YES_NO_OPTION);
            if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.YES_OPTION) {
                for (int i=rs.length - 1; i>=0 && i < rs.length; i--) {
                    mAlTargetFields.remove(rs[i]);
                }
                loadTargetFields();
                // empty lstFieldIDsSelected
                mAlFieldIDsSelected.clear();
                lstFieldIDsSelected.setListData(mAlFieldIDsSelected.toArray());
                btRemoveTargetField.setEnabled(false);
            }
        }

    }//GEN-LAST:event_onRemoveTargetField

    private void onAddTargetField(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddTargetField
        // TODO add your handling code here:
    }//GEN-LAST:event_onAddTargetField

    private void onRemoveFieldIDs(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRemoveFieldIDs
        int[] rs = lstFieldIDsSelected.getSelectedIndices();
        for (int i=rs.length - 1; i>=0 && i < rs.length; i--) {
            mAlFieldIDsSelected.remove(rs[i]);
        }
        lstFieldIDsSelected.setListData(mAlFieldIDsSelected.toArray());
        btnRemoveFieldID.setEnabled(false);
    }//GEN-LAST:event_onRemoveFieldIDs

    private void onAddFieldIDs(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddFieldIDs
        if (lstFieldIDsAvailable != null && lstFieldIDsAvailable.getModel().getSize() > 0) {
            Object[] fieldNames = lstFieldIDsAvailable.getSelectedValues();
            for (int i=0; i < fieldNames.length; i++) {
                if (mAlFieldIDsSelected != null && !mAlFieldIDsSelected.contains(fieldNames[i])) {
                    mAlFieldIDsSelected.add(fieldNames[i]);
                }
            }
            if (lstFieldIDsSelected != null) {
                lstFieldIDsSelected.setListData(mAlFieldIDsSelected.toArray());
                lstFieldIDsAvailable.clearSelection();
                btnAddFieldID.setEnabled(false);
            }
        }
    }//GEN-LAST:event_onAddFieldIDs
    
    private void loadMatchTypes(String matchEngine) {
        MatchType[] mMatchTypes;
        mMatchTypes = ConfigGenerator.getMatchTypes(matchEngine);
        for (int i = 0; i < mMatchTypes.length; i++) {
            cbType.addItem(mMatchTypes[i].getMatchTypeID());
        }
        if (mStandardizationType != null) {
            cbType.setSelectedItem(mStandardizationType);
        }
    }
    
    private void loadTargetFields() {
        if (mAlTargetFields != null) {
            lstTargetFields.setListData(mAlTargetFields.toArray());
        }
    }
    
    private void loadFieldIDsAvailable(ArrayList alFieldIDsAvailable) {
        if (alFieldIDsAvailable != null) {
            lstFieldIDsAvailable.setListData(alFieldIDsAvailable.toArray());
        }
    }
    
    private void loadFieldIDsSelected() {
        if (lstTargetFields != null && lstTargetFields.getModel().getSize() > 0) {
            if (lstTargetFields.getSelectedIndex() != -1) {
                String fieldName = (String) lstTargetFields.getSelectedValue();
                mAlFieldIDsSelected = mMatchFieldDef.getMatchFieldIdsSelected(fieldName);
                if (mAlFieldIDsSelected != null) {
                    lstFieldIDsSelected.setListData(mAlFieldIDsSelected.toArray());
                }
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddTargetField;
    private javax.swing.JButton btRemoveTargetField;
    private javax.swing.JButton btnAddFieldID;
    private javax.swing.JButton btnRemoveFieldID;
    private javax.swing.JComboBox cbType;
    private javax.swing.JLabel lblDesc;
    private javax.swing.JLabel lblFieldIDsAvailable;
    private javax.swing.JLabel lblFieldIDsSelected;
    private javax.swing.JLabel lblStep1;
    private javax.swing.JLabel lblStep2;
    private javax.swing.JLabel lblStep3;
    private javax.swing.JList lstFieldIDsAvailable;
    private javax.swing.JList lstFieldIDsSelected;
    private javax.swing.JList lstTargetFields;
    private javax.swing.JPanel pnlConfiguration;
    private javax.swing.JScrollPane scrollPaneEntityTree;
    private javax.swing.JScrollPane scrollPaneFieldIDsAvailable;
    private javax.swing.JScrollPane scrollPaneFieldIDsSelected;
    private javax.swing.JScrollPane scrollPaneTargetFields;
    private javax.swing.JTextField txtSource;
    // End of variables declaration//GEN-END:variables
    
}
