/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */
package com.sun.mdm.index.project.ui.applicationeditor;

import javax.swing.tree.TreeNode;

import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;

public class EntityTreeSelectionDialog extends javax.swing.JDialog implements TreeSelectionListener {
    private EntityTree mEntityTree;
    private boolean mWildcard;
    private boolean mSelected = false;
    
    /** Creates new form EntityTreeSelectionDialog */
    public EntityTreeSelectionDialog(EntityTree entityTree, String fieldName, boolean bWildcard) {
        super(org.openide.windows.WindowManager.getDefault().getMainWindow(), true);
        mEntityTree = entityTree;
        mWildcard = bWildcard;
        mEntityTree.setEditable(false);
        mEntityTree.addTreeSelectionListener(this);
        mEntityTree.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    if (evt.getClickCount() == 2) {
                        TreePath hitPath = mEntityTree.getPathForLocation(
                                evt.getX(),
                                evt.getY());
                        if (hitPath != null) {
                            EntityNode selectedNode = (EntityNode) hitPath.getLastPathComponent();
                            if (selectedNode != null) {
                                setTargetFieldName(selectedNode);
                                onOK(null);
                            } 
                        }
                    } else {                    
                    }
                }
            });
        initComponents();
        if (fieldName != null && fieldName.length() > 0) {
            txtTargetFieldName.setText(fieldName);
            mEntityTree.setSelectedNode(fieldName);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnOK = new javax.swing.JButton();
        btnOK.setEnabled(false);
        btnCancel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        txtTargetFieldName = new javax.swing.JTextField();
        lblSelectFromTree = new javax.swing.JLabel();
        jScrollPaneEntityTree = new javax.swing.JScrollPane();
        jScrollPaneEntityTree.setViewportView(mEntityTree);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/blocking/Bundle"); // NOI18N
        setTitle(bundle.getString("LBL_Select_Field")); // NOI18N
        setModal(true);

        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/Bundle"); // NOI18N
        btnOK.setText(bundle1.getString("LBL_OK")); // NOI18N
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOK(evt);
            }
        });

        btnCancel.setText(bundle1.getString("LBL_Cancel")); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCancel(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtTargetFieldName.setBackground(new java.awt.Color(204, 204, 204));
        txtTargetFieldName.setEditable(false);
        txtTargetFieldName.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                onTargetFieldPropertyChange(evt);
            }
        });

        lblSelectFromTree.setText(bundle1.getString("LBL_Select_Target_Field")); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(8, 8, 8)
                .add(lblSelectFromTree, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(txtTargetFieldName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 250, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jPanel1Layout.createSequentialGroup()
                .add(8, 8, 8)
                .add(jScrollPaneEntityTree, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 340, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(8, 8, 8)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblSelectFromTree, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtTargetFieldName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(10, 10, 10)
                .add(jScrollPaneEntityTree, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 380, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 360, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(230, 230, 230)
                .add(btnOK, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(btnCancel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(5, 5, 5)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 430, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(5, 5, 5)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnOK)
                    .add(btnCancel))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-384)/2, (screenSize.height-508)/2, 384, 508);
    }// </editor-fold>//GEN-END:initComponents

    private void onTargetFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_onTargetFieldPropertyChange
        btnOK.setEnabled(txtTargetFieldName.getText().length() > 0);
    }//GEN-LAST:event_onTargetFieldPropertyChange

    
    private void onCancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCancel
        this.dispose();
    }//GEN-LAST:event_onCancel

    private void onOK(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onOK
        mSelected = true;
        this.dispose();
    }//GEN-LAST:event_onOK
    
    public String getTargetFieldName() {
        return this.txtTargetFieldName.getText();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    }
    
    public void valueChanged(TreeSelectionEvent e) {
        EntityNode selectedNode = (EntityNode) e.getPath().getLastPathComponent();
        if (selectedNode != null) {
            setTargetFieldName(selectedNode);
        }
    }
    
    private void setTargetFieldName(EntityNode selectedNode) {
        if (selectedNode.isField()) {
            TreeNode[] nodes = selectedNode.getPath();
            String fieldNamePath = "";
            for (int i=0; i < nodes.length; i++) {
                EntityNode node = (EntityNode) nodes[i];
                String nodeName = node.getName();
                if (node.isRoot()) {
                } else if (node.isPrimary()) {
                    fieldNamePath = nodeName;
                } else if (node.isSub()) {
                    fieldNamePath += "." + nodeName;
                    if (mWildcard) {
                        fieldNamePath += "[*]";
                    }
                } else { // isField
                    fieldNamePath += "." + nodeName;
                }
            }
            txtTargetFieldName.setText(fieldNamePath);
            btnOK.setEnabled(true);
        } else {
            txtTargetFieldName.setText("");
            btnOK.setEnabled(false);
        }
    }
    
    public boolean isSelected() {
        return mSelected;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPaneEntityTree;
    private javax.swing.JLabel lblSelectFromTree;
    private javax.swing.JTextField txtTargetFieldName;
    // End of variables declaration//GEN-END:variables
    
}
