[SBYNTAG:DEFINE:objname,pname,fieldnames(),fieldtypes(),sbr]
/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */

package com.sun.mdm.index.ops;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Date;
import com.sun.mdm.index.objects.ObjectNode;
import com.sun.mdm.index.objects.[sbyntag:objname.makeClassName]Object;
import com.sun.mdm.index.objects.exception.*;
import com.sun.mdm.index.ops.exception.*;
import com.sun.mdm.index.idgen.CUIDManager;

public final class [sbyntag:objname.makeClassName][sbyntag:sbr]DB 
    extends ObjectPersistenceService 
    implements EntityOPS {
    static private String mDeleteString;
    static private String mInsertString;
    static private String mSelectString;
    static private String mUpdateString;


    static {
		mSelectString =
		"       select \n"+
		"               [sbyntag:pname.toLowerCase]id, \n"+
[SBYNTAG:SQLCOLLIST-BEGIN]		
		"               [sbyntag:fieldnames().toLowerCase] \n"+
[SBYNTAG:SQLCOLLIST-END]		
		"       from \n"+
		"               sbyn_[sbyntag:objname.toLowerCase][sbyntag:sbr.toLowerCase] \n"+
		"       where \n"+
		"               [sbyntag:pname.toLowerCase]id = ? \n";
		
		mInsertString =
		"       insert into sbyn_[sbyntag:objname.toLowerCase][sbyntag:sbr.toLowerCase] \n"+
		"       ( \n"+
		"               [sbyntag:pname.toLowerCase]id, \n"+
[SBYNTAG:SQLCOLLIST-BEGIN]		
		"               [sbyntag:fieldnames().toLowerCase] \n"+
[SBYNTAG:SQLCOLLIST-END]		
		"       ) \n"+
		"       values \n"+
		"       ( \n"+
		"               ?, \n"+
[SBYNTAG:SQL?LIST-BEGIN]		
		"               [sbyntag:fieldnames().toLowerCase] \n"+
[SBYNTAG:SQL?LIST-END]		
		"       ) \n";
		
		mUpdateString =
		"       update sbyn_[sbyntag:objname.toLowerCase][sbyntag:sbr.toLowerCase] \n"+
		"       set \n"+
		"               [sbyntag:pname.toLowerCase]id = ?, \n"+
[SBYNTAG:SQLSETLIST-BEGIN]		
		"               [sbyntag:fieldnames().toLowerCase] \n"+
[SBYNTAG:SQLSETLIST-END]		
		"       where \n"+
		"               [sbyntag:objname.toLowerCase]id = ? \n";
		
		mDeleteString =
		"       delete from sbyn_[sbyntag:objname.toLowerCase][sbyntag:sbr.toLowerCase] \n"+
		"       where \n"+
		"               [sbyntag:objname.toLowerCase]id = ? \n";
    }
    
    
    public [sbyntag:objname.makeClassName][sbyntag:sbr]DB() 
        throws OPSException {
		super();
    }
    
    public void create(Connection conn, HashMap opsmap, String[] keys, ObjectNode node) 
        throws OPSException {
        if (keys == null) {
            throw new OPSException ("[sbyntag:objname.makeClassName][sbyntag:sbr]DB: invalid parent key(s) in create()");
        }
                    
        [sbyntag:objname.makeClassName]Object [sbyntag:objname.toLowerCase]_obj = ([sbyntag:objname.makeClassName]Object) node;                    
        PreparedStatement stmt = null;
		try {
            log("creating [sbyntag:objname.makeClassName][sbyntag:sbr]");

		    stmt = getStatement(mInsertString, conn);
	    	int count = 1;
                if ([sbyntag:objname.toLowerCase]_obj.get[sbyntag:objname.makeClassName]Id() == null) {
                    [sbyntag:objname.toLowerCase]_obj.set[sbyntag:objname.makeClassName]Id(CUIDManager.getNextUID(conn, "[sbyntag:objname.toUpperCase][sbyntag:sbr]"));
                }
	    	for(int i=0; i<keys.length; i++) {
	    	    stmt.setString(count++, keys[i]);
	    	    log("    keys[" + i + "]: " + keys[i]);
	    	}
[SBYNTAG:REP-BEGIN]
			setParam(stmt, count++, "[sbyntag:fieldtypes()]", [sbyntag:objname.toLowerCase]_obj.get[sbyntag:fieldnames().makeClassName]());
[SBYNTAG:REP-END]
	    
	    	stmt.executeUpdate();
		}
		catch (SQLException e)
		{
            String sql_err = e.getMessage();
            ArrayList params = new ArrayList();
            try
            {
                for(int i=0; i<keys.length; i++)
                {
                    params = addobject(params, keys[i]);
                }
[SBYNTAG:REP-BEGIN]
			    params = addobject(params, [sbyntag:objname.toLowerCase]_obj.get[sbyntag:fieldnames().makeClassName]());
[SBYNTAG:REP-END]
                String sql = sql2str(mInsertString, params);
                throw new OPSException(sql + e.getMessage());
            }
            catch (ObjectException oe)
            {
                throw new OPSException (oe.getMessage() + sql_err);
            }
		}
		catch (OPSException e)
		{
		    throw e;
		}
		catch (Exception e)
		{
		    throw new OPSException(e.getMessage());
        } finally {
        	try {
        		if (stmt != null) {
            		stmt.close();
            	}
            } catch (SQLException e) {
            	throw new OPSException("failed to close statement");
            }
        }
    }
    
    public ArrayList get(Connection conn, HashMap opsmap, String[] keys) throws OPSException
    {
        if (keys == null) {
            throw new OPSException ("[sbyntag:objname.makeClassName][sbyntag:sbr]DB: invalid parent key(s) in get()");
        }
                    
		ArrayList a_ret = null;
        PreparedStatement stmt = null;
   	    ResultSet r_set = null;
		try
		{
            log("retrieving [sbyntag:objname.makeClassName][sbyntag:sbr]");

		    stmt = getStatement(mSelectString, conn);
		    int count = 1;
		    for(int i=0; i<keys.length; i++)
		    {
	    	    stmt.setString(count++, keys[i]);
	    	    log("    keys[" + i + "]: " + keys[i]);
	    	}
	    	r_set = stmt.executeQuery();
	    	while (r_set.next())
	    	{
				if (null == a_ret)
			    	a_ret = new ArrayList();
			
				[sbyntag:objname.makeClassName]Object [sbyntag:objname.toLowerCase]_obj = new [sbyntag:objname.makeClassName]Object();
[SBYNTAG:REP-BEGIN]
				[sbyntag:objname.toLowerCase]_obj.set[sbyntag:fieldnames().makeClassName](getValue(r_set, "[sbyntag:fieldnames()]", "[sbyntag:fieldtypes()]"));
[SBYNTAG:REP-END]
				[sbyntag:objname.toLowerCase]_obj.resetAll();
				a_ret.add([sbyntag:objname.toLowerCase]_obj);
	    	}
		}
		catch (SQLException e)
		{
            ArrayList params = new ArrayList();
            for(int i=0; i<keys.length; i++)
            {
                params = addobject(params, keys[i]);
            }
            String sql = sql2str(mSelectString, params);
		    throw new OPSException(sql+e.getMessage());
		}
		catch (ObjectException e)
		{
		    throw new OPSException(e.getMessage());
		}
		catch (OPSException e)
		{
		    throw e;
        } finally {
        	try {
        	    if (r_set != null) {
        	        r_set.close();
        	    }
        		if (stmt != null) {
            		stmt.close();
            	}
            } catch (SQLException e) {
            	throw new OPSException("failed to close statement");
            }
        }
		return a_ret;
    }
    
    public void update(Connection conn, HashMap opsmap, String[] keys, ObjectNode node) throws OPSException
    {

        if (keys == null) {
            throw new OPSException ("[sbyntag:objname.makeClassName][sbyntag:sbr]DB: invalid parent key(s) in update()");
        }
                    
        [sbyntag:objname.makeClassName]Object [sbyntag:objname.toLowerCase]_obj = ([sbyntag:objname.makeClassName]Object) node;                    
        PreparedStatement stmt = null;
    	try
    	{
            log("updating [sbyntag:objname.makeClassName][sbyntag:sbr]");
    
    		if (![sbyntag:objname.toLowerCase]_obj.isAdded())
			{
				if ([sbyntag:objname.toLowerCase]_obj.isUpdated())
				{
				    stmt = getStatement(mUpdateString, conn);
					int count = 1;
					for(int i=0; i<keys.length; i++)
					{
					    stmt.setString(count++, keys[i]);
        	    	    log("    keys[" + i + "]: " + keys[i]);
					}
[SBYNTAG:REP-BEGIN]				
					setParam(stmt, count++, "[sbyntag:fieldtypes()]", [sbyntag:objname.toLowerCase]_obj.get[sbyntag:fieldnames().makeClassName]());
[SBYNTAG:REP-END]
					stmt.setString(count++, [sbyntag:objname.toLowerCase]_obj.get[sbyntag:objname.makeClassName]Id());
        	        log("    [sbyntag:objname.makeClassName]Id: " + [sbyntag:objname.toLowerCase]_obj.get[sbyntag:objname.makeClassName]Id());
					
					stmt.executeUpdate();
					stmt.close();
					[sbyntag:objname.toLowerCase]_obj.setUpdateFlag(false);
				}
	    	    else if ([sbyntag:objname.toLowerCase]_obj.isRemoved())
	    	    {
			    	this.remove(conn, opsmap, [sbyntag:objname.toLowerCase]_obj);
	    	    }
			}	
			else
			{
				this.create(conn, opsmap, keys, [sbyntag:objname.toLowerCase]_obj);
			}

	    }
	    catch (SQLException e)
	    {
            String sql_err = e.getMessage();
            ArrayList params = new ArrayList();
            try
            {
                for(int i=0; i<keys.length; i++)
                {
                    params = addobject(params, keys[i]);
                }
[SBYNTAG:REP-BEGIN]				
                params = addobject(params, [sbyntag:objname.toLowerCase]_obj.get[sbyntag:fieldnames().makeClassName]());
[SBYNTAG:REP-END]
                params = addobject(params, [sbyntag:objname.toLowerCase]_obj.get[sbyntag:objname.makeClassName]Id());
                String sql = sql2str(mUpdateString, params);	
                throw new OPSException(sql + e.getMessage());
            }
            catch (ObjectException oe)
            {
                throw new OPSException (oe.getMessage() + sql_err);
            }
	    }
	    catch (ObjectException e)
	    {
			throw new OPSException(e.getMessage());
	    }
		catch (OPSException e)
		{
		    throw e;
        } finally {
        	try {
        		if (stmt != null) {
            		stmt.close();
            	}
            } catch (SQLException e) {
            	throw new OPSException("failed to close statement");
            }
        }
    }
    
    public void remove(Connection conn, HashMap opsmap, ObjectNode node) throws OPSException
    {
        [sbyntag:objname.makeClassName]Object [sbyntag:objname.toLowerCase]_obj = ([sbyntag:objname.makeClassName]Object) node;                    
	    PreparedStatement stmt = null;
		try
		{
            log("to remove [sbyntag:objname.makeClassName][sbyntag:sbr]");

		    stmt  = getStatement(mDeleteString, conn);
		    stmt.setString(1, [sbyntag:objname.toLowerCase]_obj.get[sbyntag:objname.makeClassName]Id());
	        log("    [sbyntag:objname.makeClassName]Id: " + [sbyntag:objname.toLowerCase]_obj.get[sbyntag:objname.makeClassName]Id());
		    stmt.executeUpdate();
		    stmt.close();

		}
		catch (SQLException e)
		{
            String sql_err = e.getMessage();
            try
            {
                ArrayList params = new ArrayList();
                params = addobject(params, [sbyntag:objname.toLowerCase]_obj.get[sbyntag:objname.makeClassName]Id());
                String sql = sql2str(mDeleteString, params);
                throw new OPSException(sql + e.getMessage());
            }
            catch (ObjectException oe)
            {
                throw new OPSException ( oe.getMessage() + sql_err );
            }
		}
		catch (ObjectException e)
		{
		    throw new OPSException(e.getMessage());
        } finally {
        	try {
        		if (stmt != null) {
            		stmt.close();
            	}
            } catch (SQLException e) {
            	throw new OPSException("failed to close statement");
            }
        }
    }
}