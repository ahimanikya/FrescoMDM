/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */
package com.sun.mdm.index.project.ui.applicationeditor.standardization;

public class PhoneticEncoderEditDialog extends javax.swing.JDialog {
    boolean bModified = false;
    
    /** Creates new form PhoneticEncoderEditDialog */
    public PhoneticEncoderEditDialog(String encodingType, String encoderImplementationClass, boolean editMode) {
        super(org.openide.windows.WindowManager.getDefault().getMainWindow(), true);
        initComponents();
            
        this.jTextFieldEncodingType.setText(encodingType);
        this.jTextFieldEncoderImplementationClass.setText(encoderImplementationClass);
        this.jTextFieldEncodingType.setEditable(!editMode);
        
        this.jTextFieldEncodingType.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    enableOK();
                    char c = evt.getKeyChar();
                    if (c == '\n') {
                        jTextFieldEncoderImplementationClass.requestFocus();
                    }
                }
        });       
        this.jTextFieldEncoderImplementationClass.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    enableOK();
                    char c = evt.getKeyChar();
                    if (c == '\n') {
                        jTextFieldEncodingType.requestFocus();
                    }
                }
        });        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelField = new javax.swing.JLabel();
        jTextFieldEncoderImplementationClass = new javax.swing.JTextField();
        jTextFieldEncodingType = new javax.swing.JTextField();
        jLabelEncodingTypes = new javax.swing.JLabel();
        jButtonOk = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/standardization/Bundle"); // NOI18N
        setTitle(bundle.getString("LBL_Title_PhoneticEncoderEdit")); // NOI18N
        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/blocking/Bundle"); // NOI18N
        setName(bundle1.getString("LBL_Title_BlockBy")); // NOI18N

        jLabelField.setText(bundle.getString("LBL_Encoder_Implementation_Class")); // NOI18N

        jLabelEncodingTypes.setText(bundle.getString("LBL_Encoding_Type")); // NOI18N

        jButtonOk.setText(bundle.getString("LBL_OK")); // NOI18N
        jButtonOk.setEnabled(false);
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        jButtonCancel.setText(bundle.getString("LBL_Cancel")); // NOI18N
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jLabelEncodingTypes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jTextFieldEncodingType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 360, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jLabelField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jTextFieldEncoderImplementationClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 360, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(370, 370, 370)
                .add(jButtonOk, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jButtonCancel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabelEncodingTypes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTextFieldEncodingType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabelField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTextFieldEncoderImplementationClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jButtonOk)
                    .add(jButtonCancel)))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-539)/2, (screenSize.height-135)/2, 539, 135);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        bModified = false;
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        bModified = true;
        this.dispose();
    }//GEN-LAST:event_btnOkActionPerformed
    
    private void enableOK() {
        boolean enabled = this.jTextFieldEncodingType.getText() != null && 
                          !this.jTextFieldEncodingType.getText().equals("") &&
                          this.jTextFieldEncoderImplementationClass.getText() != null && 
                          !this.jTextFieldEncoderImplementationClass.getText().equals("");   

        this.jButtonOk.setEnabled(enabled);
    }
    
    public String getEncodingType() {
        return this.jTextFieldEncodingType.getText();
    }
    
    public String getEncoderImplementationClass() {
        return this.jTextFieldEncoderImplementationClass.getText();
    }
    
    public boolean isModified() {
        return bModified;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PhoneticEncoderEditDialog("", "", false);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JLabel jLabelEncodingTypes;
    private javax.swing.JLabel jLabelField;
    private javax.swing.JTextField jTextFieldEncoderImplementationClass;
    private javax.swing.JTextField jTextFieldEncodingType;
    // End of variables declaration//GEN-END:variables
    
}
