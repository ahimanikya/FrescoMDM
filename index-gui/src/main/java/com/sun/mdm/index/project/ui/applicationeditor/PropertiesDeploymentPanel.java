/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */
package com.sun.mdm.index.project.ui.applicationeditor;

import org.openide.NotifyDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.NbBundle;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.JComboBox;
import javax.swing.DefaultListModel;
import javax.swing.JPanel;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Iterator;

import com.sun.mdm.index.parser.EIndexObject;
import com.sun.mdm.index.parser.UpdateType;

/** A single panel for editor - the GUI portion.
 *
 */
public class PropertiesDeploymentPanel extends JPanel {
    // Variables declaration - do not modify

    private JComboBox cbDatabase;
    private static JComboBox cbMatchEngine;
    private JComboBox cbDateFormat;
    private JTextField jTextFieldSourceName;
    private JList jListSource;
    private DefaultListModel listModel;
    private JButton btnSourceRemove;
    private JButton btnSourceAdd;
    
    private JTextField jTextFieldApplicationName;    
    private String applicationName;    
    private String database = NbBundle.getMessage(PropertiesDeploymentPanel.class, "MSG_db_Oracle");
    private String matchEngine;
    private String dateFormat;
    private ArrayList alSourceSystems;
    private EIndexObject mEindexObject = null;
    private UpdateType mUpdateType = null;
    /**
     * Create the panel and set up some basic properties.
     *
     */
    public PropertiesDeploymentPanel(EIndexObject eIndexObject, UpdateType updateType) {
        this(eIndexObject.getName(),
             eIndexObject.getDataBase(), 
             NbBundle.getMessage(PropertiesDeploymentPanel.class, "MSG_match_engine_Seebeyond"),                      
             eIndexObject.getDateFormat(),
             updateType.getSourceSystems());
        this.mEindexObject = eIndexObject;
        this.mUpdateType = updateType;
    }
    
    private PropertiesDeploymentPanel(String applicationName, String database, String matchEngine,
            String dateFormat, ArrayList alSourceSystems) {
        initComponents();
        setApplicationName(applicationName);
        setDatabase(database);
        setDateFormat(dateFormat);        
        setMatchEngine(matchEngine);        
        setSourceSystems(alSourceSystems);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        JLabel jLabelApplicationName = new JLabel();
        jLabelApplicationName.setText(NbBundle.getMessage(PropertiesDeploymentPanel.class,
                "MSG_static_View"));

        jTextFieldApplicationName = new JTextField();
        jTextFieldApplicationName.setEditable(false);
	/* Not editable
        jTextFieldApplicationName.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(KeyEvent evt) {
                }
                public void keyTyped(KeyEvent evt) {
                    char c = evt.getKeyChar();

                    if (!Character.isLetterOrDigit(c) && c != '-' && c != '_' 
                        && c!= KeyEvent.VK_BACK_SPACE  && c!= KeyEvent.VK_DELETE) {
                        Toolkit.getDefaultToolkit().beep();
                        evt.consume();
                    }
                }
            });
        */    
        
        JLabel jLabelDatabase = new JLabel();
        JLabel jLabelMatchEngine = new JLabel();
        JLabel jLabelDateFormat = new JLabel();

        cbDatabase = new JComboBox();
        cbDatabase.insertItemAt(NbBundle.getMessage(
                PropertiesDeploymentPanel.class, "MSG_db_Oracle"), 0);
        cbDatabase.insertItemAt(NbBundle.getMessage(
                PropertiesDeploymentPanel.class, "MSG_db_SQLServer"), 1);
        cbDatabase.setEnabled(false);
        
        cbMatchEngine = new JComboBox();
        cbMatchEngine.insertItemAt(NbBundle.getMessage(
                PropertiesDeploymentPanel.class, "MSG_match_engine_Seebeyond"),
            0);
        //cbMatchEngine.insertItemAt(NbBundle.getMessage(
        //        PropertiesDeploymentPanel.class, "MSG_match_engine_Vality"), 1);
        cbMatchEngine.setSelectedIndex(0);
        
        cbDateFormat = new JComboBox();
        cbDateFormat.insertItemAt("MM/dd/yyyy", 0);
        cbDateFormat.insertItemAt("yyyy/MM/dd", 1);
        cbDateFormat.insertItemAt("dd/MM/yyyy", 2);
        cbDateFormat.setSelectedIndex(0);

        jLabelDatabase.setText(NbBundle.getMessage(PropertiesDeploymentPanel.class,
                "LBL_static_Database"));
        jLabelMatchEngine.setText(NbBundle.getMessage(PropertiesDeploymentPanel.class,
                "LBL_static_MatchEngine"));        
        jLabelDateFormat.setText(NbBundle.getMessage(PropertiesDeploymentPanel.class,
                "LBL_static_DateFormat"));
        
        //
        JLabel jLabelStepDescription = new JLabel();
        JLabel jLabelSourceName = new JLabel();
        JLabel jLabelListSourceSystems = new JLabel();
        jTextFieldSourceName = new JTextField();
        listModel = new DefaultListModel();
        jListSource = new JList(listModel);
        jListSource.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.LOWERED));
        
        btnSourceAdd = new JButton();
        btnSourceRemove = new JButton();

        setLayout(null);

        //setBackground(new java.awt.Color(255, 255, 255));
        jLabelStepDescription.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelStepDescription.setText(NbBundle.getMessage(PropertiesDeploymentPanel.class,
                "MSG_source_systems"));

        jLabelSourceName.setText(NbBundle.getMessage(
                PropertiesDeploymentPanel.class, "MSG_static_Name"));

        jLabelListSourceSystems.setText(NbBundle.getMessage(
                PropertiesDeploymentPanel.class, "MSG_static_Systems"));

        jTextFieldSourceName.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyReleased(java.awt.event.KeyEvent evt) {
                onTextSourceNameKeyReleased(evt);
            }
            @Override
            public void keyTyped(java.awt.event.KeyEvent evt) {
                onTextSourceNameKeyTyped(evt);
            }
        });

        btnSourceAdd.setText(NbBundle.getMessage(
                PropertiesDeploymentPanel.class, "MSG_button_Add_Source"));
        btnSourceAdd.setBorder(new javax.swing.border.BevelBorder(
                javax.swing.border.BevelBorder.RAISED));
        btnSourceAdd.setEnabled(false);
        btnSourceAdd.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sourceAddActionPerformed(evt);
                }
            });
        btnSourceAdd.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    onTextSourceNameChanged(evt);
                }
            });

        btnSourceRemove.setText(NbBundle.getMessage(
                PropertiesDeploymentPanel.class, "MSG_button_Remove"));
        btnSourceRemove.setBorder(new javax.swing.border.BevelBorder(
                javax.swing.border.BevelBorder.RAISED));
        btnSourceRemove.setEnabled(false);
        btnSourceRemove.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sourceRemoveActionPerformed(evt);
                }
            });

        
        jListSource.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
                public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                    onListSourceClicked();
                }
            });

        btnSourceAdd.setMnemonic('A');
        btnSourceRemove.setMnemonic('R');
        
        add(jLabelApplicationName);
        add(jTextFieldApplicationName, new java.awt.GridBagConstraints());
        add(jLabelDatabase);
        add(jLabelMatchEngine);
        add(jLabelDateFormat);
        add(cbDatabase);
        add(cbMatchEngine);
        add(cbDateFormat);
        add(jLabelStepDescription);
        add(jLabelSourceName);
        add(jTextFieldSourceName);
        add(jLabelListSourceSystems);
        add(jListSource);
        add(btnSourceAdd);
        add(btnSourceRemove);
        
        jLabelApplicationName.setBounds(5, 30, 80, 20);
        jTextFieldApplicationName.setBounds(90, 30, 230, 20);
//
        jLabelDatabase.setBounds(5, 55, 80, 20);
        jLabelMatchEngine.setBounds(5, 80, 80, 20);
        jLabelDateFormat.setBounds(5, 105, 80, 20);
        cbDatabase.setBounds(90, 55, 230, 20);
        cbMatchEngine.setBounds(90, 80, 230, 20);
        cbDateFormat.setBounds(90, 105, 230, 20);

        jLabelStepDescription.setBounds(5, 150, 480, 20);
        jLabelSourceName.setBounds(20, 185, 60, 20);
        jTextFieldSourceName.setBounds(90, 185, 230, 20);
        jLabelListSourceSystems.setBounds(20, 210, 60, 20);
        jListSource.setBounds(90, 210, 230, 180);
        btnSourceAdd.setBounds(325, 185, 70, 20);
        btnSourceRemove.setBounds(325, 210, 70, 20);

        cbDatabase.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent e) {
                    setModified();
                }
            });
        cbMatchEngine.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent e) {
                    setModified();
                }
            });
        cbDateFormat.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent e) {
                    setModified();
                }
            });
        jListSource.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    setModified();                    
                }
            });            
    }

    private void onTextSourceNameKeyTyped(java.awt.event.KeyEvent evt) {
        if (evt.getKeyChar() == ' ') {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }
    }
    
    private void onTextSourceNameKeyReleased(java.awt.event.KeyEvent evt) {
        String newSource = jTextFieldSourceName.getText();
        btnSourceAdd.setEnabled(newSource.length() > 0);
    }

    private void onTextSourceNameChanged(java.beans.PropertyChangeEvent evt) {
        //btnSourceAdd.setEnabled(true);
    }

    private void onListSourceClicked() {
        btnSourceRemove.setEnabled(true);
    }

    private void sourceRemoveActionPerformed(java.awt.event.ActionEvent evt) {
        int[] itemsBeingRemoved = jListSource.getSelectedIndices();
        int length = itemsBeingRemoved.length;

        for (int index = length - 1; (index >= 0) && (index < length);
                index--) {
            int i = itemsBeingRemoved[index];
            listModel.removeElementAt(i);
        }

        btnSourceRemove.setEnabled(false);

        setSourceSystemsModified(true);        
    }

    private void sourceAddActionPerformed(java.awt.event.ActionEvent evt) {
        // Add your handling code here:
        String newSource = jTextFieldSourceName.getText();
        int size = listModel.getSize();
        for (int i = 0; i < size; i++) {
            if (listModel.getElementAt(i).equals(newSource)) {
                Toolkit.getDefaultToolkit().beep();

                String msg = NbBundle.getMessage(PropertiesDeploymentPanel.class, "MSG_Source_Exists", newSource);
                NotifyDescriptor desc = new NotifyDescriptor.Message(msg);
                DialogDisplayer.getDefault().notify(desc);

                return;
            }
        }

        listModel.addElement(newSource);

        jTextFieldSourceName.setText("");
        //jTextFieldSourceName.requestFocus();
        btnSourceAdd.setEnabled(false);
        setSourceSystemsModified(true);
    }

    /**
     *@return count of Source Systems
     */
    public int getSoureSystemsCount() {
        return listModel.getSize();
    }

    /** for eIndex50.xml
     *@return xml string for Source Systems
     */
    public String getSoureSystemsList() {
        String sourceSystems = "";
        int cnt = listModel.getSize();

        for (int i = 0; i < cnt; i++) {
            if (i != 0) {
                sourceSystems += "\t";
            }

            sourceSystems += listModel.getElementAt(i);
        }

        return sourceSystems;
    }

    /** set Source Systems
     *@param  alSourceSystems Source Systems
     */
    private void setSourceSystems(ArrayList alSourceSystems) {
        this.alSourceSystems = alSourceSystems;        
        if ((alSourceSystems != null) && (alSourceSystems.size() > 0)) {
            listModel.removeAllElements();

            int i = 0;
            Iterator it = alSourceSystems.iterator();

            while (it.hasNext()) {
                String s = (String) it.next();
                listModel.addElement(s);
            }
        }
    }

    /** set Master Index Application name for panel title
     *@param  applicationName
     */
    private void setApplicationName(String applicationName) {
        this.applicationName = applicationName;           
        jTextFieldApplicationName.setText(applicationName);
    }

    /** set Database
     *@param database database name
     */
    private void setDatabase(String database) {
        this.database = database;
        if (this.database.equals("oracle")) {   // eIndex
            this.database = "Oracle";
        }
        cbDatabase.setSelectedItem(database);
    }

    /**
     *@return Database
     */
    public String getDatabase() {
        String database = (String) cbDatabase.getSelectedItem();
        if (database == null) {
            database = "Oracle";
        }
        return database;
    }

    /** set Match Engine
     *@param matchEngine Match Engine
     */
    private void setMatchEngine(String matchEngine) {
        this.matchEngine = matchEngine;        
        cbMatchEngine.setSelectedItem(matchEngine);
    }

    /**
     *@return Match Engine
     */
    public static String getMatchEngine() {
        String matchEngineName = cbMatchEngine.getSelectedItem().toString();
        if (matchEngineName.equals("Sun Match Engine")){
            matchEngineName = "SeeBeyond" ;
        }
        return matchEngineName;
    }

    private String getMatchEngineOriginal() {
        return cbMatchEngine.getSelectedItem().toString();
    }

    /**
     *@return Date Format
     */
    public String getDateFormat() {
        return cbDateFormat.getSelectedItem().toString();
    }

    /** set Date Format
     *@param dateFormat Date Format
     */
    private void setDateFormat(String dateFormat) {
        this.dateFormat = dateFormat;        
        cbDateFormat.setSelectedItem(dateFormat);
    }
    
    private void setSourceSystemsModified(boolean flag) {
        this.mUpdateType.setModified(flag);
        setModified();
    }
    
    public void setModified() {
        if (mEindexObject != null) {
            mEindexObject.setModified(isModified());
        }
    }
    
    public boolean isModified() {
        boolean modified = !this.getDatabase().equals(this.database) ||
                            !this.getMatchEngineOriginal().equals(this.matchEngine) ||
                            !this.getDateFormat().equals(this.dateFormat) ||
                            this.mUpdateType.isModified();
        
        return modified;
    }
}
