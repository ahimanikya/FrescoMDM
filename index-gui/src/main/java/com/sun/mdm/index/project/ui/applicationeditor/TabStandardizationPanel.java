/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */
package com.sun.mdm.index.project.ui.applicationeditor;

import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

import org.openide.util.NbBundle;
import org.openide.NotifyDescriptor;
import org.openide.DialogDisplayer;

import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import com.sun.mdm.index.project.ui.wizards.generator.ConfigGenerator;
import com.sun.mdm.index.project.ui.wizards.generator.MatchType;
import com.sun.mdm.index.parser.MatchFieldDef;
import com.sun.mdm.index.parser.MatchFieldDef.FreeFormGroup;
import com.sun.mdm.index.project.ui.applicationeditor.standardization.StandardizationTypeAddDialog;
import com.sun.mdm.index.project.EviewApplication;

public class TabStandardizationPanel extends javax.swing.JPanel {
    private JTable mTblStandardizationTypes;
    private EviewEditorMainApp mEviewEditorMainApp;
    private EviewApplication mEviewApplication;
    private MatchFieldDef mMatchFieldDef;
    private Map mMapSourceFields = new HashMap();   // key:standardizationType
    private Map mMapSourceFieldsRestore = new HashMap();   // key:standardizationType
    private Map mMapFieldIDs = new HashMap();       // key:standardizationType
    private Map mMapFieldIDsRestore = new HashMap();       // key:standardizationType
    private Map mMapTargetFields = new HashMap();   // key:standardizationType
    private Map mMapTargetFieldsRestore = new HashMap();   // key:standardizationType
    private Map mMapFieldIDsPerTargetFieldRestore = new HashMap(); // key:targetField see TargetMapping
    private Map mMapAllFieldIDsPerTargetField = new HashMap(); // key:standardizationType entry:mapFieldIDsPerTargetField
    private boolean bCheckedOut;
    
    /** Creates new form TabStandardizationPanel */
    public TabStandardizationPanel(EviewEditorMainApp eviewEditorMainApp, EviewApplication eviewApplication) {
        mEviewEditorMainApp = eviewEditorMainApp;
        mEviewApplication = eviewApplication;
        bCheckedOut = eviewEditorMainApp.isCheckedOut();
        mMatchFieldDef = mEviewApplication.getMatchFieldDef(false);
        initComponents();
        createStandardizationTable();
        mTblStandardizationTypes.setEnabled(bCheckedOut);
        btnAdd.setEnabled(bCheckedOut && mTblStandardizationTypes.getRowCount() < 2);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPaneTable = new javax.swing.JScrollPane();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/Bundle"); // NOI18N
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), bundle.getString("LBL_Standardization_Types"))); // NOI18N

        jScrollPaneTable.setPreferredSize(new java.awt.Dimension(0, 0));

        btnAdd.setText(bundle.getString("MSG_button_Add")); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText(bundle.getString("MSG_button_Remove")); // NOI18N
        btnRemove.setEnabled(false);
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnEdit.setText(bundle.getString("MSG_button_Edit")); // NOI18N
        btnEdit.setEnabled(false);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(4, 4, 4)
                .add(jScrollPaneTable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 540, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jPanel1Layout.createSequentialGroup()
                .add(314, 314, 314)
                .add(btnAdd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(btnRemove, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(btnEdit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jScrollPaneTable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnAdd)
                    .add(btnRemove)
                    .add(btnEdit)))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 560, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 290, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        int iSelectedRow = mTblStandardizationTypes.getSelectedRow();
        TableStandardizationTypes model = (TableStandardizationTypes) mTblStandardizationTypes.getModel();
        String standardizationType = (String) model.getValueAt(iSelectedRow,  model.iColStandardizationType);
        String sourceFields = (String) model.getValueAt(iSelectedRow, model.iColSourceFields);
        String matchEngine = PropertiesDeploymentPanel.getMatchEngine();
        StandardizationTypeAddDialog dlg = new StandardizationTypeAddDialog(mMapSourceFields, 
                                                mMapFieldIDs, 
                                                mMapTargetFields, 
                                                (Map) mMapAllFieldIDsPerTargetField.get(standardizationType), 
                                                matchEngine, 
                                                mEviewEditorMainApp.getEviewEditorMainPanel().getEntityTree(true), 
                                                mMatchFieldDef, 
                                                standardizationType, true);

        dlg.setVisible(true);
        mEviewEditorMainApp.getEviewEditorMainPanel().setEntityTreePane();        
        if (dlg.isModified()) {
            //update mTblStandardizationTypes
            sourceFields = "";
            ArrayList alSourceFieldsSelected = dlg.getSelectedSourceFields();

            for (int i=0; i < alSourceFieldsSelected.size(); i++) {
                if (sourceFields.equals("")) {
                    sourceFields = (String) alSourceFieldsSelected.get(i) + ";";
                } else {
                    sourceFields += (String) alSourceFieldsSelected.get(i) + ";";
                }
            }
            model.setValueAt(sourceFields, iSelectedRow, model.iColSourceFields);
            //TODO Replace the FreeFormGroup
            FreeFormGroup group = mMatchFieldDef.getFreeFormGroup(standardizationType);
            // replace unstandardized-source-fields
            group.setDomainSelector(dlg.getDomainSelector());
            group.setLocaleFieldName(dlg.getLocaleFieldName() != null ? dlg.getLocaleFieldName() : "");
            group.setLocaleCodes(dlg.getLocaleCodeRows());
            group.setUnstandardizedSourceFields(alSourceFieldsSelected);
            group.setTargetMappings(null);
            // then replace the list of target-mapping in standardization-targets
            Map mapFieldIDsPerTargetField = (Map) mMapAllFieldIDsPerTargetField.get(standardizationType);
            Set keySet = mapFieldIDsPerTargetField.keySet();
            if (keySet!=null) {
                Iterator it = keySet.iterator();
                while (it.hasNext()) {
                    String fieldName = (String) it.next();
                    ArrayList alFieldIDsPerTargetField = (ArrayList) mapFieldIDsPerTargetField.get(fieldName);
                    for (int k=0; k < alFieldIDsPerTargetField.size(); k++) {
                        String fieldId = (String) alFieldIDsPerTargetField.get(k);
                        // add addTargetMapping to the group
                        mMatchFieldDef.addTargetMappingFreeFormGroup(standardizationType, fieldId, fieldName);
                    }
                }
            }
            
            mMatchFieldDef.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
            //loadMaps();
        } else {
            restoreMaps();
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int rs[] = mTblStandardizationTypes.getSelectedRows();
        int length = rs.length;
        String prompt = (length == 1) ? NbBundle.getMessage(TabStandardizationPanel.class, "MSG_Confirm_Remove_Row_Prompt")
                                        : NbBundle.getMessage(TabStandardizationPanel.class, "MSG_Confirm_Remove_Rows_Prompt");

        NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                                 prompt, 
                                 NbBundle.getMessage(TabStandardizationPanel.class, "MSG_Confirm_Remove_Row_Title"), 
                                 NotifyDescriptor.YES_NO_OPTION);
        if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.YES_OPTION) {
            TableStandardizationTypes model = (TableStandardizationTypes) mTblStandardizationTypes.getModel();
            for (int i=length - 1; i>=0 && i < length; i--) {
                int j = rs[i];
                String standardizationType = (String) model.getValueAt(j, model.iColStandardizationType);
                mMatchFieldDef.deleteFreeFormGroup(standardizationType);
                mMapAllFieldIDsPerTargetField.remove(standardizationType);
                mMapSourceFields.remove(standardizationType);
                model.removeRow(j);
            }
            btnAdd.setEnabled(bCheckedOut && model.getRowCount() < 2); // For now only BusinessName and Address
            btnRemove.setEnabled(false);
            btnEdit.setEnabled(false);
            mMatchFieldDef.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
        }

    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String matchEngine = PropertiesDeploymentPanel.getMatchEngine();
        Map mapFieldIDsPerTargetField = new HashMap();
        StandardizationTypeAddDialog dlg = new StandardizationTypeAddDialog(mMapSourceFields, mMapFieldIDs, mMapTargetFields, mapFieldIDsPerTargetField, matchEngine, mEviewEditorMainApp.getEviewEditorMainPanel().getEntityTree(true), mMatchFieldDef, null, false);
        dlg.setVisible(true);
        mEviewEditorMainApp.getEviewEditorMainPanel().setEntityTreePane();        
        if (dlg.isModified()) {
            String standardizationType = dlg.getStandardizationType();
            //update mTblStandardizationTypes
            mTblStandardizationTypes.clearSelection();
            String sourceFields = "";
            ArrayList alSourceFieldsSelected = dlg.getSelectedSourceFields();
            for (int i=0; i < alSourceFieldsSelected.size(); i++) {
                if (sourceFields.equals("")) {
                    sourceFields = (String) alSourceFieldsSelected.get(i) + ";";
                } else {
                    sourceFields += (String) alSourceFieldsSelected.get(i) + ";";
                }
            }
            StandardizationTypeRow r = new StandardizationTypeRow(dlg.getStandardizationType(), sourceFields);
            TableStandardizationTypes model = (TableStandardizationTypes) mTblStandardizationTypes.getModel();
            model.addRow(r);
            int iSelectedRow = model.getRowCount() - 1;
            mTblStandardizationTypes.clearSelection();
            mTblStandardizationTypes.addRowSelectionInterval(iSelectedRow, iSelectedRow);
            mTblStandardizationTypes.setEditingRow(iSelectedRow);
            btnAdd.setEnabled(bCheckedOut && model.getRowCount() < 2); // For now only BusinessName and Address
            btnEdit.setEnabled(bCheckedOut);
            btnRemove.setEnabled(bCheckedOut);
            //TODO Add a FreeFormGroup
            // save TargetMappings
            FreeFormGroup group = mMatchFieldDef.createFreeFormGroup(standardizationType);
            // replace unstandardized-source-fields
            group.setDomainSelector(dlg.getDomainSelector());
            group.setLocaleFieldName(dlg.getLocaleFieldName() != null ? dlg.getLocaleFieldName() : "");
            group.setLocaleCodes(dlg.getLocaleCodeRows());
            group.setUnstandardizedSourceFields(alSourceFieldsSelected);
            group.setTargetMappings(null);
            // then replace the list of target-mapping in standardization-targets
            mMapAllFieldIDsPerTargetField.put(standardizationType, mapFieldIDsPerTargetField);
            Set keySet = mapFieldIDsPerTargetField.keySet();
            if (keySet != null) {
                Iterator it = keySet.iterator();
                while (it.hasNext()) {
                    String fieldName = (String) it.next();
                    ArrayList alFieldIDsPerTargetField = (ArrayList) mapFieldIDsPerTargetField.get(fieldName);
                    for (int k=0; k < alFieldIDsPerTargetField.size(); k++) {
                        String fieldId = (String) alFieldIDsPerTargetField.get(k);
                        // add addTargetMapping to the group
                        mMatchFieldDef.addTargetMappingFreeFormGroup(standardizationType, fieldId, fieldName);
                    }
                }
            }

            mMatchFieldDef.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
        } else {
            restoreMaps();
        }

    }//GEN-LAST:event_btnAddActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRemove;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPaneTable;
    // End of variables declaration//GEN-END:variables
    
    private void clearMaps() {
        mMapSourceFields.clear();
        mMapSourceFieldsRestore.clear();
        mMapFieldIDs.clear();
        mMapFieldIDsRestore.clear();
        mMapTargetFields.clear();
        mMapTargetFieldsRestore.clear();
        mMapFieldIDsPerTargetFieldRestore.clear();
        mMapAllFieldIDsPerTargetField.clear();
    }
    
    private void loadMaps() {
        clearMaps();
        
        String matchEngine = PropertiesDeploymentPanel.getMatchEngine();
        MatchType[] mMatchTypes;
        mMatchTypes = ConfigGenerator.getMatchTypes(matchEngine);
        for (int i = 0; i < mMatchTypes.length; i++) {
            String standardizationType = mMatchTypes[i].getMatchTypeID();
            ArrayList alSourceFields = getSourceFieldsFromMatchFieldDef(standardizationType);
            mMapSourceFields.put(standardizationType, alSourceFields);
            ArrayList alSourceFieldsRestore = new ArrayList();
            if (alSourceFields != null) {
                alSourceFieldsRestore.addAll(alSourceFields);
            }
            mMapSourceFieldsRestore.put(standardizationType, alSourceFieldsRestore);
            
            ArrayList alFieldIDs = getFieldIDsFromMatchFieldDef(standardizationType);
            mMapFieldIDs.put(standardizationType, alFieldIDs);
            ArrayList alFieldIDsRestore = new ArrayList();
            if (alFieldIDs != null) {
                alFieldIDsRestore.addAll(alFieldIDs);
            }
            mMapFieldIDsRestore.put(standardizationType, alFieldIDsRestore);
            
            ArrayList alTargetFields = mMatchFieldDef.getMatchOutputFields(standardizationType, null);
            mMapTargetFields.put(standardizationType, alTargetFields);
            ArrayList alTargetFieldsRestore = new ArrayList();
            if (alTargetFields != null) {
                alTargetFieldsRestore.addAll(alTargetFields);
            }
            mMapTargetFieldsRestore.put(standardizationType, alTargetFieldsRestore);
            
            ArrayList alGroups = mMatchFieldDef.getFreeFormGroups();
            for (int j=0; alGroups != null && j < alGroups.size(); j++) {
                MatchFieldDef.Group group = (MatchFieldDef.Group) alGroups.get(j);
                if (group.getStandardizationType().equals(standardizationType)) {
                    Map mapFieldIDsPerTargetField = new HashMap();
                    ArrayList alTargetMappings = group.getTargetMappings();
                    for (int k=0; k < alTargetFields.size(); k++) {
                        String fieldName = (String) alTargetFields.get(k);
                        ArrayList alFieldIDsPerTargetField = new ArrayList();
                        for (int l=0; alTargetMappings != null && l < alTargetMappings.size(); l++) {
                            MatchFieldDef.TargetMapping targetMapping = (MatchFieldDef.TargetMapping) alTargetMappings.get(l);
                            if (targetMapping.getFieldName().equals(fieldName)) {
                                alFieldIDsPerTargetField.add((String) targetMapping.getFieldId());
                            }
                        }
                        mapFieldIDsPerTargetField.put(fieldName, alFieldIDsPerTargetField);
                        ArrayList alFieldIDsPerTargetFieldRestore = new ArrayList();
                        if (alFieldIDsPerTargetField != null) {
                            alFieldIDsPerTargetFieldRestore.addAll(alFieldIDsPerTargetField);
                        }
                        mMapFieldIDsPerTargetFieldRestore.put(fieldName, alFieldIDsPerTargetFieldRestore);
                    }
                    mMapAllFieldIDsPerTargetField.put(standardizationType, mapFieldIDsPerTargetField);
                }
            }
        }
    }
    
    private void restoreMaps() {
        mMapSourceFields.clear();
        mMapSourceFields.putAll(mMapSourceFieldsRestore);
        mMapFieldIDs.clear();
        mMapFieldIDs.putAll(mMapFieldIDsRestore);
        mMapTargetFields.clear();
        mMapTargetFields.putAll(mMapTargetFieldsRestore);
        //mMapFieldIDsPerTargetField.clear();
        //mMapFieldIDsPerTargetField.putAll(mMapFieldIDsPerTargetFieldRestore);
    }
    
    private ArrayList getSourceFieldsFromMatchFieldDef(String standardizationType) {
        ArrayList alRet = null;
        ArrayList alGroups = mMatchFieldDef.getFreeFormGroups();
        for (int i=0; alGroups != null && i < alGroups.size(); i++) {
            MatchFieldDef.Group group = (MatchFieldDef.Group) alGroups.get(i);
            if (group.getStandardizationType().equals(standardizationType)) {
                alRet = group.getUnstandardizedSourceFields();
                break;
            }
        }
        return alRet;
    }
    
    private ArrayList getFieldIDsFromMatchFieldDef(String standardizationType) {
        ArrayList alRet = new ArrayList();
        ArrayList alGroups = mMatchFieldDef.getFreeFormGroups();
        for (int i=0; alGroups != null && i < alGroups.size(); i++) {
            MatchFieldDef.Group group = (MatchFieldDef.Group) alGroups.get(i);
            if (group.getStandardizationType().equals(standardizationType)) {
                ArrayList alTargetMappings = group.getTargetMappings();
                for (int k=0; alTargetMappings != null && k < alTargetMappings.size(); k++) {
                    MatchFieldDef.TargetMapping targetMapping = (MatchFieldDef.TargetMapping) alTargetMappings.get(k);
                    alRet.add(targetMapping.getFieldId());
                }
                break;
            }
        }
        return alRet;
    }
    
    void createStandardizationTable() {
        // load standardizationTypesModel
        ArrayList rows = new ArrayList();
        ArrayList alGroups = mMatchFieldDef.getFreeFormGroups();
        for (int i=0; alGroups != null && i < alGroups.size(); i++) {
            MatchFieldDef.Group group = (MatchFieldDef.Group) alGroups.get(i);
            ArrayList alSourceFieldNames = group.getUnstandardizedSourceFields();
            String sourceFields = null;
            for (int j=0; alSourceFieldNames != null && j < alSourceFieldNames.size(); j++) {
                if (sourceFields == null) {
                    sourceFields = (String) alSourceFieldNames.get(j);
                } else {
                    sourceFields += ";" + (String) alSourceFieldNames.get(j);
                }
            }
            if (sourceFields != null) {
                StandardizationTypeRow r = new StandardizationTypeRow(group.getStandardizationType(), sourceFields);
                rows.add(r);
            }
        }
        TableStandardizationTypes model = new TableStandardizationTypes(rows);
        mTblStandardizationTypes = new JTable(model);
        mTblStandardizationTypes.getTableHeader().setReorderingAllowed(false);
        mTblStandardizationTypes.getColumnModel().getColumn(0).setPreferredWidth(130); 
        mTblStandardizationTypes.getColumnModel().getColumn(1).setPreferredWidth(380);        
        mTblStandardizationTypes.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    if (evt.getClickCount() == 2) {
                        if (bCheckedOut) {
                            btnEditActionPerformed(null);
                        }
                    } else {
                        btnRemove.setEnabled(bCheckedOut);
                        btnEdit.setEnabled(bCheckedOut && mTblStandardizationTypes.getSelectedRowCount() == 1);
                    }
                }
            });
        
        loadMaps();
        jScrollPaneTable.setViewportView(mTblStandardizationTypes);
        btnAdd.setEnabled(bCheckedOut && model.getRowCount() < 2); // For now only BusinessName and Address
    }
    
    /* Called by EntityNode when field name changed
     *@param oldName
     *@param newName
     *
     */
    public boolean updateReferencedField(String oldNodeNameMefa, String newName) {
        boolean bRet = false;
        String oldValue;
        String newValue;
        int index;
        //String oldNameRegex = oldNodeNameMefa;
        //to escape [*] in oldName string for replaceAll method.

        String oldNameRegex = oldNodeNameMefa.replaceAll("\\[", "\\\\["); 
        oldNameRegex = oldNameRegex.replaceAll("\\*","\\\\*");
        oldNameRegex = oldNameRegex.replaceAll("\\]","\\\\]");

        TableStandardizationTypes model = (TableStandardizationTypes) mTblStandardizationTypes.getModel();
        for (int i=0; i < model.getRowCount(); i++) {
            boolean bUpdate = false;
            String sourceFields = (String) model.getValueAt(i, model.iColSourceFields);
            
            index = sourceFields.indexOf(oldNodeNameMefa);
            if (sourceFields.equals(oldNodeNameMefa) || 
                (index >= 0 &&
                 sourceFields.length() > oldNodeNameMefa.length() &&
                 (index + oldNodeNameMefa.length() < sourceFields.length() &&
                  (sourceFields.charAt(index + oldNodeNameMefa.length()) == '.' ||
                   sourceFields.charAt(index + oldNodeNameMefa.length()) == ';')))) {
                newValue = sourceFields.replaceAll(oldNameRegex, newName);
                model.setValueAt(newValue, i, model.iColSourceFields);
                bUpdate = true;
                bRet = true;
            }
        }
        
        if (true) { //bRet) {
            mMatchFieldDef.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
            // update mMatchFieldDef...
            ArrayList alFreeFormGroups = mMatchFieldDef.getFreeFormGroups();
            for (int j=0; alFreeFormGroups != null && j < alFreeFormGroups.size(); j++) {
                FreeFormGroup group = (FreeFormGroup) alFreeFormGroups.get(j);

                if (group != null) {
                    oldValue = group.getLocaleFieldName();
                    if (oldValue != null) {
                        index = oldValue.indexOf(oldNodeNameMefa);
                        if (oldValue.equals(oldNodeNameMefa) || 
                            (index >= 0 &&
                             oldValue.length() > oldNodeNameMefa.length() &&
                             (index + oldNodeNameMefa.length() < oldValue.length() &&
                              (oldValue.charAt(index + oldNodeNameMefa.length() - 1) == '.' ||
                                oldValue.charAt(index + oldNodeNameMefa.length() - 1) == ';')))) {
                            bRet = true;
                            newValue = oldValue.replaceAll(oldNameRegex, newName);
                            group.setLocaleFieldName(newValue);
                        }
                    }
                    
                    ArrayList alTargetMapping = group.getTargetMappings();
                    if (alTargetMapping != null && alTargetMapping.size() > 0) {
                        for (int m=0; m < alTargetMapping.size(); m++) {
                            MatchFieldDef.TargetMapping targetMapping = (MatchFieldDef.TargetMapping) alTargetMapping.get(m);
                            oldValue = targetMapping.getFieldName();
                            index = oldValue.indexOf(oldNodeNameMefa);
                            if (oldValue.equals(oldNodeNameMefa) || 
                                (index >= 0 &&
                                 oldValue.length() > oldNodeNameMefa.length() &&
                                 (index + oldNodeNameMefa.length() < oldValue.length() &&
                                  (oldValue.charAt(index + oldNodeNameMefa.length() - 1) == '.' ||
                                    oldValue.charAt(index + oldNodeNameMefa.length() - 1) == ';')))) {
                                bRet = true;
                                newValue = oldValue.replaceAll(oldNameRegex, newName);
                                targetMapping.setFieldName(newValue);
                            }
                        }
                    }
                    ArrayList alUnstandardizedSourceFieldNames = group.getUnstandardizedSourceFields();
                    if (alUnstandardizedSourceFieldNames != null && alUnstandardizedSourceFieldNames.size() > 0) {
                        for (int m=0; m < alUnstandardizedSourceFieldNames.size(); m++) {
                            oldValue = (String) alUnstandardizedSourceFieldNames.get(m);
                            index = oldValue.indexOf(oldNodeNameMefa);
                            if (oldValue.equals(oldNodeNameMefa) || 
                                (index >= 0 &&
                                 oldValue.length() > oldNodeNameMefa.length() &&
                                 (index + oldNodeNameMefa.length() < oldValue.length() &&
                                  (oldValue.charAt(index + oldNodeNameMefa.length() - 1) == '.' ||
                                    oldValue.charAt(index + oldNodeNameMefa.length() - 1) == ';')))) {
                                bRet = true;
                                newValue = oldValue.replaceAll(oldNameRegex, newName);
                                alUnstandardizedSourceFieldNames.add(newValue);
                                alUnstandardizedSourceFieldNames.remove(oldValue);
                            }
                        }
                    }
                }
            }
            loadMaps();
        }
        return bRet;
    }
    
    /* Called by EntityNode when field removed
     *@param fieldNameMefa
     *
     */
    public boolean removeReferencedField(String fieldNameMefa) {
        boolean bRet = false;
        String newValue;
        int index;
         
        TableStandardizationTypes model = (TableStandardizationTypes) mTblStandardizationTypes.getModel();
        for (int i=model.getRowCount() - 1; i>=0 && i < model.getRowCount(); i--) {            
            boolean bUpdate = false;
            String sourceFields = (String) model.getValueAt(i, model.iColSourceFields);
            if (sourceFields.equals(fieldNameMefa)) {
                model.removeRow(i);
                bUpdate = true;
            } else {
                index = sourceFields.indexOf(fieldNameMefa);
                if ((index >= 0 &&
                    sourceFields.length() > fieldNameMefa.length() &&
                    (index + fieldNameMefa.length() < sourceFields.length() &&
                     (sourceFields.charAt(index + fieldNameMefa.length()) == '.' ||
                      sourceFields.charAt(index + fieldNameMefa.length()) == ';')))) {
                    if (index == 0) {
                        newValue = sourceFields.substring(fieldNameMefa.length() + 1);
                    } else {
                        newValue = sourceFields.substring(0, index - 1) + sourceFields.substring(index + fieldNameMefa.length());
                    }
                    model.setValueAt(newValue, i, model.iColSourceFields);
                    bUpdate = true;
                }
            }
            if (bUpdate) {
                bRet = true;
            }
        }
        
        if (true) {
            btnAdd.setEnabled(bCheckedOut && model.getRowCount() < 2); // For now only BusinessName and Address
            // update mMatchFieldDef...
            ArrayList alFreeFormGroups = mMatchFieldDef.getFreeFormGroups();
            for (int j=0; alFreeFormGroups != null && j < alFreeFormGroups.size(); j++) {
                FreeFormGroup group = (FreeFormGroup) alFreeFormGroups.get(j);

                if (group != null) {
                    if (group.getLocaleFieldName() != null && group.getLocaleFieldName().equals(fieldNameMefa)) {
                        group.setLocaleFieldName("");
                    }

                    ArrayList alTargetMapping = group.getTargetMappings();
                    if (alTargetMapping != null && alTargetMapping.size() > 0) {
                        for (int m=alTargetMapping.size() - 1; m >= 0; m--) {
                            MatchFieldDef.TargetMapping targetMapping = (MatchFieldDef.TargetMapping) alTargetMapping.get(m);
                            if (targetMapping.getFieldName().equals(fieldNameMefa)) {
                                alTargetMapping.remove(targetMapping);
                                bRet = true;
                            }
                        }
                    }
                    ArrayList alUnstandardizedSourceFieldNames = group.getUnstandardizedSourceFields();
                    if (alUnstandardizedSourceFieldNames != null && alUnstandardizedSourceFieldNames.size() > 0) {
                        for (int m=alUnstandardizedSourceFieldNames.size() - 1; m >= 0 ; m--) {
                            String oldValue = (String) alUnstandardizedSourceFieldNames.get(m);
                            index = oldValue.indexOf(fieldNameMefa);
                            if (oldValue.equals(fieldNameMefa) || 
                                (index >= 0 &&
                                 oldValue.length() > fieldNameMefa.length() &&
                                 (index + fieldNameMefa.length() < oldValue.length() &&
                                  (oldValue.charAt(index + fieldNameMefa.length() - 1) == '.' ||
                                    oldValue.charAt(index + fieldNameMefa.length() - 1) == ';')))) {
                                bRet = true;
                                alUnstandardizedSourceFieldNames.remove(oldValue);
                            }
                        }
                    }
                }
            }

        }
        if (bRet) {
            mMatchFieldDef.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
            loadMaps();
        }
        return bRet;
    }

    // Table model for Standardization Types
    class TableStandardizationTypes extends AbstractTableModel {
        private	String columnNames [] = {NbBundle.getMessage(TabStandardizationPanel.class, "LBL_Standardization_Type"),
                                         NbBundle.getMessage(TabStandardizationPanel.class, "LBL_SourceFields")
                                        };
        ArrayList standardizationTypeRows;
        final int iColStandardizationType = 0;
        final int iColSourceFields = 1;
        
        TableStandardizationTypes(ArrayList rows) {
            standardizationTypeRows = rows;
        }
        
        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            if (standardizationTypeRows != null) {
                return standardizationTypeRows.size();
            }
            return 0;
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            if (standardizationTypeRows != null) {
                StandardizationTypeRow singleRow = (StandardizationTypeRow) standardizationTypeRows.get(row);
                if (singleRow != null) {
                    switch (col) {
                        case iColStandardizationType:
                            return singleRow.getStandardizationType();                            
                        case iColSourceFields:
                            return singleRow.getSourceFields();                            
                        default:
                            return null;
                    }
                }
            }
            return null;
        }

        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        /*
         * Don't need to implement this method unless your table's
         * editable.
         */
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            return false;
        }

        /*
         * Don't need to implement this method unless your table's
         * data can change.
         */
        public void setValueAt(Object value, int row, int col) {
            if (standardizationTypeRows != null) {
                StandardizationTypeRow singleRow = (StandardizationTypeRow) standardizationTypeRows.get(row);
                if (col == iColSourceFields) {
                    singleRow.setSourceFields((String) value);
                }
            }
            fireTableCellUpdated(row, col);
        }
        
        public void addRow(StandardizationTypeRow singleRow) {
            standardizationTypeRows.add(singleRow);
            this.fireTableRowsInserted(0, getRowCount());
        }
        
        public void removeRow(int index) {
            standardizationTypeRows.remove(index);
            this.fireTableRowsDeleted(index, index);
        }
    }
    
    class StandardizationTypeRow {
        private String type;
        private String sourceFields;

        StandardizationTypeRow(String type, String sourceFields) {
            this.type = type;
            this.sourceFields = sourceFields;
        }
        
        public String getStandardizationType() {
            return type;
        }

        public String getSourceFields() {
            return sourceFields;
        }

        public void setStandardizationType(String type) {
            this.type = type;
        }

        public void setSourceFields(String sourceFields) {
            this.sourceFields = sourceFields;
        }
    }
}
