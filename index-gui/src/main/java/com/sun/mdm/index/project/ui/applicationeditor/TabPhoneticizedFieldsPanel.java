/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */
package com.sun.mdm.index.project.ui.applicationeditor;

import javax.swing.JTable;
import javax.swing.JComboBox;
import javax.swing.table.AbstractTableModel;
import java.util.ArrayList;
import org.openide.NotifyDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.NbBundle;

import com.sun.mdm.index.parser.MatchFieldDef;
import com.sun.mdm.index.parser.MatchFieldDef.Encoder;
import com.sun.mdm.index.project.ui.applicationeditor.standardization.PhoneticizeFieldEditDialog;
import com.sun.mdm.index.project.ui.applicationeditor.standardization.PhoneticEncoderEditDialog;
import com.sun.mdm.index.project.EviewApplication;

public class TabPhoneticizedFieldsPanel extends javax.swing.JPanel {
    private EviewEditorMainApp mEviewEditorMainApp;
    private EviewApplication mEviewApplication;
    private JTable mTblEncoders;   
    private JTable mTblPhoneticizedFields;   
    MatchFieldDef mMatchFieldDef;
    private boolean bCheckedOut;
     
    /** Creates a new instance of TabPhoneticizedFieldsPanel */
    /* This class handles <phoneticize-fields> and <PhoneticEncodersConfig> segments in mefa.xml
     * mMatchFieldDef will contain all info needed to write the segments when modified
     * In: mMatchFieldDef.getPhoneticizeFields()
     *     mMatchFieldDef.getPhoneticEncodersConfig()
     * Out:mMatchFieldDef
     * Construct ArrayList of MatchFieldDef.PhoneticizeField
     * public class PhoneticizeField {
     *   String sourceFieldName; // Company.CompanyName_Name
     *   String targetFieldId;   // Company.CompanyName_NamePhon
     *   String encodingType;    // NYSIIS, Soundex
     * }
     */    
    public TabPhoneticizedFieldsPanel(EviewEditorMainApp eviewEditorMainApp, EviewApplication eviewApplication) {
        mEviewEditorMainApp = eviewEditorMainApp;
        mEviewApplication = eviewApplication;
        bCheckedOut = eviewEditorMainApp.isCheckedOut();
        mMatchFieldDef = mEviewApplication.getMatchFieldDef(false);

        initComponents();
        createPhoneticizedFieldTable();
        createEncoderTable();
        mTblPhoneticizedFields.setEnabled(bCheckedOut);
        mTblEncoders.setEnabled(bCheckedOut);
        btnAddPhoneticizedFields.setEnabled(bCheckedOut);
        btnAddEncoder.setEnabled(bCheckedOut);
    }
        
    /** Creates new form TabPhoneticizedFieldsPanel */
    public TabPhoneticizedFieldsPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jScrollPaneTable = new javax.swing.JScrollPane();
        btnAddPhoneticizedFields = new javax.swing.JButton();
        btnAddPhoneticizedFields.setMnemonic('A');
        btnRemovePhoneticizedFields = new javax.swing.JButton();
        btnRemovePhoneticizedFields.setMnemonic('R');
        btnEditPhoneticizedFields = new javax.swing.JButton();
        btnEditPhoneticizedFields.setMnemonic('E');
        jPanel2 = new javax.swing.JPanel();
        jScrollPaneEncoders = new javax.swing.JScrollPane();
        btnAddEncoder = new javax.swing.JButton();
        btnAddEncoder.setMnemonic('d');
        btnRemoveEncoder = new javax.swing.JButton();
        btnRemoveEncoder.setMnemonic('m');
        btnEditEncoder = new javax.swing.JButton();
        btnEditEncoder.setMnemonic('t');

        setLayout(null);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/Bundle").getString("LBL_Phoneticized_Fields")));
        jScrollPaneTable.setPreferredSize(new java.awt.Dimension(0, 0));
        jPanel1.add(jScrollPaneTable);
        jScrollPaneTable.setBounds(10, 20, 540, 220);

        btnRemovePhoneticizedFields.setEnabled(false);
        btnRemovePhoneticizedFields.setText(java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/Bundle").getString("MSG_button_Remove"));
        btnRemovePhoneticizedFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovePhoneticizedFieldsActionPerformed(evt);
            }
        });

        jPanel1.add(btnRemovePhoneticizedFields);
        btnRemovePhoneticizedFields.setBounds(390, 250, 80, 25);
        
        btnAddPhoneticizedFields.setText(java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/Bundle").getString("MSG_button_Add"));
        btnAddPhoneticizedFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPhoneticizedFieldsActionPerformed(evt);
            }
        });

        jPanel1.add(btnAddPhoneticizedFields);
        btnAddPhoneticizedFields.setBounds(310, 250, 80, 25);

        btnEditPhoneticizedFields.setEnabled(false);
        btnEditPhoneticizedFields.setText(java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/Bundle").getString("MSG_button_Edit"));
        btnEditPhoneticizedFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPhoneticizedFieldsActionPerformed(evt);
            }
        });

        jPanel1.add(btnEditPhoneticizedFields);
        btnEditPhoneticizedFields.setBounds(470, 250, 80, 25);

        add(jPanel1);
        jPanel1.setBounds(10, 10, 560, 290);

        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/Bundle").getString("LBL_Encoders")));
        jPanel2.add(jScrollPaneEncoders);
        jScrollPaneEncoders.setBounds(10, 20, 540, 220);
        
        btnAddEncoder.setText(java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/Bundle").getString("MSG_button_Add"));
        btnAddEncoder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEncoderActionPerformed(evt);
            }
        });

        jPanel2.add(btnAddEncoder);
        btnAddEncoder.setBounds(310, 250, 80, 25);

        btnRemoveEncoder.setEnabled(false);
        btnRemoveEncoder.setText(java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/Bundle").getString("MSG_button_Remove"));
        btnRemoveEncoder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveEncoderActionPerformed(evt);
            }
        });

        jPanel2.add(btnRemoveEncoder);
        btnRemoveEncoder.setBounds(390, 250, 80, 25);

        btnEditEncoder.setEnabled(false);
        btnEditEncoder.setText(java.util.ResourceBundle.getBundle("com/sun/mdm/index/project/ui/applicationeditor/Bundle").getString("MSG_button_Edit"));
        btnEditEncoder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditEncoderActionPerformed(evt);
            }
        });

        jPanel2.add(btnEditEncoder);
        btnEditEncoder.setBounds(470, 250, 80, 25);

        add(jPanel2);
        jPanel2.setBounds(10, 310, 560, 290);

    }

    private void btnEditEncoderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditEncoderActionPerformed
        int iEditRow = mTblEncoders.getSelectedRow();
        TableEncodersModel model = (TableEncodersModel) mTblEncoders.getModel();        
        String encodingType = (String) model.getValueAt(iEditRow, model.iColEncoderType);
        String encoderImplementationClass = (String) model.getValueAt(iEditRow, model.iColEncoderImplementationClass);
        PhoneticEncoderEditDialog dlg = new PhoneticEncoderEditDialog(encodingType, encoderImplementationClass, true);
        dlg.setVisible(true);
        if (dlg.isModified()) {
            model.setValueAt(dlg.getEncodingType(), iEditRow, model.iColEncoderType);
            model.setValueAt(dlg.getEncoderImplementationClass(), iEditRow, model.iColEncoderImplementationClass);
            mMatchFieldDef.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
        }

    }//GEN-LAST:event_btnEditEncoderActionPerformed

    private void btnRemoveEncoderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveEncoderActionPerformed
        int rs[] = mTblEncoders.getSelectedRows();
        int length = rs.length;
        String prompt = (length == 1) ? NbBundle.getMessage(TabPhoneticizedFieldsPanel.class, "MSG_Confirm_Remove_Row_Prompt")
                                        : NbBundle.getMessage(TabPhoneticizedFieldsPanel.class, "MSG_Confirm_Remove_Rows_Prompt");

        NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                                 prompt, 
                                 NbBundle.getMessage(TabPhoneticizedFieldsPanel.class, "MSG_Confirm_Remove_Row_Title"), 
                                 NotifyDescriptor.YES_NO_OPTION);
        if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.YES_OPTION) {
            TableEncodersModel model = (TableEncodersModel) mTblEncoders.getModel();
            for (int i=length - 1; i>=0 && i < length; i--) {
                int j = rs[i];
                String encodingType = (String) model.getValueAt(j, model.iColEncoderType);
                mMatchFieldDef.deleteEncoderByEncodingType(encodingType);
                model.removeRow(j);
            }
            btnRemoveEncoder.setEnabled(false);
            btnEditEncoder.setEnabled(false);
            loadEncoders();
            mMatchFieldDef.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
        }

    }//GEN-LAST:event_btnRemoveEncoderActionPerformed

    private void btnAddEncoderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEncoderActionPerformed
        PhoneticEncoderEditDialog dlg = new PhoneticEncoderEditDialog("", "", false);
        dlg.setVisible(true);
        if (dlg.isModified()) {
            String encodingType = dlg.getEncodingType();
            String encoderImplementationClass = dlg.getEncoderImplementationClass();
            Encoder encoder = mMatchFieldDef.getEncoderByEncodingType(encodingType);
            TableEncodersModel model = (TableEncodersModel) mTblEncoders.getModel();            
            if (encoder != null) {
                String prompt = NbBundle.getMessage(TabPhoneticizedFieldsPanel.class, "MSG_Confirm_Remove_Duplicated_Row_Prompt", encodingType);
                NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                                         prompt, 
                                         NbBundle.getMessage(TabBlockingPanel.class, "MSG_Confirm_Remove_Duplicated_Row_Prompt_Title"), 
                                         NotifyDescriptor.YES_NO_OPTION);
                if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.YES_OPTION) {
                    mMatchFieldDef.deleteEncoderByEncodingType(encodingType);
                    for (int i=0; i<model.getRowCount(); i++) {
                        if (model.getValueAt(i, model.iColEncoderType).equals(encodingType)) {                            
                            model.removeRow(i);
                            break;
                        }
                    }
                } else {
                    return;
                }
            }
            
            int iInsertRow = mTblEncoders.getRowCount();        
            EncoderRow r = new EncoderRow(encodingType, encoderImplementationClass);
            model.addRow(iInsertRow, r);
            mTblEncoders.clearSelection();
            mTblEncoders.addRowSelectionInterval(iInsertRow, iInsertRow);   
            mTblEncoders.setEditingRow(iInsertRow);
            btnRemoveEncoder.setEnabled(bCheckedOut);
            btnEditEncoder.setEnabled(bCheckedOut);
            mMatchFieldDef.addEncoder(encodingType, encoderImplementationClass);
            loadEncoders();
            mMatchFieldDef.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
        }
        
    }//GEN-LAST:event_btnAddEncoderActionPerformed

    private void btnRemovePhoneticizedFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemovePhoneticizedFieldsActionPerformed
        int rs[] = mTblPhoneticizedFields.getSelectedRows();
        int length = rs.length;
        String prompt = (length == 1) ? NbBundle.getMessage(TabPhoneticizedFieldsPanel.class, "MSG_Confirm_Remove_Row_Prompt")
                                        : NbBundle.getMessage(TabPhoneticizedFieldsPanel.class, "MSG_Confirm_Remove_Rows_Prompt");

        NotifyDescriptor d = new NotifyDescriptor.Confirmation(
                                 prompt, 
                                 NbBundle.getMessage(TabPhoneticizedFieldsPanel.class, "MSG_Confirm_Remove_Row_Title"), 
                                 NotifyDescriptor.YES_NO_OPTION);
        if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.YES_OPTION) {
            TablePhoneticizedFieldsModel model = (TablePhoneticizedFieldsModel) mTblPhoneticizedFields.getModel();
            for (int i=length - 1; i>=0 && i < length; i--) {
                int j = rs[i];
                // update mMatchFieldDef
                String unphoneticizedSource = (String) model.getValueAt(j, model.iColSourceField);
                String phoneticizedField = (String) model.getValueAt(j, model.iColPhoneticized_Output);
                String encodingType = (String) model.getValueAt(j, model.iColEncoding);
                mMatchFieldDef.deletePhoneticizedField(unphoneticizedSource, phoneticizedField, encodingType);
                model.removeRow(j);
            }
            btnRemovePhoneticizedFields.setEnabled(false);
            btnEditPhoneticizedFields.setEnabled(false);

            mMatchFieldDef.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
        }
    }//GEN-LAST:event_btnRemovePhoneticizedFieldsActionPerformed

    private void btnEditPhoneticizedFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPhoneticizedFieldsActionPerformed
        int iEditRow = mTblPhoneticizedFields.getSelectedRow();
        TablePhoneticizedFieldsModel model = (TablePhoneticizedFieldsModel) mTblPhoneticizedFields.getModel();
        String unphoneticizedSource = (String) model.getValueAt(iEditRow, model.iColSourceField);
        String phoneticizedField = (String) model.getValueAt(iEditRow, model.iColPhoneticized_Output);
        String encodingType = (String) model.getValueAt(iEditRow, model.iColEncoding);

        ArrayList alEncoders = mMatchFieldDef.getEncoders();
        MatchFieldDef.PhoneticizeField phoneticizeField = mMatchFieldDef.getPhoneticizedField(unphoneticizedSource, phoneticizedField, encodingType);
        PhoneticizeFieldEditDialog dlg = new PhoneticizeFieldEditDialog(mEviewEditorMainApp.getEviewEditorMainPanel().getEntityTree(true), 
                                                                        alEncoders, unphoneticizedSource, phoneticizedField, encodingType);
        dlg.setVisible(true);
        mEviewEditorMainApp.getEviewEditorMainPanel().setEntityTreePane();        
        if (dlg.isModified()) {
            unphoneticizedSource = dlg.getUnphoneticizedSource();
            phoneticizedField = dlg.getPhoneticizedField();
            encodingType = dlg.getEncodingType();
            
            model.setValueAt(unphoneticizedSource, iEditRow, model.iColSourceField);
            model.setValueAt(phoneticizedField, iEditRow, model.iColPhoneticized_Output);
            model.setValueAt(encodingType, iEditRow, model.iColEncoding);

            // update mMatchFieldDef
            phoneticizeField.setSourceFieldName(unphoneticizedSource);
            phoneticizeField.setTargetFieldId(phoneticizedField);
            phoneticizeField.setEncodingType(encodingType);
            mMatchFieldDef.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
        }
    }//GEN-LAST:event_btnEditPhoneticizedFieldsActionPerformed

    private void btnAddPhoneticizedFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPhoneticizedFieldsActionPerformed
        int iInsertRow = mTblPhoneticizedFields.getRowCount();
        ArrayList alEncoders = mMatchFieldDef.getEncoders();
        PhoneticizeFieldEditDialog dlg = new PhoneticizeFieldEditDialog(mEviewEditorMainApp.getEviewEditorMainPanel().getEntityTree(true), 
                                                                        alEncoders, "", "", "");
        dlg.setVisible(true);
        mEviewEditorMainApp.getEviewEditorMainPanel().setEntityTreePane();
        if (dlg.isModified()) {
            String unphoneticizedSource = dlg.getUnphoneticizedSource();
            String phoneticizedField = dlg.getPhoneticizedField();
            String encodingType = dlg.getEncodingType();
            MatchFieldDef.PhoneticizeField phoneticizeField = mMatchFieldDef.getPhoneticizedField(unphoneticizedSource, phoneticizedField, encodingType);
            if (phoneticizeField != null) {
                //exists
                return;
            }
            PhoneticizedFieldRow r = new PhoneticizedFieldRow(unphoneticizedSource, phoneticizedField, encodingType);
            TablePhoneticizedFieldsModel model = (TablePhoneticizedFieldsModel) mTblPhoneticizedFields.getModel();                    
            model.addRow(model.getRowCount(), r);
            mTblPhoneticizedFields.clearSelection();
            mTblPhoneticizedFields.addRowSelectionInterval(iInsertRow, iInsertRow);   
            mTblPhoneticizedFields.setEditingRow(iInsertRow);
            btnRemovePhoneticizedFields.setEnabled(bCheckedOut);
            btnEditPhoneticizedFields.setEnabled(bCheckedOut);
            // update mMatchFieldDef
            mMatchFieldDef.addPhoneticizedField(unphoneticizedSource, phoneticizedField, encodingType);
            mMatchFieldDef.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
        }
    }//GEN-LAST:event_btnAddPhoneticizedFieldsActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddEncoder;
    private javax.swing.JButton btnAddPhoneticizedFields;
    private javax.swing.JButton btnEditEncoder;
    private javax.swing.JButton btnEditPhoneticizedFields;
    private javax.swing.JButton btnRemoveEncoder;
    private javax.swing.JButton btnRemovePhoneticizedFields;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPaneEncoders;
    private javax.swing.JScrollPane jScrollPaneTable;
    // End of variables declaration//GEN-END:variables
    private JComboBox encoderComboBox = new JComboBox();
    
    /* encoderComboBox not used
     */
    public void loadEncoders() {
        encoderComboBox.removeAllItems();
        ArrayList alEncoders = mMatchFieldDef.getEncoders();
        for (int i=0; i < alEncoders.size(); i++) {
            Encoder encoder = (Encoder) alEncoders.get(i);
            encoderComboBox.addItem(encoder.getEncodingType());
        }
    }
    
    void createPhoneticizedFieldTable() {
        // load PhoneticizeFields
        ArrayList rows = new ArrayList();
        ArrayList alPhoneticizeFields = mMatchFieldDef.getPhoneticizeFields();
        for (int i=0; alPhoneticizeFields != null && i < alPhoneticizeFields.size(); i++) {
            MatchFieldDef.PhoneticizeField phoneticizeField = (MatchFieldDef.PhoneticizeField) alPhoneticizeFields.get(i);

            if (phoneticizeField != null) {
                PhoneticizedFieldRow r = new PhoneticizedFieldRow(phoneticizeField.getSourceFieldName(), 
                        phoneticizeField.getTargetFieldId(), phoneticizeField.getEncodingType());
                rows.add(r);
            }
        }

        loadEncoders();
        
        TablePhoneticizedFieldsModel phoneticizedFieldsModel = new TablePhoneticizedFieldsModel(rows);
        mTblPhoneticizedFields = new JTable(phoneticizedFieldsModel);
        mTblPhoneticizedFields.getTableHeader().setReorderingAllowed(false);
        mTblPhoneticizedFields.getColumnModel().getColumn(0).setPreferredWidth(200); 
        mTblPhoneticizedFields.getColumnModel().getColumn(1).setPreferredWidth(200);       
        mTblPhoneticizedFields.getColumnModel().getColumn(2).setPreferredWidth(70);        
                   
        mTblPhoneticizedFields.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    if (evt.getClickCount() == 2) {
                        if (bCheckedOut) {
                            btnEditPhoneticizedFieldsActionPerformed(null);
                        }
                    } else {
                        btnRemovePhoneticizedFields.setEnabled(bCheckedOut);
                        btnEditPhoneticizedFields.setEnabled(bCheckedOut && mTblPhoneticizedFields.getSelectedRowCount() == 1);
                    }
                }
            });
        jScrollPaneTable.setViewportView(mTblPhoneticizedFields);

    }
    
    /* Called by EntityNode when field name changed
     *@param oldName
     *@param newName
     *
     */
    public boolean updateReferencedField(String oldNodeNameMefa, String newName) {
        boolean bRet = false;
        String oldValue;
        String newValue;
        int index;
        //String oldNameRegex = oldNodeNameMefa;
        //to escape [*] in oldName string for replaceAll method.

        String oldNameRegex = oldNodeNameMefa.replaceAll("\\[", "\\\\["); 
        oldNameRegex = oldNameRegex.replaceAll("\\*","\\\\*");
        oldNameRegex = oldNameRegex.replaceAll("\\]","\\\\]");

        
        TablePhoneticizedFieldsModel model = (TablePhoneticizedFieldsModel) mTblPhoneticizedFields.getModel();        
        for (int i=0; i < model.getRowCount(); i++) {
            boolean bUpdate = false;
            String phoneticizedField = (String) model.getValueAt(i, model.iColPhoneticized_Output);
            String unphoneticizedSource = (String) model.getValueAt(i, model.iColSourceField);
            
            index = phoneticizedField.indexOf(oldNodeNameMefa);
            if (phoneticizedField.equals(oldNodeNameMefa) || 
                (index >= 0 &&
                 phoneticizedField.length() > oldNodeNameMefa.length() &&
                 (index + oldNodeNameMefa.length() < phoneticizedField.length() &&
                  (phoneticizedField.charAt(index + oldNodeNameMefa.length() - 1) == '.')))) {
                newValue = phoneticizedField.replaceAll(oldNameRegex, newName);
                model.setValueAt(newValue, i, model.iColPhoneticized_Output);
                bUpdate = true;
            }
            index = unphoneticizedSource.indexOf(oldNodeNameMefa);
            if (unphoneticizedSource.equals(oldNodeNameMefa) || 
                (index >= 0 &&
                 unphoneticizedSource.length() > oldNodeNameMefa.length() &&
                 (index + oldNodeNameMefa.length() < unphoneticizedSource.length() &&
                  (unphoneticizedSource.charAt(index + oldNodeNameMefa.length() - 1) == '.')))) {            
                newValue = unphoneticizedSource.replaceAll(oldNameRegex, newName);
                model.setValueAt(newValue, i, model.iColSourceField);
                bUpdate = true;
            }
            if (bUpdate) {
                bRet = true;
            }
        }
        
        if (bRet) {
            mMatchFieldDef.setModified(true);
            mEviewEditorMainApp.enableSaveAction(true);
            // update mMatchFieldDef...
            ArrayList alPhoneticizeFields = mMatchFieldDef.getPhoneticizeFields();
            for (int j=0; alPhoneticizeFields != null && j < alPhoneticizeFields.size(); j++) {
                MatchFieldDef.PhoneticizeField phoneticizeField = (MatchFieldDef.PhoneticizeField) alPhoneticizeFields.get(j);
                if (phoneticizeField != null) {
                    oldValue = phoneticizeField.getSourceFieldName();
                    newValue = oldValue.replaceAll(oldNameRegex, newName);
                    phoneticizeField.setSourceFieldName(newValue);

                    oldValue = phoneticizeField.getTargetFieldId();
                    newValue = oldValue.replaceAll(oldNameRegex, newName);
                    phoneticizeField.setTargetFieldId(newValue);
                }
            }
        }
        return bRet;
    }
    
    /* Called by EntityNode when field removed
     *@param fieldName
     *
     */
    public boolean removeReferencedField(String fieldName) {
        boolean bRet = false;
        
        TablePhoneticizedFieldsModel model = (TablePhoneticizedFieldsModel) mTblPhoneticizedFields.getModel();        
        for (int i=model.getRowCount() - 1; i>=0 && i < model.getRowCount(); i--) {
            boolean bUpdate = false;
            String phoneticizedField = (String) model.getValueAt(i, model.iColPhoneticized_Output);
            String unphoneticizedSource = (String) model.getValueAt(i, model.iColSourceField);
            
            if (phoneticizedField.equals(fieldName) || unphoneticizedSource.equals(fieldName)) {
                model.removeRow(i);
                bUpdate = true;
            }
            if (bUpdate) {
                bRet = true;
                mMatchFieldDef.setModified(true);
                mEviewEditorMainApp.enableSaveAction(true);
                // update mMatchFieldDef...
                ArrayList alPhoneticizeFields = mMatchFieldDef.getPhoneticizeFields();
                for (int j=0; alPhoneticizeFields != null && j < alPhoneticizeFields.size(); j++) {
                    MatchFieldDef.PhoneticizeField phoneticizeField = (MatchFieldDef.PhoneticizeField) alPhoneticizeFields.get(j);
                    if (phoneticizeField != null) {
                        if (phoneticizeField.getSourceFieldName().equals(fieldName) || phoneticizeField.getTargetFieldId().equals(fieldName)) {
                            alPhoneticizeFields.remove(phoneticizeField);
                        }
                    }
                }
            }
        }
        return bRet;
    }
    
    // Table model for Phoneticized Fields
    class TablePhoneticizedFieldsModel extends AbstractTableModel {
        private	String columnNames [] = {NbBundle.getMessage(TabPhoneticizedFieldsPanel.class, "LBL_Unphoneticized_Source"), 
                                         NbBundle.getMessage(TabPhoneticizedFieldsPanel.class, "LBL_Phoneticized_Target"),
                                         NbBundle.getMessage(TabPhoneticizedFieldsPanel.class, "LBL_Encoding_Type")
                                        };
        
        ArrayList phoneticizedFieldRows;
        final int iColSourceField = 0;
        final int iColPhoneticized_Output = 1;
        final int iColEncoding = 2;
        
        TablePhoneticizedFieldsModel(ArrayList rows) {
            phoneticizedFieldRows = rows;
        }
        
        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            if (phoneticizedFieldRows != null) {
                return phoneticizedFieldRows.size();
            }
            return 0;
        }

        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            if (phoneticizedFieldRows != null)
            {
                PhoneticizedFieldRow singleRow = (PhoneticizedFieldRow) phoneticizedFieldRows.get(row);

                if (singleRow != null) {
                    switch (col) {
                        case iColSourceField:
                            return singleRow.getSourceField();                            
                        case iColPhoneticized_Output:
                            return singleRow.getPhoneticizedOutput();                            
                        case iColEncoding:
                            return singleRow.getEncoding();                            
                    }
                }
            }
            return null;
        }

        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        /*
         * Don't need to implement this method unless your table's
         * editable.
         */
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            return false;
        }

        /*
         * Don't need to implement this method unless your table's
         * data can change.
         */
        public void setValueAt(Object value, int row, int col) {
            if (phoneticizedFieldRows != null && row >= 0 && col >= 0) {
                PhoneticizedFieldRow singleRow = (PhoneticizedFieldRow) phoneticizedFieldRows.get(row);
                if (singleRow != null) {
                    switch (col) {
                        case iColSourceField:
                            singleRow.setSourceField((String) value);
                            break;
                        case iColPhoneticized_Output:
                            singleRow.setPhoneticizedOutput((String) value);                            
                            break;
                        case iColEncoding:
                            singleRow.setEncoding((String) value);                            
                            break;
                    }
                }
                fireTableCellUpdated(row, col);                                
            }

        }
        
        public void removeRow(int index) {
            phoneticizedFieldRows.remove(index);
            this.fireTableRowsDeleted(index, index);
        }
        
        public void addRow(int index, PhoneticizedFieldRow row) {
            phoneticizedFieldRows.add(row);
            this.fireTableRowsInserted(index, index);
        }
        
    }
    
    class PhoneticizedFieldRow
    {
    	private String sourceField;
        private String phoneticizedOutput;
        private String encoding;

        PhoneticizedFieldRow(String sourceField, String phoneticizedOutput, String encoding) {
            this.sourceField = sourceField;
            this.phoneticizedOutput = phoneticizedOutput;
            this.encoding = encoding;
        }

        public String getSourceField() {
            return sourceField;
        }
        
        public String getPhoneticizedOutput() {
            return phoneticizedOutput;
        }

        public String getEncoding() {
            return encoding;
        }
        
        public void setSourceField(String sourceField) {
            this.sourceField = sourceField;
        }

        public void setPhoneticizedOutput(String phoneticizedOutput) {
            this.phoneticizedOutput = phoneticizedOutput;
        }

        public void setEncoding(String encoding) {
            this.encoding = encoding;
        }
    }
    
    /*
    *  Encoder table
    */  
    void createEncoderTable() {
        // load encoders
        ArrayList rows = new ArrayList();
        ArrayList alEncoders = mMatchFieldDef.getEncoders();
        for (int i=0; alEncoders != null && i < alEncoders.size(); i++) {
            MatchFieldDef.Encoder encoder = (MatchFieldDef.Encoder) alEncoders.get(i);

            if (encoder != null) {
                EncoderRow r = new EncoderRow(encoder.getEncodingType(), encoder.getEncoderImplementationClass());
                rows.add(r);
            }
        }
        
        TableEncodersModel encodersModel = new TableEncodersModel(rows);
        mTblEncoders = new JTable(encodersModel);
        mTblEncoders.getTableHeader().setReorderingAllowed(false);
        mTblEncoders.getColumnModel().getColumn(0).setPreferredWidth(70); 
        mTblEncoders.getColumnModel().getColumn(1).setPreferredWidth(400);       

        mTblEncoders.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    if (evt.getClickCount() == 2) {
                        if (bCheckedOut) {
                            btnEditEncoderActionPerformed(null);
                        }
                    } else {
                        btnRemoveEncoder.setEnabled(bCheckedOut);
                        btnEditEncoder.setEnabled(bCheckedOut && mTblEncoders.getSelectedRowCount() == 1);
                    }
                }
            });
        jScrollPaneEncoders.setViewportView(mTblEncoders);
    }
    
    // Table model for Phoneticized Fields
    class TableEncodersModel extends AbstractTableModel {
        private	String columnNames [] = {NbBundle.getMessage(TabPhoneticizedFieldsPanel.class, "LBL_Encoding_Type"), 
                                         NbBundle.getMessage(TabPhoneticizedFieldsPanel.class, "LBL_EncoderImplementationClass")
                                        };
        
        ArrayList encoderRows;
        final int iColEncoderType = 0;
        final int iColEncoderImplementationClass = 1;
        
        TableEncodersModel(ArrayList rows) {
            encoderRows = rows;
        }
        
        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            if (encoderRows != null) {
                return encoderRows.size();
            }
            return 0;
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            if (encoderRows != null)
            {
                EncoderRow singleRow = (EncoderRow) encoderRows.get(row);

                if (singleRow != null) {
                    switch (col) {
                        case iColEncoderType:
                            return singleRow.getEncodingType();                            
                        case iColEncoderImplementationClass:
                            return singleRow.getEncoderImplementationClass();                            
                    }
                }
            }
            return null;
        }

        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        /*
         * Don't need to implement this method unless your table's
         * editable.
         */
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            return false;
        }

        /*
         * Don't need to implement this method unless your table's
         * data can change.
         */
        public void setValueAt(Object value, int row, int col) {
            if (encoderRows != null && row >= 0 && col >= 0) {
                EncoderRow singleRow = (EncoderRow) encoderRows.get(row);
                if (singleRow != null) {
                    switch (col) {
                        case iColEncoderType:
                            singleRow.setEncodingType((String) value);
                            break;
                        case iColEncoderImplementationClass:
                            singleRow.setEncoderImplementationClass((String) value);                            
                            break;
                    }
                }
                fireTableCellUpdated(row, col);                                
            }

        }
        
        public void removeRow(int index) {
            encoderRows.remove(index);
            this.fireTableRowsDeleted(index, index);
        }
        
        public void addRow(int index, EncoderRow row) {
            encoderRows.add(row);
            this.fireTableRowsInserted(index, index);
        }
        
    }
    
    class EncoderRow {
        private String encodingType;    // NYSIIS, Soundex, and user defined
        private String encoderImplementationClass;

        EncoderRow(String encodingType, String encoderImplementationClass) {
            this.encodingType = encodingType;
            this.encoderImplementationClass = encoderImplementationClass;
        }

        public String getEncodingType() {
            return encodingType;
        }
        
        public String getEncoderImplementationClass() {
            return encoderImplementationClass;
        }
        
        public void setEncodingType(String encodingType) {
            this.encodingType = encodingType;
        }

        public void setEncoderImplementationClass(String encoderImplementationClass) {
            this.encoderImplementationClass = encoderImplementationClass;
        }
    }
}
