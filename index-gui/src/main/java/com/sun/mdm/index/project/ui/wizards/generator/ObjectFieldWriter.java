/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */
package com.sun.mdm.index.project.ui.wizards.generator;

import com.sun.mdm.index.project.generator.TemplateWriter;
import com.sun.mdm.index.project.generator.exception.TemplateWriterException;

import java.util.ArrayList;


/**
 * The default generator for the 'field' fragment for the object model configuration
 */
public class ObjectFieldWriter implements GenInterface {
    /**
     * ObjectField fragment type
     */
    public static final String FRAGMENT_TYPE_OBJECT_FIELD = "OBJECTFIELD";
    private static final String TEMPLATE_NAME = "ObjectField.tmpl";

    /**
     * Creates an instance
     */
    public ObjectFieldWriter() {
    }

    /**
     * Generate a single fragment for the given field in fieldSettings
     * @see GenInterface
     */
    public String generate(FieldSettings fieldSettings,
        ConfigSettings configSettings) throws TemplateWriterException {
        String res = null;

        String objName = configSettings.getPrimaryNode();

        if (fieldSettings != null) {
            String matchTypeID = fieldSettings.getMatchTypeID();

            MatchType matchType = null;

            if (matchTypeID != null) {
                matchType = ConfigGenerator.getMatchTypeDefinition(matchTypeID,
                        configSettings);
            }

            TemplateWriter templateWriter = ConfigGenerator.getFragmentTemplateWriter(matchType,
                    TEMPLATE_NAME);

            if (templateWriter != null) {
                String targetQualifiedNodeName = fieldSettings.getDecoratedFieldQualifier();
                String fieldName = fieldSettings.getUnQualifiedFieldName();
                String genFieldPrefix = ConfigGenerator.getGenFieldPrefix(fieldSettings);

                // The following have to be part of the fieldSettings passed into the 
                // the ConfigGenerator if this is to generate the full object xml
                String fieldtype = fieldSettings.getFieldType();

                if (fieldtype == null) {
                    fieldtype = "";
                }

                String fieldsize = Integer.toString(fieldSettings.getFieldSize());

                if (fieldsize == null) {
                    fieldsize = "0";
                }

                String updateable = String.valueOf(fieldSettings.getUpdateable());

                if (updateable == null) {
                    updateable = "true";
                }

                String required = String.valueOf(fieldSettings.getRequired());

                if (required == null) {
                    required = "false";
                }

                String keytype = String.valueOf(fieldSettings.getKeytype());

                if (keytype == null) {
                    keytype = "false";
                }

                String visible = String.valueOf(fieldSettings.getVisible());

                if (visible == null) {
                    visible = "true";
                }

                ArrayList cons = templateWriter.construct();
                ArrayList values = new ArrayList();
                values.add(objName);
                values.add(targetQualifiedNodeName);
                values.add(genFieldPrefix);
                values.add(fieldName);

                // The following are only needed if the full object def is generated by templates
                values.add(fieldtype);
                values.add(fieldsize);
                values.add(updateable);
                values.add(required);
                values.add(keytype);
                values.add(visible);

                res = templateWriter.writeConstruct((String) cons.get(0), values);
            }
        }

        return res;
    }
}
