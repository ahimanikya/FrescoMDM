<project name="testsuite builder" default="runtests" basedir=".">

    <property name="test.report" value="${build.dir}/JUnitReport"/>
    <property environment="env"/>
    <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
        <classpath>
            <pathelement path="${run.test.classpath}"/>
        </classpath>
    </taskdef>
    <taskdef name="junitreport" classname="org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator">
        <classpath>
            <pathelement path="${run.test.classpath}"/>
        </classpath>
    </taskdef>
    
    <target name="runtests" depends="runtests_oracle,runtests_sqlserver">
        <echo>::JUNIT TASK</echo>
        <echo message=""/>
        <echo message="##### [All junit tests completed!] #####"/>
    </target>
    
    <target name="runtests_oracle">
        <echo>::Runing JUnit Test on Oracle dababase</echo>
        <delete dir="${test.report}/oracle"/>
        <mkdir dir="${test.report}/oracle"/>
        <copy file="${test.src.dir}/../eindex-templates/object-oracle.xml" tofile="${build.test.classes.dir}/object.xml" overwrite="true"/>
        <copy file="${build.test.classes.dir}/com/sun/mdm/index/util/ejbproxy/ProxyJNDI.properties.Oracle" 
              tofile="${build.test.classes.dir}/com/sun/mdm/index/util/ejbproxy/ProxyJNDI.properties" overwrite="true"/>
        <antcall target="do-testing">
            <param name="test.report.db" value="${test.report}/oracle"/>
            <param name="test.report.html.db" value="${test.report}/html/oracle"/>
        </antcall>
        <echo message="##### [JUnit tests on Oralcle completed!] #####"/>
    </target>
    
    <target name="runtests_sqlserver">
        <echo>::Runing JUnit Test on SQL Server dababase</echo> 
        <delete dir="${test.report}/sqlserver"/>
        <mkdir dir="${test.report}/sqlserver"/>
        <copy file="${test.src.dir}/../eindex-templates/object-sqlserver.xml" tofile="${build.test.classes.dir}/object.xml" overwrite="true"/>
        <copy file="${build.test.classes.dir}/com/sun/mdm/index/util/ejbproxy/ProxyJNDI.properties.SQLServer" 
              tofile="${build.test.classes.dir}/com/sun/mdm/index/util/ejbproxy/ProxyJNDI.properties" overwrite="true"/>
        <antcall target="do-testing">
            <param name="test.report.db" value="${test.report}/sqlserver"/>
            <param name="test.report.html.db" value="${test.report}/html/sqlserver"/>
        </antcall>
        <echo message="##### [JUnit tests on SQL Server completed!] #####"/>
    </target>
        
    <target name="do-testing">
    
        <junit maxmemory="1024m" printsummary="yes" haltonfailure="no" failureProperty="test.failure" >
            <classpath>
                <pathelement path="${run.test.classpath}"/>
            </classpath>
            <!-- run all tests in the test dir and create xml results  -->
            <batchtest fork="yes"  todir="${test.report.db}"> 
                <formatter type="xml"/>
                <fileset dir="${build.test.classes.dir}">
                    <exclude name="**/DomainSelectorTest.class"/>
                    <exclude name="**/WeightedSurvivorStrategy1Test.class"/>
                    <exclude name="**/WeightedSurvivorStrategy2Test.class"/>
                    <exclude name="**/WeightedSurvivorStrategy3Test.class"/>
                    <exclude name="**/BlockerRangeSearchTest.class"/>
                    <exclude name="**/upgrade/*.class"/>
                    <include name="**/*Test.class"/>
                    <include name="**/*Tester.class"/>
                </fileset>
            </batchtest>
        </junit>
        
        <move file="${build.test.classes.dir}/update.xml" tofile="${build.test.classes.dir}/update.xml.bak"/>
        <copy file="${test.src.dir}/com/sun/mdm/index/survivorcalculator/config/update1.xml" tofile="${build.test.classes.dir}/update.xml" overwrite="true"/>
        <junit printsummary="yes" haltonfailure="no" failureProperty="test.failure" >
            <classpath>
                <pathelement path="./src/main/resources/matchengine/config/runtime;${run.test.classpath}"/>
            </classpath>
            <!-- run WeightedSurvivorStrategy1Test and create xml results  -->
            <batchtest fork="yes" todir="${test.report.db}">
                <formatter type="xml"/>
                <fileset dir="${build.test.classes.dir}">
                    <include name="**/WeightedSurvivorStrategy1Test.class"/>
                </fileset>
            </batchtest>
        </junit>
        <move file="${build.test.classes.dir}/update.xml.bak" tofile="${build.test.classes.dir}/update.xml"/>   
        
        <move file="${build.test.classes.dir}/update.xml" tofile="${build.test.classes.dir}/update.xml.bak"/>
        <copy file="${test.src.dir}/com/sun/mdm/index/survivorcalculator/config/update2.xml" tofile="${build.test.classes.dir}/update.xml" overwrite="true"/>
        <junit printsummary="yes" haltonfailure="no" failureProperty="test.failure" >
            <classpath>
                <pathelement path="${run.test.classpath}"/>
            </classpath>
            <!-- run WeightedSurvivorStrategy2Test in the test dir and create xml results  -->
            <batchtest fork="yes" todir="${test.report.db}">
                <formatter type="xml"/>
                <fileset dir="${build.test.classes.dir}">
                    <include name="**/WeightedSurvivorStrategy2Test.class"/>
                </fileset>
            </batchtest>
        </junit>
        <move file="${build.test.classes.dir}/update.xml.bak" tofile="${build.test.classes.dir}/update.xml"/>
        
        <move file="${build.test.classes.dir}/update.xml" tofile="${build.test.classes.dir}/update.xml.bak"/>
        <copy file="${test.src.dir}/com/sun/mdm/index/survivorcalculator/config/update3.xml" tofile="${build.test.classes.dir}/update.xml" overwrite="true"/>
        <junit printsummary="yes" haltonfailure="no" failureProperty="test.failure" >
            <classpath>
                <pathelement path="${run.test.classpath}"/>
            </classpath>
            <!-- run WeightedSurvivorStrategy3Test in the test dir and create xml results  -->
            <batchtest fork="yes" todir="${test.report.db}">
                <formatter type="xml"/>
                <fileset dir="${build.test.classes.dir}">
                    <include name="**/WeightedSurvivorStrategy3Test.class"/>
                </fileset>
            </batchtest>
        </junit>
        <move file="${build.test.classes.dir}/update.xml.bak" tofile="${build.test.classes.dir}/update.xml"/>
        
        <move file="${build.test.classes.dir}/mefa.xml" tofile="${build.test.classes.dir}/mefa.xml.bak"/>
        <copy file="${test.src.dir}/../config/mefa1.xml" tofile="${build.test.classes.dir}/mefa.xml" overwrite="true"/>
        <junit maxmemory="1024m" printsummary="yes" haltonfailure="no" failureProperty="test.failure" >
            <classpath>
                <pathelement path="${run.test.classpath}"/>
            </classpath>
            <!-- run DomainSelectorTest in the test dir and create xml results  -->
            <batchtest fork="yes" todir="${test.report.db}">
                <formatter type="xml"/>
                <fileset dir="${build.test.classes.dir}">
                    <include name="**/DomainSelectorTest.class"/>
                </fileset>
            </batchtest>
        </junit>
        <move file="${build.test.classes.dir}/mefa.xml.bak" tofile="${build.test.classes.dir}/mefa.xml" overwrite="true"/>
        
        <move file="${build.test.classes.dir}/query.xml" tofile="${build.test.classes.dir}/query.xml.bak"/>
        <copy file="${test.src.dir}/../config/query1.xml" tofile="${build.test.classes.dir}/query.xml" overwrite="true"/>
        <junit maxmemory="1024m" printsummary="yes" haltonfailure="no" failureProperty="test.failure">
            <classpath>
                <pathelement path="${run.test.classpath}"/>
            </classpath>
            <!-- run BlockerRangeSearchTest in the test dir and create xml results  -->
            <batchtest fork="yes" todir="${test.report.db}">
                <formatter type="xml"/>
                <fileset dir="${build.test.classes.dir}">
                    <include name="**/BlockerRangeSearchTest.class"/>
                </fileset>
            </batchtest>
        </junit>
        <move file="${build.test.classes.dir}/query.xml.bak" tofile="${build.test.classes.dir}/query.xml" overwrite="true"/>
            
        
        <!-- create report from xml result files  -->
        <junitreport todir="${test.report}">
            <fileset dir="${test.report.db}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.report.html.db}"/>
        </junitreport>
        <copy file="${test.src.dir}/../templates/index.html" todir="${test.report}/html"/>
    </target>
</project>
