/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */
package com.sun.mdm.index.master;
import com.sun.mdm.index.objects.PotentialDuplicate;
import java.io.Externalizable;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.IOException;
import com.sun.mdm.index.util.Localizer;

/**
 * The <b>MatchResult</b> class contains the return values for a call to any
 * of the "executeMatch" methods (that is, <b>executeMatch</b>, <b>executeMatchUpdate</b>,
 * <b>executeMatchDupRecalc</b>, <b>executeMatchUpdateDupRecalc</b>, or
 * <b>executeMatchGui</b>). The return values indicate whether a new enterprise
 * object was created, an assumed match was made, or a matching local ID and
 * system was found in the database.
 */
public class MatchResult implements Externalizable {
    public static int version = 2; // with mMatchFieldChanged

    /**
     * A new enterprise object was created
     */
    public static final int NEW_EO = 1;

    /**
     * The system code / lid was found in the database and the record updated
     */
    public static final int SYS_ID_MATCH = 2;

    /**
     * The system code / lid was not found in the database. A search was
     * performed and an assumed match was found.
     */
    public static final int ASSUMED_MATCH = 3;

    /**
     * No matching record was found in the database, but custom processing
     * logic for disallowAdd() is set to true.
     */
    public static final int ADD_NOT_ALLOWED = 11;

    /**
     * A matching record was found in the database, but custom processing
     * logic for disallowUpdate() is set to true.
     */
    public static final int UPDATE_NOT_ALLOWED = 12;

    /**
     * The system code / lid was found in the database, but custom processing
     * logic for rejectAssumedMatch() is set to true.
     */
    public static final int UPDATE_REJECTED = 13;

    /** EUID of result
     */
    private String mEUID;
    
    /** NEW_EO, SYS_ID_MATCH, OR ASSUMED_MATCH
     */
    private int mResultCode;

    private String mTransNo;

    private PotentialDuplicate[] mPotentialDuplicates;

    /* indicates if a match field has changed */
    private boolean mMatchFieldChanged;

    private transient final Localizer mLocalizer = Localizer.get();

    /**
     * Creates a new instance of the MatchResult class.
     * <p>
     * <DL><DT><B>Parameters:</B><DD>None.</DL>
     * <DL><DT><B>Throws:</B><DD>None.</DL>
     * @include
     */
    public MatchResult() {
    }

    /**
     * Creates a new instance of the MatchResult class.
     * <p>
     * @param euid The EUID of the record that was created or updated.
     * @param resultCode The result code, which indicates how the records
     * were processed.
     * @param transNo The transaction number generated by the call to
     * the execute match method.
     * @param potentialDuplicates An array of potential duplicates created
     * by processing the call to the execute match method.
     * <DT><B>Throws:</B><DD>None.
     * @include
     */
    public MatchResult(String euid, int resultCode, String transNo,
    PotentialDuplicate[] potentialDuplicates) {
        mEUID = euid;
        mResultCode = resultCode;
        mTransNo = transNo;
        mPotentialDuplicates = potentialDuplicates;
        mMatchFieldChanged = false;
    }

    /**
     * Creates a new instance of the MatchResult class that indicates whether
     * a match field was updated as a result of the match process.
     * <p>
     * @param euid The EUID of the record that was created or updated.
     * @param resultCode The result code, which indicates how the records
     * were processed.
     * @param transNo The transaction number generated by the call to
     * the execute match method.
     * @param potentialDuplicates An array of potential duplicates created
     * by processing the call to the execute match method.
     * @param matchFieldChanged  A Boolean indicator of whether a match field
     * was changed during the match process. <B>True</B> indicates a match
     * field has changed; <B>false</B> indicates a match field did not change.
     * <DT><B>Throws:</B><DD>None.
     * @include
     */
    public MatchResult(String euid, int resultCode, String transNo,
    PotentialDuplicate[] potentialDuplicates, Boolean matchFieldChanged) {
        mEUID = euid;
        mResultCode = resultCode;
        mTransNo = transNo;
        mPotentialDuplicates = potentialDuplicates;
        mMatchFieldChanged = matchFieldChanged.booleanValue() ;
    }

    /**
     * Retrieves an indicator of whether a match field was updated during
     * the match process.
     * <p>
     * <DL><DT><B>Parameters:</B><DD>None.</DL>
     * @return <CODE>Boolean</CODE> -  Boolean indicator of whether a match
     * field was changed during the match process. <B>True</B> indicates a
     * match field has changed; <B>false</B> indicates a match field did not
     * change.
     * <DT><B>Throws:</B><DD>None.
     * @include
     */
    public boolean getMatchFieldChanged() {
        return mMatchFieldChanged;
    }

    /**
     * Retrieves the EUID in a MatchResult object.
     * <p>
     * <DL><DT><B>Parameters:</B><DD>None.</DL>
     * @return <CODE>String</CODE> - The EUID of the record modified or
     * created during the transaction.
     * <DT><B>Throws:</B><DD>None.
     * @include
     */
    public String getEUID() {
        return mEUID;
    }


    /**
     * Retrieves the result code in a MatchResult object. The result code
     * indicates how records were processed by the match process. The following
     * codes can result:
     * <UL>
	 * <LI><b>1</b> - A new enterprise object was created.
	 * <LI><b>2</b> - A system and local ID pair matching that of the incoming
	 * record was found. The existing record was updated with the new information.
	 * <LI><b>3</b> - No matching system and local ID pair were found, so a
	 * comparison search was performed. An assumed match was found and the
	 * existing record was updated.
     * <LI><b>11</b> - No matching record was found in the database, but custom
     * processing logic for disallowAdd() is set to true.
     * <LI><b>12</b> - A matching record was found in the database, but custom
     * processing logic for disallowUpdate() is set to true.
     * <LI><b>13</b> - An assumed match was found in the database, but custom
     * processing logic for rejectAssumedMatch() is set to true.
     * </UL>
     * <p>
     * <DL><DT><B>Parameters:</B><DD>None.</DL>
     * @return <CODE>in</CODE> - The result code indicating how the record was
     * processed.
     * <DT><B>Throws:</B><DD>None.
     * @include
     */
    public int getResultCode() {
        return mResultCode;
    }

    /**
     * Retrieves the transaction number in a MatchResult object.
     * <p>
     * <DL><DT><B>Parameters:</B><DD>None.</DL>
     * @return <CODE>String</CODE> - A transaction number.
     * <DT><B>Throws:</B><DD>None.
     * @include
     */
    public String getTransactionNumber() {
        return mTransNo;
    }

    /**
     * Retrieves an array of the potential duplicates (class PotentialDuplidate)
     * in a MatchResult object. If no potential duplicates were generated by
     * <b>executeMatch</b> or <b>executeMatchUpdate</b>, this method returns
     * null.
     * <p>
     * <DL><DT><B>Parameters:</B><DD>None.</DL>
     * @return <CODE>PotentialDuplicate[]</CODE> - An array list of potential
     * duplicates created during the transaction, or null if none were created.
     * <DT><B>Throws:</B><DD>None.
     * @include
     */
    public PotentialDuplicate[] getPotentialDuplicates() {
        return mPotentialDuplicates;
    }

    /**
     * Displays a String representation of the match result object.
     * <p>
     * <DL><DT><B>Parameters:</B><DD>None.</DL>
     * @return <CODE>String</CODE> - A string representation of the match result
     * object.
     * <DT><B>Throws:</B><DD>None.
     * @include
     */
     public String toString() {
         int len;
         if (mPotentialDuplicates == null) {
             len = 0;
         } else {
             len = mPotentialDuplicates.length;
         }
         String str = "EUID: " + mEUID +
                      "\nresultCode: " + mResultCode +
                      "\ntransactionNo: " + mTransNo +
                      "\n matchFieldChanged: " + mMatchFieldChanged +
                      "\npotential duplicates: " + len;
         return str;
     }

    private void objectWriter(ObjectOutput out, Object obj) throws java.io.IOException {
        if (obj != null) {
            out.writeInt(1);
            out.writeObject(obj);
        } else {
            out.writeInt(0);
        }
     }

     private Object objectReader(ObjectInput in) throws java.io.IOException, java.lang.ClassNotFoundException {
         int f = in.readInt();
         return (f == 1) ? in.readObject() : null;
     }

    private final class ExternalizableVersion1 {
          public ExternalizableVersion1() {};

          void writeExternal(ObjectOutput out) throws java.io.IOException {
              out.writeObject(mEUID);
              out.writeInt(mResultCode);
              out.writeObject(mTransNo);
              if (mPotentialDuplicates != null) {
                 out.writeInt(mPotentialDuplicates.length);
                 for (int i = 0; i < mPotentialDuplicates.length; i++) {
              	    objectWriter(out, mPotentialDuplicates[i]);
                 }
              } else {
              	 out.writeInt(0);
              }
          }

          void readExternal(ObjectInput in) throws java.io.IOException, java.lang.ClassNotFoundException {
              mEUID = (String) in.readObject();
              mResultCode = in.readInt();
              mTransNo = (String) in.readObject();
              int arrayLen = in.readInt();
              if (arrayLen > 0) {
                 mPotentialDuplicates = new PotentialDuplicate[arrayLen];
                 for (int i = 0; i < arrayLen; i++) {
              	    mPotentialDuplicates[i] = (PotentialDuplicate) objectReader(in);
              	 }
              } else {
              	 mPotentialDuplicates = null;
              }
          }
      }

    private final class ExternalizableVersion2 {
          public ExternalizableVersion2() {};

          void writeExternal(ObjectOutput out) throws java.io.IOException {
              out.writeObject(mEUID);
              out.writeInt(mResultCode);
              out.writeObject(mTransNo);
              out.writeObject(new Boolean(mMatchFieldChanged));
              if (mPotentialDuplicates != null) {
                 out.writeInt(mPotentialDuplicates.length);
                 for (int i = 0; i < mPotentialDuplicates.length; i++) {
              	    objectWriter(out, mPotentialDuplicates[i]);
                 }
              } else {
              	 out.writeInt(0);
              }
          }

          void readExternal(ObjectInput in) throws java.io.IOException, java.lang.ClassNotFoundException {
              mEUID = (String) in.readObject();
              mResultCode = in.readInt();
              mTransNo = (String) in.readObject();
              Boolean val = (Boolean) in.readObject();
              mMatchFieldChanged = val.booleanValue();
              int arrayLen = in.readInt();
              if (arrayLen > 0) {
                 mPotentialDuplicates = new PotentialDuplicate[arrayLen];
                 for (int i = 0; i < arrayLen; i++) {
              	    mPotentialDuplicates[i] = (PotentialDuplicate) objectReader(in);
              	 }
              } else {
              	 mPotentialDuplicates = null;
              }
          }
      }


      public void writeExternal(ObjectOutput out) throws IOException {
          ExternalizableVersion2 ev = new ExternalizableVersion2();
          out.writeInt(version);
          ev.writeExternal(out);
      }

      public void readExternal(ObjectInput in)
      throws IOException, java.lang.ClassNotFoundException {
          int version = in.readInt();
          if (version == 1) {
              ExternalizableVersion1 ev = new ExternalizableVersion1();
              ev.readExternal(in);
          } else if (version == 2) {
              ExternalizableVersion2 ev = new ExternalizableVersion2();
              ev.readExternal(in);
          } else {
              throw new RuntimeException(mLocalizer.t("MAS501: Unsupported version: {0} ", version));
          }
      }
}
