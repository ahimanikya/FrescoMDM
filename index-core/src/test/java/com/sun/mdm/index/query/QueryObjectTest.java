/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2003-2007 Sun Microsystems, Inc. All Rights Reserved.
 *
 * The contents of this file are subject to the terms of the Common 
 * Development and Distribution License ("CDDL")(the "License"). You 
 * may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the License at
 * https://open-dm-mi.dev.java.net/cddl.html
 * or open-dm-mi/bootstrap/legal/license.txt. See the License for the 
 * specific language governing permissions and limitations under the  
 * License.  
 *
 * When distributing the Covered Code, include this CDDL Header Notice 
 * in each file and include the License file at
 * open-dm-mi/bootstrap/legal/license.txt.
 * If applicable, add the following below this CDDL Header, with the 
 * fields enclosed by brackets [] replaced by your own identifying 
 * information: "Portions Copyrighted [year] [name of copyright owner]"
 */
package com.sun.mdm.index.query;


import junit.framework.TestCase;
import junit.framework.TestSuite;

import java.util.StringTokenizer;

import com.sun.mdm.index.objects.metadata.ObjectFactory;


/** These tests validates the SQL generated by Query Manager
 *
 * @author  sdua
 */
public class QueryObjectTest extends TestCase {
    QueryObject mqo;

    /** Creates a new instance of QueryObjectTest 
     *  @param name name of Test  
     */
    public QueryObjectTest(String name) {
        super(name);
    }
    /**
     * setup
     */

    protected void setUp() {
        mqo = new QueryObject();
    }

    /**
     * Used by JUnit (called after each test method)
     */
    protected void tearDown() {
        mqo = null;
    }

    /**
     *  test creation of SQL statement by QueryParser.
     *  @throws Exception if error occured
     */
    public void testPersonSQL() throws Exception {
        String[] sqlString = {
            " Select SBYN_PERSONSBR.SSN , SBYN_PERSONSBR.PERSONID , SBYN_PERSONSBR.LASTNAME " 
           + " From SBYN_PERSONSBR "
             + "Where  SBYN_PERSONSBR.FIRSTNAME  LIKE  'FOO'"
        };
        String[] fields = {
            "Enterprise.SystemSBR.Person.SSN",
            "Enterprise.SystemSBR.Person.PersonId",
            "Enterprise.SystemSBR.Person.LastName",
        };

        mqo.setSelect(fields);

        Condition[] conditions = new Condition[] {
                
                    new Condition("Enterprise.SystemSBR.Person.FirstName",
                        "LIKE", "FOO")
                
            };

        mqo.setCondition(conditions);
        mqo.preInitializeForCacheComparision();

        SQLDescriptor[] sqlDesc = mqo.parse();

        for (int i = 0; i < sqlDesc.length; i++) {
            String sql = sqlDesc[i].getSQL();
            
            System.out.println(sql);
            checkSQLStrings(sqlString[i], sql);
            
       }
                

    }
    
    

    /**
     * test In clause
     *
     * @exception Exception error occurs
     */
    public void testINClauseSQL()  throws Exception {
    	
        // for now put all the primary keys in the select fields
        String[] fields = {
            "Enterprise.SystemSBR.Person.EUID", 
            "Enterprise.SystemSBR.Person.LastName",
            "Enterprise.SystemSBR.Person.Address.City",            
            "Enterprise.SystemSBR.Person.Phone.Phone",
            "Enterprise.SystemSBR.Person.Phone.PhoneId",
        };

        QueryObject qo = new QueryObject();
        qo.setSelect(fields);

        Condition[][] conditions = new Condition[][] {
                {
                    new Condition("Enterprise.SystemSBR.Person.LastName",
                        "LIKE", "KA%", true)
                },
                {
                    new Condition("Enterprise.SystemSBR.Person.Address.City",
                        "IN", new String[] {"Monrovia", "Arcadia"})
                }
            };
        
        
//      The Query Parser for this test creates two Select statements. 
    	// Reason: It is specified to be not Tuples and there are two children Phone and Address for Person
    	// specified in the QueryObject. So one query is for Person, Phone data and other for Person, Address data.
    	String[] ansisql = 
    	{"SELECT  SBYN_PERSONSBR.EUID , SBYN_PERSONSBR.LASTNAME , SBYN_PERSONSBR.PERSONID " +
    			     ", SBYN_PHONESBR.PHONE , SBYN_PHONESBR.PHONEID , SBYN_PHONESBR.PHONETYPE " +
    		" FROM  ( SBYN_PERSONSBR left outer join SBYN_PHONESBR " +
    			"    on  SBYN_PERSONSBR.PERSONID = SBYN_PHONESBR.PERSONID  )  " +
    	     "WHERE  SBYN_PERSONSBR.LASTNAME  LIKE  'KA%' " +
    		  "Union " +
    		 "SELECT  SBYN_PERSONSBR.EUID , SBYN_PERSONSBR.LASTNAME , SBYN_PERSONSBR.PERSONID , " +
    			 "SBYN_PHONESBR.PHONE , SBYN_PHONESBR.PHONEID , SBYN_PHONESBR.PHONETYPE " +
    		  "FROM  ( SBYN_PERSONSBR left outer join SBYN_PHONESBR " +
    			     "on  SBYN_PERSONSBR.PERSONID = SBYN_PHONESBR.PERSONID  )  " +
    		   "WHERE   SBYN_PERSONSBR.PERSONID " +
    			  " IN ( Select SBYN_ADDRESSSBR.PERSONID From SBYN_ADDRESSSBR " +
    			         "Where  SBYN_ADDRESSSBR.CITY  IN   ( 'Monrovia' , 'Arcadia' )  )  " +
    		    "Order By 3",
    		    
    		 "SELECT  SBYN_PERSONSBR.PERSONID , SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , " +
    		    "SBYN_ADDRESSSBR.ADDRESSID " +
    		  "FROM  ( SBYN_PERSONSBR left outer join SBYN_ADDRESSSBR " +
    		       "on  SBYN_PERSONSBR.PERSONID = SBYN_ADDRESSSBR.PERSONID  )  " +
    		   "WHERE  SBYN_PERSONSBR.LASTNAME  LIKE  'KA%' " +
    		   "Union " +
    		   "SELECT  SBYN_PERSONSBR.PERSONID , SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , " +
    		      "SBYN_ADDRESSSBR.ADDRESSID " +
    		   "FROM  ( SBYN_PERSONSBR left outer join SBYN_ADDRESSSBR " +
    		      "on  SBYN_PERSONSBR.PERSONID = SBYN_ADDRESSSBR.PERSONID  )  " +
    		   "WHERE  SBYN_ADDRESSSBR.CITY  IN   ( 'Monrovia' , 'Arcadia' )  " +
    		   "Order By 1"
    	
    	     };
    	
    	String[] sqloracle = {
    			"SELECT  SBYN_PERSONSBR.EUID , SBYN_PERSONSBR.LASTNAME , SBYN_PERSONSBR.PERSONID , " +
    			"SBYN_PHONESBR.PHONE , SBYN_PHONESBR.PHONEID , SBYN_PHONESBR.PHONETYPE " +
    			"FROM SBYN_PHONESBR , SBYN_PERSONSBR " +
    			"WHERE  SBYN_PERSONSBR.LASTNAME  LIKE  'KA%' " +
    			"Union " +
    			"SELECT  SBYN_PERSONSBR.EUID , SBYN_PERSONSBR.LASTNAME , SBYN_PERSONSBR.PERSONID , " +
    			"SBYN_PHONESBR.PHONE , SBYN_PHONESBR.PHONEID , SBYN_PHONESBR.PHONETYPE " +
    			"FROM SBYN_PHONESBR , SBYN_PERSONSBR " +
    			"WHERE   SBYN_PERSONSBR.PERSONID " +
    			  "IN ( Select SBYN_ADDRESSSBR.PERSONID " +
    			       "From SBYN_ADDRESSSBR " +
    			        "Where  SBYN_ADDRESSSBR.CITY  IN   ( 'Monrovia' , 'Arcadia' )  )  " +
    			"Order By 3"
    			,
    			"SELECT  SBYN_PERSONSBR.PERSONID , SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , " +
    			"SBYN_ADDRESSSBR.ADDRESSID FROM SBYN_ADDRESSSBR , SBYN_PERSONSBR " +
    			"WHERE  SBYN_PERSONSBR.LASTNAME  LIKE  'KA%' " +
    			"Union " +
    			"SELECT  SBYN_PERSONSBR.PERSONID , SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , " +
    			"SBYN_ADDRESSSBR.ADDRESSID FROM SBYN_ADDRESSSBR , SBYN_PERSONSBR " +
    			"WHERE  SBYN_ADDRESSSBR.CITY  IN   ( 'Monrovia' , 'Arcadia' )  " +
    			"Order By 1"    			
    	};
    
        qo.setCondition(conditions);

        AssembleDescriptor assdesc = new AssembleDescriptor();
        qo.setAssembleDescriptor(assdesc);
        assdesc.setAssembler(new ObjectNodeAssembler());
        
        qo.preInitializeForCacheComparision();

        SQLDescriptor[] sqlDesc = qo.parse();
        System.out.println("testINclause");
          
        for (int i = 0; i < sqlDesc.length; i++) {
              String sql = sqlDesc[i].getSQL();
              
              System.out.println(sql);
              if (ObjectFactory.isDatabaseANSI()) {
                  checkSQLStrings(ansisql[i], sql);
              } else {
            	  checkSQLStrings(sqloracle[i], sql);
              }
        } 
                         
    }
    
       
    
   
    /**
     * Test IN clause in cache
     *
     * @exception Exception error occurs
     */
    public void testINClauseCacheSQL() throws Exception {
     
        // for now put all the primary keys in the select fields
        String[] fields = {
            "Enterprise.SystemSBR.Person.EUID", 
            "Enterprise.SystemSBR.Person.LastName",
            "Enterprise.SystemSBR.Person.Address.City",        
            "Enterprise.SystemSBR.Person.Phone.Phone",
            "Enterprise.SystemSBR.Person.Phone.PhoneId",
        };

        QueryObject qo = new QueryObject();
        qo.setSelect(fields);

        Condition[][] conditions = new Condition[][] {
                {
                    new Condition("Enterprise.SystemSBR.Person.LastName",
                        "LIKE", "KA%", true)
                },
                
            };
        qo.setCondition(conditions);
        
        String ansisql[] = 
        { "SELECT  SBYN_PERSONSBR.EUID , SBYN_PERSONSBR.LASTNAME , SBYN_PERSONSBR.PERSONID , " +
        	  "SBYN_PHONESBR.PHONE , SBYN_PHONESBR.PHONEID , SBYN_PHONESBR.PHONETYPE " +
        	"FROM  ( SBYN_PERSONSBR left outer join SBYN_PHONESBR " +
        	    "on  SBYN_PERSONSBR.PERSONID = SBYN_PHONESBR.PERSONID  )  " +
        	 "WHERE  SBYN_PERSONSBR.LASTNAME  LIKE ?  " +
        	 "Order By 3"
        	,
        	"SELECT  SBYN_PERSONSBR.PERSONID , SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , " +
        	 "SBYN_ADDRESSSBR.ADDRESSID " +
        	 "FROM  ( SBYN_PERSONSBR left outer join SBYN_ADDRESSSBR " +
        	    "on  SBYN_PERSONSBR.PERSONID = SBYN_ADDRESSSBR.PERSONID  )  " +
        	  "WHERE  SBYN_PERSONSBR.LASTNAME  LIKE ?  " +
        	 "Order By 1"
        };
        
        String[] sqloracle = {
        		"SELECT  SBYN_PERSONSBR.EUID , SBYN_PERSONSBR.LASTNAME , SBYN_PERSONSBR.PERSONID , " +
        		"SBYN_PHONESBR.PHONE , SBYN_PHONESBR.PHONEID , SBYN_PHONESBR.PHONETYPE " +
        		"FROM SBYN_PHONESBR , SBYN_PERSONSBR " +
        		"WHERE  SBYN_PERSONSBR.LASTNAME  LIKE ?  " +
        		"Order By 3"
        		,
        		"SELECT  SBYN_PERSONSBR.PERSONID , SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , " +
        		"SBYN_ADDRESSSBR.ADDRESSID FROM SBYN_ADDRESSSBR , SBYN_PERSONSBR " +
        		"WHERE  SBYN_PERSONSBR.LASTNAME  LIKE ?  " +
        		"Order By 1"

        };
        
        
        

        //     qo.addCondition("Enterprise.SBR.Person.FirstName", "LIKE", "C%");
        //   qo.addCondition(new Condition("Enterprise.SBR.Person.Address.City", "IN", new String[] {"Monrovia",
        //                               "Arcadia"}) );
        // qo.addCondition("Enterprise.SBR.Person.Phone.PhoneNumber", "LIKE", "626%");
        //qo.setRootObject("Enterprise.SystemSBR.Person");
        // System.out.println("QO:" + qo.toString());
        // set Factory
        AssembleDescriptor assdesc = new AssembleDescriptor();
        qo.setAssembleDescriptor(assdesc);
        assdesc.setAssembler(new ObjectNodeAssembler());

        qo.preInitializeForCacheComparision();

        SQLDescriptor[] sqlDesc = qo.parse();
        System.out.println("testINclauseCache");
        
        for (int i = 0; i < sqlDesc.length; i++) {
            String sql = sqlDesc[i].getSQL();
            
            System.out.println(sql);
            if (ObjectFactory.isDatabaseANSI()) {
                checkSQLStrings(ansisql[i], sql);
            } else {
            	checkSQLStrings(sqloracle[i], sql);
            }
      }
            
    }

   
    /**
     * his tests the ObjectNodeFactory for Person  Object.
     *
     * @exception Exception error occurs
     */
    public void testSingleObjectNodeSQL() throws Exception {
        // for now put all the primary keys in the select fields
        String[] fields = {
            "Enterprise.SystemSBR.Person.Address.City"
            
        };
        QueryObject qo = new QueryObject();
        qo.setSelect(fields);

        Condition[][] conditions = new Condition[][] {
                {
                    new Condition("Enterprise.SystemSBR.Person.Address.City",
                        "LIKE", "FOO")
                }
            };
        
        String sqlserver = 
        	"SELECT  SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , SBYN_ADDRESSSBR.ADDRESSID " +
        	"FROM SBYN_ADDRESSSBR WHERE  SBYN_ADDRESSSBR.CITY  LIKE  'FOO'";

        
        qo.setCondition(conditions);

        // qo.addCondition("Enterprise.SystemSBR.Person.FirstName", "LIKE", "C%");
        //  qo.addCondition("Enterprise.SystemSBR.Person.DOB", "LIKE", "1901-01-02");
        

        System.out.println("QO:" + qo.toString());

        // set ValueObjectFactory
        AssembleDescriptor assdesc = new AssembleDescriptor();
        qo.setAssembleDescriptor(assdesc);
        assdesc.setAssembler(new ObjectNodeAssembler());
        assdesc.setResultValueObjectType(new ObjectNodeMetaNode(
                "Enterprise.SystemSBR.Person.Address"));

        qo.preInitializeForCacheComparision();

        SQLDescriptor[] sqlDesc = qo.parse();
        System.out.println("testSingleObjectNodeSQL");
        for (int i = 0; i < sqlDesc.length; i++) {
          String sql = sqlDesc[i].getSQL();
          System.out.println(sql);   
          checkSQLStrings(sqlserver, sql);
        } 
    }

   

    /**
     * This tests the Multiple paths for Person, Address && Phone Object
     *
     * @exception Exception error occurs
     */
    public void testMultipleSecondaryObjectsSQL() throws Exception {
    	 
         // for now put all the primary keys in the select fields
        String[] fields = {
            "Enterprise.SystemSBR.Person.EUID", 
            //"Enterprise.SystemSBR.Person.PersonId",
            "Enterprise.SystemSBR.Person.LastName",
            "Enterprise.SystemSBR.Person.Address.City",
            
            // "Enterprise.SystemSBR.Person.Address.AddressId",
            "Enterprise.SystemSBR.Person.Phone.Phone",
            "Enterprise.SystemSBR.Person.Phone.PhoneId",
        };

        QueryObject qo = new QueryObject();
        qo.setSelect(fields);

        Condition[][] conditions = new Condition[][] {
                {
                    new Condition("Enterprise.SystemSBR.Person.FirstName",
                        "LIKE", "Call%")
                },
                {
                    new Condition("Enterprise.SystemSBR.Person.Address.City",
                        "LIKE", "Mon%")
                }
            };
        qo.setCondition(conditions);

        String[] ansisql = {
        	        
         "SELECT  SBYN_PERSONSBR.EUID , SBYN_PERSONSBR.LASTNAME , SBYN_PERSONSBR.PERSONID , SBYN_PHONESBR.PHONE , " +
          "SBYN_PHONESBR.PHONEID , SBYN_PHONESBR.PHONETYPE " +
         "FROM  ( SBYN_PERSONSBR left outer join SBYN_PHONESBR " +
           "on  SBYN_PERSONSBR.PERSONID = SBYN_PHONESBR.PERSONID  )  " +
           "WHERE  SBYN_PERSONSBR.FIRSTNAME  LIKE  'Call%' " +
           "Union " +
           "SELECT  SBYN_PERSONSBR.EUID , SBYN_PERSONSBR.LASTNAME , SBYN_PERSONSBR.PERSONID , " +
           "SBYN_PHONESBR.PHONE , SBYN_PHONESBR.PHONEID , SBYN_PHONESBR.PHONETYPE " +
           "FROM  ( SBYN_PERSONSBR left outer join SBYN_PHONESBR " +
              "on  SBYN_PERSONSBR.PERSONID = SBYN_PHONESBR.PERSONID  )  " +
              "WHERE   SBYN_PERSONSBR.PERSONID " +
                "IN ( Select SBYN_ADDRESSSBR.PERSONID " +
                    "From SBYN_ADDRESSSBR Where  SBYN_ADDRESSSBR.CITY  LIKE  'Mon%' )  " +
                    "Order By 3"
         ,
         "SELECT  SBYN_PERSONSBR.PERSONID , SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , " +
         "SBYN_ADDRESSSBR.ADDRESSID " +
         "FROM  ( SBYN_PERSONSBR left outer join SBYN_ADDRESSSBR " +
         "on  SBYN_PERSONSBR.PERSONID = SBYN_ADDRESSSBR.PERSONID  )  " +
         "WHERE  SBYN_PERSONSBR.FIRSTNAME  LIKE  'Call%' " +
         "Union " +
         "SELECT  SBYN_PERSONSBR.PERSONID , SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , " +
         "SBYN_ADDRESSSBR.ADDRESSID " +
         "FROM  ( SBYN_PERSONSBR left outer join SBYN_ADDRESSSBR " +
           "on  SBYN_PERSONSBR.PERSONID = SBYN_ADDRESSSBR.PERSONID  )  " +
         "WHERE  SBYN_ADDRESSSBR.CITY  LIKE  'Mon%' Order By 1"
        };
        
        String[] sqloracle = {
        		"SELECT  SBYN_PERSONSBR.EUID , SBYN_PERSONSBR.LASTNAME , SBYN_PERSONSBR.PERSONID , " +
        		"SBYN_PHONESBR.PHONE , SBYN_PHONESBR.PHONEID , SBYN_PHONESBR.PHONETYPE " +
        		"FROM SBYN_PHONESBR , SBYN_PERSONSBR " +
        		"WHERE  SBYN_PERSONSBR.FIRSTNAME  LIKE  'Call%' " +
        		"Union " +
        		"SELECT  SBYN_PERSONSBR.EUID , SBYN_PERSONSBR.LASTNAME , SBYN_PERSONSBR.PERSONID , " +
        		"SBYN_PHONESBR.PHONE , SBYN_PHONESBR.PHONEID , SBYN_PHONESBR.PHONETYPE " +
        		"FROM SBYN_PHONESBR , SBYN_PERSONSBR " +
        		"WHERE   SBYN_PERSONSBR.PERSONID " +
        		  "IN ( Select SBYN_ADDRESSSBR.PERSONID " +
        		     "From SBYN_ADDRESSSBR " +
        		     "Where  SBYN_ADDRESSSBR.CITY  LIKE  'Mon%' )  " +
        		"Order By 3"
        		,
        		"SELECT  SBYN_PERSONSBR.PERSONID , SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , " +
        		  "SBYN_ADDRESSSBR.ADDRESSID " +
        		 "FROM SBYN_ADDRESSSBR , SBYN_PERSONSBR " +
        		 "WHERE  SBYN_PERSONSBR.FIRSTNAME  LIKE  'Call%' " +
        		 "Union " +
        		 "SELECT  SBYN_PERSONSBR.PERSONID , SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , " +
        		 "SBYN_ADDRESSSBR.ADDRESSID " +
        		 "FROM SBYN_ADDRESSSBR , SBYN_PERSONSBR " +
        		 "WHERE  SBYN_ADDRESSSBR.CITY  LIKE  'Mon%' " +
        		 "Order By 1"
        };
        
        AssembleDescriptor assdesc = new AssembleDescriptor();
        qo.setAssembleDescriptor(assdesc);
        assdesc.setAssembler(new ObjectNodeAssembler());

        qo.preInitializeForCacheComparision();

        SQLDescriptor[] sqlDesc = qo.parse();
        System.out.println("testMultipleSecondaryObjectsSQL");
       
        for (int i = 0; i < sqlDesc.length; i++) {
            String sql = sqlDesc[i].getSQL();
            
            System.out.println(sql);
            if (ObjectFactory.isDatabaseANSI()) {
                checkSQLStrings(ansisql[i], sql);
            } else {
            	checkSQLStrings(sqloracle[i], sql);
            }
      } 
    }


 
  
    /**
     * This tests prepare statement
     *
     * @exception Exception error occurs
     */
    public void testPrepareSQL() throws Exception {
        System.out.println("testPrepare");

        // for now put all the primary keys in the select fields
        String[] fields = {
            "Enterprise.SystemSBR.Person.EUID", 
            //"Enterprise.SystemSBR.Person.PersonId",
            "Enterprise.SystemSBR.Person.LastName",
            "Enterprise.SystemSBR.Person.Address.City",
            
            //"Enterprise.SystemSBR.Person.Address.AddressId",
            "Enterprise.SystemSBR.Person.Phone.Phone",
            "Enterprise.SystemSBR.Person.Phone.PhoneId",
        };

        QueryObject qo = new QueryObject();
        qo.setSelect(fields);

        Condition[] conditions = new Condition[] {
                
                    new Condition("Enterprise.SystemSBR.Person.LastName",
                        "LIKE", "KA%", true)
                
            };
        String ansisql[] = {
        		"SELECT  SBYN_PERSONSBR.EUID , SBYN_PERSONSBR.LASTNAME , SBYN_PERSONSBR.PERSONID , " +
        		  "SBYN_PHONESBR.PHONE , SBYN_PHONESBR.PHONEID , SBYN_PHONESBR.PHONETYPE " +
        		"FROM  ( SBYN_PERSONSBR left outer join SBYN_PHONESBR " +
        		  "on  SBYN_PERSONSBR.PERSONID = SBYN_PHONESBR.PERSONID  )  " +
        		 "WHERE  SBYN_PERSONSBR.LASTNAME  LIKE ?  Order By 3"
        		,		
        		"SELECT  SBYN_PERSONSBR.PERSONID , SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , " +
        		  "SBYN_ADDRESSSBR.ADDRESSID " +
        		 "FROM  ( SBYN_PERSONSBR left outer join SBYN_ADDRESSSBR " +
        		    "on  SBYN_PERSONSBR.PERSONID = SBYN_ADDRESSSBR.PERSONID  )  " +
        		  "WHERE  SBYN_PERSONSBR.LASTNAME  LIKE ?  Order By 1"

        };
        
        String sqloracle[] = {
        		"SELECT  SBYN_PERSONSBR.EUID , SBYN_PERSONSBR.LASTNAME , SBYN_PERSONSBR.PERSONID , SBYN_PHONESBR.PHONE , " +
        		"SBYN_PHONESBR.PHONEID , SBYN_PHONESBR.PHONETYPE " +
        		"FROM SBYN_PHONESBR , SBYN_PERSONSBR " +
        		"WHERE  SBYN_PERSONSBR.LASTNAME  LIKE ?  " +
        		"Order By 3"
        		,
        		"SELECT  SBYN_PERSONSBR.PERSONID , SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , " +
        		"SBYN_ADDRESSSBR.ADDRESSID " +
        		"FROM SBYN_ADDRESSSBR , SBYN_PERSONSBR " +
        		"WHERE  SBYN_PERSONSBR.LASTNAME  LIKE ?  " +
        		"Order By 1"	
        };
        qo.setCondition(conditions);

        AssembleDescriptor assdesc = new AssembleDescriptor();
        qo.setAssembleDescriptor(assdesc);
        assdesc.setAssembler(new ObjectNodeAssembler());

        qo.preInitializeForCacheComparision();

        SQLDescriptor[] sqlDesc = qo.parse();
        System.out.println("testPrepareSQL");
        for (int i = 0; i < sqlDesc.length; i++) {
          String sql = sqlDesc[i].getSQL();
          System.out.println(sql);   
          if (ObjectFactory.isDatabaseANSI()) {
              checkSQLStrings(ansisql[i], sql);
          } else {
        	  checkSQLStrings(sqloracle[i], sql);
          }
        } 
    }

    // This tests the ObjectNodeFactory for Person & Address Object.
    // This would be used in ETD

    /**
     * tests prepare statement for multiple objects
     *
     * @exception Exception error occurs
     */
    public void testPrepareMutipleObjectsSQL() throws Exception {
        System.out.println("testPrepare2");

        // for now put all the primary keys in the select fields
        String[] fields = {
             
            //"Enterprise.SystemSBR.Person.PersonId",
            "Enterprise.SystemSBR.Person.LastName",
            "Enterprise.SystemSBR.Person.Address.City",
            
            // "Enterprise.SystemSBR.Person.Address.AddressId",
            "Enterprise.SystemSBR.Person.Phone.Phone",
            "Enterprise.SystemSBR.Person.Phone.PhoneId",
        };

        QueryObject qo = new QueryObject();
        qo.setSelect(fields);

        Condition[][] conditions = new Condition[][] {
                {
                    new Condition("Enterprise.SystemSBR.Person.LastName",
                        "LIKE", "KO%", true)
                },
                {
                    new Condition("Enterprise.SystemSBR.Person.Address.City",
                        "IN", new String[] {"Mon%"})
                }
            };
        
        String[] ansisql = {
        		"SELECT  SBYN_PERSONSBR.LASTNAME , SBYN_PERSONSBR.PERSONID , SBYN_PHONESBR.PHONE , " +
        		  "SBYN_PHONESBR.PHONEID , SBYN_PHONESBR.PHONETYPE " +
        		 "FROM  ( SBYN_PERSONSBR left outer join SBYN_PHONESBR " +
        		   "on  SBYN_PERSONSBR.PERSONID = SBYN_PHONESBR.PERSONID  )  " +
        		  "WHERE  SBYN_PERSONSBR.LASTNAME  LIKE  'KO%' " +
        		  "Union " +
        		  "SELECT  SBYN_PERSONSBR.LASTNAME , SBYN_PERSONSBR.PERSONID , SBYN_PHONESBR.PHONE , " +
        		     "SBYN_PHONESBR.PHONEID , SBYN_PHONESBR.PHONETYPE " +
        		   "FROM  ( SBYN_PERSONSBR left outer join SBYN_PHONESBR " +
        		     "on  SBYN_PERSONSBR.PERSONID = SBYN_PHONESBR.PERSONID  ) " +
        		   " WHERE   SBYN_PERSONSBR.PERSONID " +
        		     "IN ( Select SBYN_ADDRESSSBR.PERSONID " +
        		          "From SBYN_ADDRESSSBR Where  SBYN_ADDRESSSBR.CITY  IN   ( 'Mon%' )  )  " +
        		   "Order By 2"
        		,
        		"SELECT  SBYN_PERSONSBR.PERSONID , SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , " +
        		  "SBYN_ADDRESSSBR.ADDRESSID " +
        		 "FROM  ( SBYN_PERSONSBR left outer join SBYN_ADDRESSSBR " +
        		   "on  SBYN_PERSONSBR.PERSONID = SBYN_ADDRESSSBR.PERSONID  )  " +
        		  "WHERE  SBYN_PERSONSBR.LASTNAME  LIKE  'KO%' " +
        		 "Union " +
        		 "SELECT  SBYN_PERSONSBR.PERSONID , SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , " +
        		 "SBYN_ADDRESSSBR.ADDRESSID " +
        		 "FROM  ( SBYN_PERSONSBR left outer join SBYN_ADDRESSSBR " +
        		   "on  SBYN_PERSONSBR.PERSONID = SBYN_ADDRESSSBR.PERSONID  )  " +
        		  "WHERE  SBYN_ADDRESSSBR.CITY  IN   ( 'Mon%' )  " +
        		  "Order By 1"
      		
        };
        
        String[] sqloracle = {
        	"SELECT  SBYN_PERSONSBR.LASTNAME , SBYN_PERSONSBR.PERSONID , SBYN_PHONESBR.PHONE , " +
        	"SBYN_PHONESBR.PHONEID , SBYN_PHONESBR.PHONETYPE " +
        	"FROM SBYN_PHONESBR , SBYN_PERSONSBR " +
        	"WHERE  SBYN_PERSONSBR.LASTNAME  LIKE  'KO%' " +
        	"Union " +
        	"SELECT  SBYN_PERSONSBR.LASTNAME , SBYN_PERSONSBR.PERSONID , SBYN_PHONESBR.PHONE , " +
        	"SBYN_PHONESBR.PHONEID , SBYN_PHONESBR.PHONETYPE " +
        	"FROM SBYN_PHONESBR , SBYN_PERSONSBR " +
        	"WHERE   SBYN_PERSONSBR.PERSONID " +
        	  "IN ( Select SBYN_ADDRESSSBR.PERSONID From SBYN_ADDRESSSBR Where  SBYN_ADDRESSSBR.CITY  IN  ( 'Mon%' ) )  " +
        	  "Order By 2"
        	,
        	"SELECT  SBYN_PERSONSBR.PERSONID , SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , " +
        	"SBYN_ADDRESSSBR.ADDRESSID FROM SBYN_ADDRESSSBR , SBYN_PERSONSBR " +
        	"WHERE  SBYN_PERSONSBR.LASTNAME  LIKE  'KO%' " +
        	"Union " +
        	"SELECT  SBYN_PERSONSBR.PERSONID , SBYN_ADDRESSSBR.CITY , SBYN_ADDRESSSBR.ADDRESSTYPE , " +
        	"SBYN_ADDRESSSBR.ADDRESSID " +
        	"FROM SBYN_ADDRESSSBR , SBYN_PERSONSBR " +
        	"WHERE  SBYN_ADDRESSSBR.CITY  IN   ( 'Mon%' )  " +
        	"Order By 1"
        };
        
        qo.setCondition(conditions);

        AssembleDescriptor assdesc = new AssembleDescriptor();
        qo.setAssembleDescriptor(assdesc);
        assdesc.setAssembler(new ObjectNodeAssembler());

        qo.preInitializeForCacheComparision();

        SQLDescriptor[] sqlDesc = qo.parse();
        System.out.println("testPrepareMutipleObjectsSQL");
        for (int i = 0; i < sqlDesc.length; i++) {
          String sql = sqlDesc[i].getSQL();
          System.out.println(sql);   
          if (ObjectFactory.isDatabaseANSI()) {
              checkSQLStrings(ansisql[i], sql);
          } else {
        	  checkSQLStrings(sqloracle[i], sql);
          }
        } 
    }

  
       
    /**
     * Tests tuple
     *
     * @exception Exception error occurs
     */
    public void testTupleSQL() throws Exception {
        String[] fields = {
            
            //"Enterprise.EUID",
            //"Enterprise.SystemSBR.EUID",
            // "Enterprise.SystemSBR.Person.PersonId",
            "Enterprise.SystemSBR.Person.SSN",
            "Enterprise.SystemSBR.Person.LastName",
            
            //"Enterprise.SystemSBR.Person.Dob",
            // "Enterprise.SystemSBR.Person.Address.City",
            "Enterprise.SystemSBR.Person.Phone.Phone"
        };
        QueryObject qo = new QueryObject();
        qo.setSelect(fields);

        Condition[][] conditions = new Condition[][] {
                {
                    new Condition("Enterprise.SystemSBR.Person.FirstName",
                        "LIKE", "CA%", true)
                },
                {
                    new Condition("Enterprise.SystemSBR.Person.Address.City",
                        "LIKE", "M%")
                }
            };
        
        qo.setCondition(conditions);
        qo.setQueryOption(qo.SINGLE_QUERY);

        String ansisql[] ={ 
        		"SELECT  SBYN_PERSONSBR.SSN , SBYN_PERSONSBR.LASTNAME , SBYN_PHONESBR.PHONE " +
        		"FROM  SBYN_PERSONSBR  " +
        		  "left outer join SBYN_PHONESBR on  SBYN_PERSONSBR.PERSONID = SBYN_PHONESBR.PERSONID  " +
        		"WHERE  SBYN_PERSONSBR.FIRSTNAME  LIKE ?  " +
        		"Union " +
        		"SELECT  SBYN_PERSONSBR.SSN , SBYN_PERSONSBR.LASTNAME , SBYN_PHONESBR.PHONE " +
        		"FROM  SBYN_PERSONSBR  left outer join SBYN_PHONESBR " +
        		  "on  SBYN_PERSONSBR.PERSONID = SBYN_PHONESBR.PERSONID  " +
        		 "WHERE   SBYN_PERSONSBR.PERSONID " +
        		   "IN ( Select SBYN_ADDRESSSBR.PERSONID From SBYN_ADDRESSSBR " +
        		        "Where  SBYN_ADDRESSSBR.CITY  LIKE  'M%' )"
        };
        
        String[] sqloracle = {
        	"SELECT  SBYN_PERSONSBR.SSN , SBYN_PERSONSBR.LASTNAME , SBYN_PHONESBR.PHONE " +
        	"FROM SBYN_PHONESBR , SBYN_PERSONSBR " +
        	"WHERE  SBYN_PERSONSBR.FIRSTNAME  LIKE ?  " +
        	"Union " +
        	"SELECT  SBYN_PERSONSBR.SSN , SBYN_PERSONSBR.LASTNAME , SBYN_PHONESBR.PHONE " +
        	"FROM SBYN_PHONESBR , SBYN_PERSONSBR " +
        	"WHERE   SBYN_PERSONSBR.PERSONID " +
        	  "IN ( Select SBYN_ADDRESSSBR.PERSONID From SBYN_ADDRESSSBR Where  SBYN_ADDRESSSBR.CITY  LIKE  'M%' ) "
	
        };
        
        
        qo.preInitializeForCacheComparision();

        SQLDescriptor[] sqlDesc = qo.parse();
        System.out.println("testTupleSQL");
        for (int i = 0; i < sqlDesc.length; i++) {
          String sql = sqlDesc[i].getSQL();
          System.out.println(sql);   
          if (ObjectFactory.isDatabaseANSI()) {
              checkSQLStrings(ansisql[i], sql);
          } else {
        	  checkSQLStrings(sqloracle[i], sql);
          }
        } 
    }

     /**
     * Another tuple construction tests
     *
     * @exception Exception error occurs
     */
    public void testTuple2SQL() throws Exception {
        String[] fields = {
            
            //"Enterprise.EUID",
            //"Enterprise.SystemSBR.EUID",
            // "Enterprise.SystemSBR.Person.PersonId",
            "Enterprise.SystemSBR.Person.SSN",
            "Enterprise.SystemSBR.Person.LastName",
            
            //"Enterprise.SystemSBR.Person.Dob",
            // "Enterprise.SystemSBR.Person.Address.City",
            "Enterprise.SystemSBR.Person.Phone.Phone"
        };
        QueryObject qo = new QueryObject();
        qo.setSelect(fields);

        Condition[][] conditions = new Condition[][] {
                {
                    new Condition("Enterprise.SystemSBR.Person.FirstName",
                        "LIKE", "CA%", true)
                }
            };
        qo.setCondition(conditions);

        // qo.addCondition("Enterprise.SystemSBR.Person.FirstName", "LIKE", "C%");
        // qo.addCondition("Enterprise.SystemSBR.Person.SSN", "LIKE", "0%");
        //qo.setRootObject("Enterprise.SystemSBR.Person");
        qo.setQueryOption(qo.SINGLE_QUERY);

        String ansisql[] =  {
        		"SELECT  SBYN_PERSONSBR.SSN , SBYN_PERSONSBR.LASTNAME , SBYN_PHONESBR.PHONE " +
        		"FROM  SBYN_PERSONSBR  left outer join SBYN_PHONESBR " +
        		  "on  SBYN_PERSONSBR.PERSONID = SBYN_PHONESBR.PERSONID  " +
        		  "WHERE  SBYN_PERSONSBR.FIRSTNAME  LIKE ? "
        };
        
        String[] sqloracle = {
        	"SELECT  SBYN_PERSONSBR.SSN , SBYN_PERSONSBR.LASTNAME , SBYN_PHONESBR.PHONE " +
        	"FROM SBYN_PHONESBR , SBYN_PERSONSBR " +
        	"WHERE  SBYN_PERSONSBR.FIRSTNAME  LIKE ? "
	
        };

        qo.preInitializeForCacheComparision();

        SQLDescriptor[] sqlDesc = qo.parse();
        System.out.println("testTuple2SQL");
        for (int i = 0; i < sqlDesc.length; i++) {
          String sql = sqlDesc[i].getSQL();
          System.out.println(sql);   
          if (ObjectFactory.isDatabaseANSI()) {
              checkSQLStrings(ansisql[i], sql);
          } else {
        	  checkSQLStrings(sqloracle[i], sql);
          }
        } 
    }
    
    
   
    /**
     * Tests the Tuple Assembler
     *
     * @exception Exception error occurs
     */
    public void testTupleAssemblerSQL() throws Exception {
        String[] fields = {
            
            //"Enterprise.EUID",
            "Enterprise.SystemSBR.Person.EUID",
            "Enterprise.SystemSBR.Person.PersonId",
            "Enterprise.SystemSBR.Person.SSN",
            "Enterprise.SystemSBR.Person.FirstName",
            "Enterprise.SystemSBR.Person.LastName",
            
            //"Enterprise.SystemSBR.Person.Dob",
            "Enterprise.SystemSBR.Person.Address.PostalCode",
            "Enterprise.SystemSBR.Person.Address.AddressId",
        };

        QueryObject qo = new QueryObject();
        qo.setSelect(fields);

        Condition[] conditions = new Condition[] {
                new Condition("Enterprise.SystemSBR.Person.FirstName", "LIKE",
                    "Cal%")
            };
        qo.setCondition(conditions);
        
        qo.setQueryOption(qo.SINGLE_QUERY);

        String[] ansisql = {
          "SELECT  SBYN_PERSONSBR.EUID , SBYN_PERSONSBR.PERSONID , SBYN_PERSONSBR.SSN , SBYN_PERSONSBR.FIRSTNAME , " +
          "SBYN_PERSONSBR.LASTNAME , SBYN_ADDRESSSBR.POSTALCODE , SBYN_ADDRESSSBR.ADDRESSID " +
          "FROM  SBYN_PERSONSBR  left outer join SBYN_ADDRESSSBR " +
             "on  SBYN_PERSONSBR.PERSONID = SBYN_ADDRESSSBR.PERSONID  " +
             "WHERE  SBYN_PERSONSBR.FIRSTNAME  LIKE  'Cal%' " +
             "Order By 1"
        		
        };
        
        String[] sqloracle = {
        	"SELECT  SBYN_PERSONSBR.EUID , SBYN_PERSONSBR.PERSONID , SBYN_PERSONSBR.SSN , " +
        	"SBYN_PERSONSBR.FIRSTNAME , SBYN_PERSONSBR.LASTNAME , SBYN_ADDRESSSBR.POSTALCODE , " +
        	"SBYN_ADDRESSSBR.ADDRESSID " +
        	"FROM SBYN_ADDRESSSBR , SBYN_PERSONSBR WHERE  SBYN_PERSONSBR.FIRSTNAME  LIKE  'Cal%' " +
        	"Order By 1 "
	
        };
        
        qo.preInitializeForCacheComparision();
        System.out.println("testTupleAssemblerSQL");
        SQLDescriptor[] sqlDesc = qo.parse();
        for (int i = 0; i < sqlDesc.length; i++) {
          String sql = sqlDesc[i].getSQL();
          System.out.println(sql);   
          if (ObjectFactory.isDatabaseANSI()) {
              checkSQLStrings(ansisql[i], sql);
          } else {
        	  checkSQLStrings(sqloracle[i], sql);
          }
        } 
    }

    private void checkSQLStrings(String str1, String str2) 
    {

    	StringTokenizer str1tokenizer = new StringTokenizer(str1);
        StringTokenizer str2tokenizer = new StringTokenizer(str2);

        while (str1tokenizer.hasMoreTokens() && str2tokenizer.hasMoreTokens()) {
            String s1 = str1tokenizer.nextToken();
            String s2 = str2tokenizer.nextToken();
            assertTrue(s1.equalsIgnoreCase(s2));
        }
        if ( (str1tokenizer.hasMoreTokens() && !str2tokenizer.hasMoreTokens()) 
        		||(!str1tokenizer.hasMoreTokens() && str2tokenizer.hasMoreTokens()) ) {
        	assertTrue(false);
        }
    
    }
     

    /**
     * main
     *
     * @param args args
     */
    public static void main(String[] args) {
        try {
            junit.textui.TestRunner.run(new TestSuite(QueryObjectTest.class));

            // QueryObjectTest qotest = new QueryObjectTest("testSingleNodeParse");
            // qotest.testSingleNodeParse();
        } catch (Exception ex) {
            ;//
        }
    }
}
